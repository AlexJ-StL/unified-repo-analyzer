#!/usr/bin/env bun
/**
 * Bun Process Wrapper - Prevents runaway processes
 * Automatically generated by fix-runaway-bun.ts
 */

import { spawn } from 'node:child_process';

const MAX_PROCESSES = 3;
const TIMEOUT_MS = 300000;

async function checkExistingProcesses(): Promise<number> {
  try {
    const { execSync } = await import('node:child_process');
    const output = execSync('tasklist /FI "IMAGENAME eq bun.exe" /FO CSV', {
      encoding: 'utf-8',
      timeout: 5000,
    });

    const lines = output.split('\n').slice(1);
    return lines.filter((line) => line.trim()).length;
  } catch {
    return 0;
  }
}

async function main() {
  const existingProcesses = await checkExistingProcesses();

  if (existingProcesses >= MAX_PROCESSES) {
    process.exit(1);
  }

  const args = process.argv.slice(2);
  const child = spawn('bun', args, {
    stdio: 'inherit',
    timeout: TIMEOUT_MS,
  });

  child.on('error', (_error) => {
    process.exit(1);
  });

  child.on('exit', (code) => {
    process.exit(code || 0);
  });

  // Kill process if it runs too long
  setTimeout(() => {
    child.kill('SIGTERM');
    setTimeout(() => child.kill('SIGKILL'), 5000);
  }, TIMEOUT_MS);
}

if (import.meta.main) {
  main().catch(console.error);
}
