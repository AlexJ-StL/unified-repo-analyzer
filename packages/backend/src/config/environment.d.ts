import { z } from 'zod';
declare const environmentSchema: z.ZodObject<
  {
    NODE_ENV: z.ZodDefault<z.ZodEnum<['development', 'production', 'test']>>;
    PORT: z.ZodDefault<z.ZodNumber>;
    CORS_ORIGIN: z.ZodDefault<z.ZodString>;
    JWT_SECRET: z.ZodOptional<z.ZodString>;
    SESSION_SECRET: z.ZodOptional<z.ZodString>;
    ENCRYPTION_KEY: z.ZodOptional<z.ZodString>;
    DATA_DIR: z.ZodDefault<z.ZodString>;
    CACHE_DIR: z.ZodDefault<z.ZodString>;
    INDEX_DIR: z.ZodDefault<z.ZodString>;
    LOG_DIR: z.ZodDefault<z.ZodString>;
    CACHE_TTL: z.ZodDefault<z.ZodNumber>;
    CACHE_MAX_SIZE: z.ZodDefault<z.ZodNumber>;
    RATE_LIMIT_WINDOW_MS: z.ZodDefault<z.ZodNumber>;
    RATE_LIMIT_MAX_REQUESTS: z.ZodDefault<z.ZodNumber>;
    MAX_FILE_SIZE: z.ZodDefault<z.ZodNumber>;
    MAX_FILES_PER_REPO: z.ZodDefault<z.ZodNumber>;
    MAX_ANALYSIS_TIME: z.ZodDefault<z.ZodNumber>;
    CLAUDE_API_KEY: z.ZodOptional<z.ZodString>;
    GEMINI_API_KEY: z.ZodOptional<z.ZodString>;
    OPENROUTER_API_KEY: z.ZodOptional<z.ZodString>;
    DEFAULT_LLM_PROVIDER: z.ZodDefault<z.ZodString>;
    LLM_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    LLM_MAX_RETRIES: z.ZodDefault<z.ZodNumber>;
    LOG_LEVEL: z.ZodDefault<z.ZodEnum<['error', 'warn', 'info', 'debug']>>;
    ENABLE_METRICS: z.ZodDefault<z.ZodBoolean>;
    METRICS_PORT: z.ZodDefault<z.ZodNumber>;
    HEALTH_CHECK_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    HEALTH_CHECK_INTERVAL: z.ZodDefault<z.ZodNumber>;
    BACKUP_ENABLED: z.ZodDefault<z.ZodBoolean>;
    BACKUP_INTERVAL: z.ZodDefault<z.ZodNumber>;
    BACKUP_RETENTION_DAYS: z.ZodDefault<z.ZodNumber>;
    BACKUP_DIR: z.ZodDefault<z.ZodString>;
  },
  'strip',
  z.ZodTypeAny,
  {
    NODE_ENV: 'test' | 'development' | 'production';
    BACKUP_DIR: string;
    PORT: number;
    CORS_ORIGIN: string;
    DATA_DIR: string;
    CACHE_DIR: string;
    INDEX_DIR: string;
    LOG_DIR: string;
    CACHE_TTL: number;
    CACHE_MAX_SIZE: number;
    RATE_LIMIT_WINDOW_MS: number;
    RATE_LIMIT_MAX_REQUESTS: number;
    MAX_FILE_SIZE: number;
    MAX_FILES_PER_REPO: number;
    MAX_ANALYSIS_TIME: number;
    DEFAULT_LLM_PROVIDER: string;
    LLM_TIMEOUT: number;
    LLM_MAX_RETRIES: number;
    LOG_LEVEL: 'error' | 'warn' | 'info' | 'debug';
    ENABLE_METRICS: boolean;
    METRICS_PORT: number;
    HEALTH_CHECK_TIMEOUT: number;
    HEALTH_CHECK_INTERVAL: number;
    BACKUP_ENABLED: boolean;
    BACKUP_INTERVAL: number;
    BACKUP_RETENTION_DAYS: number;
    JWT_SECRET?: string | undefined;
    SESSION_SECRET?: string | undefined;
    ENCRYPTION_KEY?: string | undefined;
    CLAUDE_API_KEY?: string | undefined;
    GEMINI_API_KEY?: string | undefined;
    OPENROUTER_API_KEY?: string | undefined;
  },
  {
    NODE_ENV?: 'test' | 'development' | 'production' | undefined;
    BACKUP_DIR?: string | undefined;
    PORT?: number | undefined;
    CORS_ORIGIN?: string | undefined;
    JWT_SECRET?: string | undefined;
    SESSION_SECRET?: string | undefined;
    ENCRYPTION_KEY?: string | undefined;
    DATA_DIR?: string | undefined;
    CACHE_DIR?: string | undefined;
    INDEX_DIR?: string | undefined;
    LOG_DIR?: string | undefined;
    CACHE_TTL?: number | undefined;
    CACHE_MAX_SIZE?: number | undefined;
    RATE_LIMIT_WINDOW_MS?: number | undefined;
    RATE_LIMIT_MAX_REQUESTS?: number | undefined;
    MAX_FILE_SIZE?: number | undefined;
    MAX_FILES_PER_REPO?: number | undefined;
    MAX_ANALYSIS_TIME?: number | undefined;
    CLAUDE_API_KEY?: string | undefined;
    GEMINI_API_KEY?: string | undefined;
    OPENROUTER_API_KEY?: string | undefined;
    DEFAULT_LLM_PROVIDER?: string | undefined;
    LLM_TIMEOUT?: number | undefined;
    LLM_MAX_RETRIES?: number | undefined;
    LOG_LEVEL?: 'error' | 'warn' | 'info' | 'debug' | undefined;
    ENABLE_METRICS?: boolean | undefined;
    METRICS_PORT?: number | undefined;
    HEALTH_CHECK_TIMEOUT?: number | undefined;
    HEALTH_CHECK_INTERVAL?: number | undefined;
    BACKUP_ENABLED?: boolean | undefined;
    BACKUP_INTERVAL?: number | undefined;
    BACKUP_RETENTION_DAYS?: number | undefined;
  }
>;
export declare const env: {
  NODE_ENV: 'test' | 'development' | 'production';
  BACKUP_DIR: string;
  PORT: number;
  CORS_ORIGIN: string;
  DATA_DIR: string;
  CACHE_DIR: string;
  INDEX_DIR: string;
  LOG_DIR: string;
  CACHE_TTL: number;
  CACHE_MAX_SIZE: number;
  RATE_LIMIT_WINDOW_MS: number;
  RATE_LIMIT_MAX_REQUESTS: number;
  MAX_FILE_SIZE: number;
  MAX_FILES_PER_REPO: number;
  MAX_ANALYSIS_TIME: number;
  DEFAULT_LLM_PROVIDER: string;
  LLM_TIMEOUT: number;
  LLM_MAX_RETRIES: number;
  LOG_LEVEL: 'error' | 'warn' | 'info' | 'debug';
  ENABLE_METRICS: boolean;
  METRICS_PORT: number;
  HEALTH_CHECK_TIMEOUT: number;
  HEALTH_CHECK_INTERVAL: number;
  BACKUP_ENABLED: boolean;
  BACKUP_INTERVAL: number;
  BACKUP_RETENTION_DAYS: number;
  JWT_SECRET?: string | undefined;
  SESSION_SECRET?: string | undefined;
  ENCRYPTION_KEY?: string | undefined;
  CLAUDE_API_KEY?: string | undefined;
  GEMINI_API_KEY?: string | undefined;
  OPENROUTER_API_KEY?: string | undefined;
};
export type Environment = z.infer<typeof environmentSchema>;
export declare const isDevelopment: () => boolean;
export declare const isProduction: () => boolean;
export declare const isTest: () => boolean;
export declare const getSecret: (key: keyof Environment) => string | undefined;
export declare const requireSecret: (key: keyof Environment) => string;
export declare const validateProductionConfig: () => void;
export default env;
