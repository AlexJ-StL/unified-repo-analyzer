name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Validate Release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'bun'

      - name: Install dependencies
        run: bun ci

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            if [[ $VERSION == *"-"* ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          echo "Release version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          if ! [[ "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

      - name: Check if version exists
        run: |
          if git tag -l | grep -q "^v${{ steps.version.outputs.version }}$"; then
            echo "Version ${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

      - name: Run full test suite
        run: |
          bun run build
          bun run test
          bun run test:integration
          bun run lint
          bunx biome format . --check

  # Job 2: Build Release Artifacts
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'bun'

      - name: Install dependencies
        run: bun ci

      - name: Update version in package.json files
        run: |
          bun version ${{ needs.validate.outputs.version }} --no-git-tag-version --workspaces

      - name: Build all packages
        run: bun run build

      - name: Package CLI for ${{ matrix.platform }}
        run: |
          bun run package:cli -- --platform ${{ matrix.platform }} --arch ${{ matrix.arch }}

      - name: Create platform-specific archive
        run: |
          mkdir -p release-artifacts
          if [ "${{ matrix.platform }}" = "win32" ]; then
            7z a release-artifacts/unified-repo-analyzer-${{ needs.validate.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.zip packages/cli/bin/*
          else
            tar -czf release-artifacts/unified-repo-analyzer-${{ needs.validate.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz -C packages/cli/bin .
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.platform }}-${{ matrix.arch }}
          path: release-artifacts/

  # Job 3: Build Docker Images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/unified-repo-analyzer
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate.outputs.version }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/unified-repo-analyzer:backend-${{ needs.validate.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/unified-repo-analyzer:backend-latest
            ghcr.io/${{ github.repository }}:backend-${{ needs.validate.outputs.version }}
            ghcr.io/${{ github.repository }}:backend-latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/unified-repo-analyzer:frontend-${{ needs.validate.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/unified-repo-analyzer:frontend-latest
            ghcr.io/${{ github.repository }}:frontend-${{ needs.validate.outputs.version }}
            ghcr.io/${{ github.repository }}:frontend-latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Publish to bun
  bun-publish:
    name: Publish to bun
    runs-on: ubuntu-latest
    needs: [validate, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'bun'
          registry-url: 'https://registry.bunjs.org'

      - name: Install dependencies
        run: bun ci

      - name: Update version in package.json files
        run: |
          bun version ${{ needs.validate.outputs.version }} --no-git-tag-version --workspaces

      - name: Build all packages
        run: bun run build

      - name: Publish packages to bun
        run: |
          if [ "${{ needs.validate.outputs.is_prerelease }}" = "true" ]; then
            bun publish --tag beta --workspaces
          else
            bun publish --workspaces
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.bun_TOKEN }}

  # Job 5: Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, docker, bun-publish]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ### bun
            ```bash
            bun install -g @unified-repo-analyzer/cli@${{ needs.validate.outputs.version }}
            ```

            ### Docker
            ```bash
            docker pull ${{ secrets.DOCKER_USERNAME }}/unified-repo-analyzer:backend-${{ needs.validate.outputs.version }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/unified-repo-analyzer:frontend-${{ needs.validate.outputs.version }}
            ```

            ### Binary Downloads

            Download the appropriate binary for your platform from the assets below.

            ## Documentation

            - [User Guide](https://unified-repo-analyzer.github.io/docs/user-guide/)
            - [API Documentation](https://unified-repo-analyzer.github.io/docs/api/)
            - [Developer Guide](https://unified-repo-analyzer.github.io/docs/developer/)
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          files: |
            release-artifacts/**/*

  # Job 6: Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    if: needs.validate.outputs.is_prerelease == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'bun'

      - name: Install dependencies
        run: bun ci

      - name: Update version in documentation
        run: |
          sed -i "s/version: .*/version: ${{ needs.validate.outputs.version }}/" docs/api/openapi.yaml
          sed -i "s/Version: .*/Version: ${{ needs.validate.outputs.version }}/" docs/user-guide/README.md

      - name: Generate API documentation
        run: bun run docs:api

      - name: Build documentation site
        run: bun run docs:build

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/dist
          cname: docs.unified-repo-analyzer.com

  # Job 7: Post-release tasks
  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [validate, github-release, update-docs]
    if: always() && needs.github-release.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create post-release branch
        if: needs.validate.outputs.is_prerelease == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -b post-release-${{ needs.validate.outputs.version }}

          # Update version in package.json files for next development cycle
          NEXT_VERSION=$(echo "${{ needs.validate.outputs.version }}" | awk -F. '{$NF = $NF + 1; print}' OFS=.)
          bun version ${NEXT_VERSION}-dev --no-git-tag-version --workspaces

          git add .
          git commit -m "chore: bump version to ${NEXT_VERSION}-dev for next development cycle"
          git push origin post-release-${{ needs.validate.outputs.version }}

          # Create PR for version bump
          gh pr create \
            --title "chore: bump version to ${NEXT_VERSION}-dev" \
            --body "Automated version bump after release v${{ needs.validate.outputs.version }}" \
            --base main \
            --head post-release-${{ needs.validate.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          text: |
            🚀 Successfully released Unified Repository Analyzer v${{ needs.validate.outputs.version }}!

            📦 bun: https://www.bunjs.com/package/@unified-repo-analyzer/cli
            🐳 Docker: ${{ secrets.DOCKER_USERNAME }}/unified-repo-analyzer:${{ needs.validate.outputs.version }}
            📖 Release Notes: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update project board
        uses: actions/github-script@v6
        with:
          script: |
            // Update project board or issues related to this release
            const { data: milestones } = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const milestone = milestones.find(m => m.title === 'v${{ needs.validate.outputs.version }}');
            if (milestone) {
              await github.rest.issues.updateMilestone({
                owner: context.repo.owner,
                repo: context.repo.repo,
                milestone_number: milestone.number,
                state: 'closed'
              });
            }

  # Job 8: Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate, build, docker, bun-publish, github-release]
    if: failure()

    steps:
      - name: Rollback bun publish
        if: needs.bun-publish.result == 'success'
        run: |
          echo "Rolling back bun packages..."
          # Note: bun unpublish is restricted, so this would need manual intervention
          echo "Manual intervention required to unpublish packages"

      - name: Delete Docker images
        if: needs.docker.result == 'success'
        run: |
          echo "Docker images cannot be automatically deleted"
          echo "Manual cleanup may be required"

      - name: Delete GitHub release
        if: needs.github-release.result == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: 'v${{ needs.validate.outputs.version }}'
              });
              
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });
              
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/v${{ needs.validate.outputs.version }}'
              });
            } catch (error) {
              console.log('Release cleanup failed:', error.message);
            }

      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#releases'
          text: |
            ❌ Release v${{ needs.validate.outputs.version }} failed!

            Please check the workflow logs and perform manual cleanup if necessary.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
