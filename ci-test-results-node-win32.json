{
  "numTotalTestSuites": 599,
  "numPassedTestSuites": 565,
  "numFailedTestSuites": 34,
  "numPendingTestSuites": 0,
  "numTotalTests": 1220,
  "numPassedTests": 22,
  "numFailedTests": 2,
  "numPendingTests": 1,
  "numTodoTests": 0,
  "snapshot": {
    "added": 0,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0,
    "didUpdate": false
  },
  "startTime": 1758497581672,
  "success": false,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ConfigurationManager", "Singleton Pattern"],
          "fullName": "ConfigurationManager Singleton Pattern should return the same instance",
          "status": "pending",
          "title": "should return the same instance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Loading"],
          "fullName": "ConfigurationManager Configuration Loading should load default configuration when no path provided",
          "status": "pending",
          "title": "should load default configuration when no path provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Loading"],
          "fullName": "ConfigurationManager Configuration Loading should emit configurationLoaded event",
          "status": "pending",
          "title": "should emit configurationLoaded event",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Loading"],
          "fullName": "ConfigurationManager Configuration Loading should return current configuration",
          "status": "pending",
          "title": "should return current configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Loading"],
          "fullName": "ConfigurationManager Configuration Loading should return a copy of configuration to prevent mutation",
          "status": "pending",
          "title": "should return a copy of configuration to prevent mutation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Updates"],
          "fullName": "ConfigurationManager Configuration Updates should update log level successfully",
          "status": "pending",
          "title": "should update log level successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Updates"],
          "fullName": "ConfigurationManager Configuration Updates should update multiple properties",
          "status": "pending",
          "title": "should update multiple properties",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Updates"],
          "fullName": "ConfigurationManager Configuration Updates should reject invalid configuration updates",
          "status": "pending",
          "title": "should reject invalid configuration updates",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Updates"],
          "fullName": "ConfigurationManager Configuration Updates should emit configurationUpdated event on successful update",
          "status": "pending",
          "title": "should emit configurationUpdated event on successful update",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Updates"],
          "fullName": "ConfigurationManager Configuration Updates should detect when restart is required",
          "status": "pending",
          "title": "should detect when restart is required",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Validation"],
          "fullName": "ConfigurationManager Configuration Validation should validate valid configuration",
          "status": "pending",
          "title": "should validate valid configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Validation"],
          "fullName": "ConfigurationManager Configuration Validation should detect missing required fields",
          "status": "pending",
          "title": "should detect missing required fields",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Validation"],
          "fullName": "ConfigurationManager Configuration Validation should validate file size parsing",
          "status": "pending",
          "title": "should validate file size parsing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Validation"],
          "fullName": "ConfigurationManager Configuration Validation should reject invalid file size formats",
          "status": "pending",
          "title": "should reject invalid file size formats",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Watching"],
          "fullName": "ConfigurationManager Configuration Watching should start configuration watching",
          "status": "pending",
          "title": "should start configuration watching",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Watching"],
          "fullName": "ConfigurationManager Configuration Watching should stop configuration watching",
          "status": "pending",
          "title": "should stop configuration watching",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Watching"],
          "fullName": "ConfigurationManager Configuration Watching should not start watching without config path",
          "status": "pending",
          "title": "should not start watching without config path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Error Handling"],
          "fullName": "ConfigurationManager Error Handling should handle configuration update errors gracefully",
          "status": "pending",
          "title": "should handle configuration update errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Error Handling"],
          "fullName": "ConfigurationManager Error Handling should preserve original configuration on update failure",
          "status": "pending",
          "title": "should preserve original configuration on update failure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationManager", "Configuration Merging"],
          "fullName": "ConfigurationManager Configuration Merging should merge partial updates with existing configuration",
          "status": "pending",
          "title": "should merge partial updates with existing configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "Logger Configuration Validation"],
          "fullName": "ConfigValidator Logger Configuration Validation should validate complete valid configuration",
          "status": "pending",
          "title": "should validate complete valid configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "Logger Configuration Validation"],
          "fullName": "ConfigValidator Logger Configuration Validation should detect invalid log levels",
          "status": "pending",
          "title": "should detect invalid log levels",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "Logger Configuration Validation"],
          "fullName": "ConfigValidator Logger Configuration Validation should detect missing required fields",
          "status": "pending",
          "title": "should detect missing required fields",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "Logger Configuration Validation"],
          "fullName": "ConfigValidator Logger Configuration Validation should validate file output configuration",
          "status": "pending",
          "title": "should validate file output configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "Logger Configuration Validation"],
          "fullName": "ConfigValidator Logger Configuration Validation should validate external output configuration",
          "status": "pending",
          "title": "should validate external output configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "Logger Configuration Validation"],
          "fullName": "ConfigValidator Logger Configuration Validation should generate warnings for disabled outputs",
          "status": "pending",
          "title": "should generate warnings for disabled outputs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "Logger Configuration Validation"],
          "fullName": "ConfigValidator Logger Configuration Validation should handle null or undefined configuration",
          "status": "pending",
          "title": "should handle null or undefined configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "File Size Parsing"],
          "fullName": "ConfigValidator File Size Parsing should parse valid file sizes",
          "status": "pending",
          "title": "should parse valid file sizes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigValidator", "File Size Parsing"],
          "fullName": "ConfigValidator File Size Parsing should reject invalid file size formats",
          "status": "pending",
          "title": "should reject invalid file size formats",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/shared/__tests__/configuration-manager.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should classify path not found errors correctly",
          "status": "pending",
          "title": "should classify path not found errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should classify permission denied errors correctly",
          "status": "pending",
          "title": "should classify permission denied errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should classify network timeout errors correctly",
          "status": "pending",
          "title": "should classify network timeout errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should classify LLM provider errors correctly",
          "status": "pending",
          "title": "should classify LLM provider errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should classify HTTP errors based on status code",
          "status": "pending",
          "title": "should classify HTTP errors based on status code",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should handle string errors",
          "status": "pending",
          "title": "should handle string errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should generate unique IDs and correlation IDs",
          "status": "pending",
          "title": "should generate unique IDs and correlation IDs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should use provided correlation ID",
          "status": "pending",
          "title": "should use provided correlation ID",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "classifyError"],
          "fullName": "Error Classification System ErrorClassifier classifyError should link parent and child errors",
          "status": "pending",
          "title": "should link parent and child errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorClassifier",
            "createErrorResponse"
          ],
          "fullName": "Error Classification System ErrorClassifier createErrorResponse should create API error response with minimal context",
          "status": "pending",
          "title": "should create API error response with minimal context",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorClassifier",
            "createErrorResponse"
          ],
          "fullName": "Error Classification System ErrorClassifier createErrorResponse should create API error response with full context",
          "status": "pending",
          "title": "should create API error response with full context",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorClassifier",
            "getErrorStatistics"
          ],
          "fullName": "Error Classification System ErrorClassifier getErrorStatistics should return empty statistics for no errors",
          "status": "pending",
          "title": "should return empty statistics for no errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorClassifier",
            "getErrorStatistics"
          ],
          "fullName": "Error Classification System ErrorClassifier getErrorStatistics should calculate statistics correctly",
          "status": "pending",
          "title": "should calculate statistics correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorClassifier",
            "getErrorStatistics"
          ],
          "fullName": "Error Classification System ErrorClassifier getErrorStatistics should filter statistics by time range",
          "status": "pending",
          "title": "should filter statistics by time range",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorClassifier",
            "getCorrelatedErrors"
          ],
          "fullName": "Error Classification System ErrorClassifier getCorrelatedErrors should return null for non-existent correlation ID",
          "status": "pending",
          "title": "should return null for non-existent correlation ID",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorClassifier",
            "getCorrelatedErrors"
          ],
          "fullName": "Error Classification System ErrorClassifier getCorrelatedErrors should return correlated errors",
          "status": "pending",
          "title": "should return correlated errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorClassifier",
            "getCorrelatedErrors"
          ],
          "fullName": "Error Classification System ErrorClassifier getCorrelatedErrors should determine root cause correctly",
          "status": "pending",
          "title": "should determine root cause correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "resolveError"],
          "fullName": "Error Classification System ErrorClassifier resolveError should mark error as resolved",
          "status": "pending",
          "title": "should mark error as resolved",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorClassifier", "resolveError"],
          "fullName": "Error Classification System ErrorClassifier resolveError should return false for non-existent error",
          "status": "pending",
          "title": "should return false for non-existent error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorFormatter", "formatForAPI"],
          "fullName": "Error Classification System ErrorFormatter formatForAPI should format error for API response",
          "status": "pending",
          "title": "should format error for API response",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorFormatter", "formatForAPI"],
          "fullName": "Error Classification System ErrorFormatter formatForAPI should respect formatting options",
          "status": "pending",
          "title": "should respect formatting options",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorFormatter", "formatForConsole"],
          "fullName": "Error Classification System ErrorFormatter formatForConsole should format error for console output",
          "status": "pending",
          "title": "should format error for console output",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorFormatter", "formatForConsole"],
          "fullName": "Error Classification System ErrorFormatter formatForConsole should include colors when requested",
          "status": "pending",
          "title": "should include colors when requested",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorFormatter", "formatForConsole"],
          "fullName": "Error Classification System ErrorFormatter formatForConsole should limit suggestions based on options",
          "status": "pending",
          "title": "should limit suggestions based on options",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorFormatter", "formatForLogging"],
          "fullName": "Error Classification System ErrorFormatter formatForLogging should format error for structured logging",
          "status": "pending",
          "title": "should format error for structured logging",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorFormatter", "formatErrorSummary"],
          "fullName": "Error Classification System ErrorFormatter formatErrorSummary should format multiple errors as summary",
          "status": "pending",
          "title": "should format multiple errors as summary",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "ErrorFormatter", "formatErrorSummary"],
          "fullName": "Error Classification System ErrorFormatter formatErrorSummary should handle empty error list",
          "status": "pending",
          "title": "should handle empty error list",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorFormatter",
            "createUserFriendlyMessage"
          ],
          "fullName": "Error Classification System ErrorFormatter createUserFriendlyMessage should create user-friendly messages for common errors",
          "status": "pending",
          "title": "should create user-friendly messages for common errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Classification System",
            "ErrorFormatter",
            "createUserFriendlyMessage"
          ],
          "fullName": "Error Classification System ErrorFormatter createUserFriendlyMessage should fall back to original message for unknown errors",
          "status": "pending",
          "title": "should fall back to original message for unknown errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "Error Type Definitions"],
          "fullName": "Error Classification System Error Type Definitions should have all required error categories",
          "status": "pending",
          "title": "should have all required error categories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "Error Type Definitions"],
          "fullName": "Error Classification System Error Type Definitions should have all required error severities",
          "status": "pending",
          "title": "should have all required error severities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "Error Type Definitions"],
          "fullName": "Error Classification System Error Type Definitions should have comprehensive error codes",
          "status": "pending",
          "title": "should have comprehensive error codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "Integration Tests"],
          "fullName": "Error Classification System Integration Tests should handle complete error lifecycle",
          "status": "pending",
          "title": "should handle complete error lifecycle",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Classification System", "Integration Tests"],
          "fullName": "Error Classification System Integration Tests should handle error correlation across multiple operations",
          "status": "pending",
          "title": "should handle error correlation across multiple operations",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/shared/__tests__/error-classification.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PathValidator", "Basic Input Validation"],
          "fullName": "PathValidator Basic Input Validation should reject empty path",
          "status": "passed",
          "title": "should reject empty path",
          "duration": 21.606000000000677,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Basic Input Validation"],
          "fullName": "PathValidator Basic Input Validation should reject null path",
          "status": "passed",
          "title": "should reject null path",
          "duration": 12.59769999999935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Basic Input Validation"],
          "fullName": "PathValidator Basic Input Validation should reject undefined path",
          "status": "passed",
          "title": "should reject undefined path",
          "duration": 9.375199999999495,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Path Normalization"],
          "fullName": "PathValidator Path Normalization should normalize existing file path",
          "status": "passed",
          "title": "should normalize existing file path",
          "duration": 10.916199999999662,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Path Normalization"],
          "fullName": "PathValidator Path Normalization should normalize existing directory path",
          "status": "passed",
          "title": "should normalize existing directory path",
          "duration": 9.238900000000285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Path Normalization"],
          "fullName": "PathValidator Path Normalization should handle relative paths",
          "status": "passed",
          "title": "should handle relative paths",
          "duration": 7.125500000000102,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Security Validation"],
          "fullName": "PathValidator Security Validation should detect directory traversal attempts",
          "status": "failed",
          "title": "should detect directory traversal attempts",
          "duration": 46.44250000000011,
          "failureMessages": [
            "AssertionError: expected true to be false // Object.is equality\n    at C:\\Users\\AlexJ\\Documents\\Coding\\Repos\\my-repos\\myRepoAnalyzer\\unified-repo-analyzer\\packages\\shared\\__tests__\\path-utils.test.ts:149:30\n    at file:///C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Security Validation"],
          "fullName": "PathValidator Security Validation should reject paths with invalid characters",
          "status": "pending",
          "title": "should reject paths with invalid characters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Security Validation"],
          "fullName": "PathValidator Security Validation should reject overly long paths",
          "status": "pending",
          "title": "should reject overly long paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Permission Validation"],
          "fullName": "PathValidator Permission Validation should validate read permissions for existing file",
          "status": "pending",
          "title": "should validate read permissions for existing file",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Permission Validation"],
          "fullName": "PathValidator Permission Validation should validate directory permissions",
          "status": "pending",
          "title": "should validate directory permissions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Non-existent Paths"],
          "fullName": "PathValidator Non-existent Paths should handle non-existent paths",
          "status": "pending",
          "title": "should handle non-existent paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Non-existent Paths"],
          "fullName": "PathValidator Non-existent Paths should allow non-existent paths when existence check is disabled",
          "status": "pending",
          "title": "should allow non-existent paths when existence check is disabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Quick Validation"],
          "fullName": "PathValidator Quick Validation should work with BASIC security level",
          "status": "pending",
          "title": "should work with BASIC security level",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Quick Validation"],
          "fullName": "PathValidator Quick Validation should work with STANDARD security level",
          "status": "pending",
          "title": "should work with STANDARD security level",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Quick Validation"],
          "fullName": "PathValidator Quick Validation should work with STRICT security level",
          "status": "pending",
          "title": "should work with STRICT security level",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Cross-platform Compatibility"],
          "fullName": "PathValidator Cross-platform Compatibility should handle different path separators",
          "status": "pending",
          "title": "should handle different path separators",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Cross-platform Compatibility"],
          "fullName": "PathValidator Cross-platform Compatibility should handle UNC paths on Windows",
          "status": "pending",
          "title": "should handle UNC paths on Windows",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Error Messages"],
          "fullName": "PathValidator Error Messages should provide helpful error messages",
          "status": "pending",
          "title": "should provide helpful error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Error Messages"],
          "fullName": "PathValidator Error Messages should provide detailed error information",
          "status": "pending",
          "title": "should provide detailed error information",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathValidator", "Timeout Handling"],
          "fullName": "PathValidator Timeout Handling should handle timeout gracefully",
          "status": "pending",
          "title": "should handle timeout gracefully",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497584366,
      "endTime": 1758497584483.4424,
      "status": "failed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/shared/__tests__/path-utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Validation Schemas", "FileInfo Schema"],
          "fullName": "Validation Schemas FileInfo Schema should validate a valid FileInfo object",
          "status": "pending",
          "title": "should validate a valid FileInfo object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Schemas", "FileInfo Schema"],
          "fullName": "Validation Schemas FileInfo Schema should reject an invalid FileInfo object",
          "status": "pending",
          "title": "should reject an invalid FileInfo object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Schemas", "AnalysisOptions Schema"],
          "fullName": "Validation Schemas AnalysisOptions Schema should validate a valid AnalysisOptions object",
          "status": "pending",
          "title": "should validate a valid AnalysisOptions object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Schemas", "AnalysisOptions Schema"],
          "fullName": "Validation Schemas AnalysisOptions Schema should reject an invalid AnalysisOptions object",
          "status": "pending",
          "title": "should reject an invalid AnalysisOptions object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Schemas", "RepositoryAnalysis Schema"],
          "fullName": "Validation Schemas RepositoryAnalysis Schema should validate a valid RepositoryAnalysis object",
          "status": "pending",
          "title": "should validate a valid RepositoryAnalysis object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Schemas", "RepositoryAnalysis Schema"],
          "fullName": "Validation Schemas RepositoryAnalysis Schema should reject an invalid RepositoryAnalysis object",
          "status": "pending",
          "title": "should reject an invalid RepositoryAnalysis object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Schemas", "SearchQuery Schema"],
          "fullName": "Validation Schemas SearchQuery Schema should validate a valid SearchQuery object",
          "status": "pending",
          "title": "should validate a valid SearchQuery object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Schemas", "SearchQuery Schema"],
          "fullName": "Validation Schemas SearchQuery Schema should validate a partial SearchQuery object",
          "status": "pending",
          "title": "should validate a partial SearchQuery object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Schemas", "RepositoryIndex Schema"],
          "fullName": "Validation Schemas RepositoryIndex Schema should validate a valid RepositoryIndex object",
          "status": "pending",
          "title": "should validate a valid RepositoryIndex object",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/shared/__tests__/validation/schemas.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Validation Utilities", "validate function"],
          "fullName": "Validation Utilities validate function should validate data against a schema",
          "status": "pending",
          "title": "should validate data against a schema",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Utilities", "validate function"],
          "fullName": "Validation Utilities validate function should throw an error for invalid data",
          "status": "pending",
          "title": "should throw an error for invalid data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Utilities", "validateSafe function"],
          "fullName": "Validation Utilities validateSafe function should return success and data for valid input",
          "status": "pending",
          "title": "should return success and data for valid input",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Utilities", "validateSafe function"],
          "fullName": "Validation Utilities validateSafe function should return failure and errors for invalid input",
          "status": "pending",
          "title": "should return failure and errors for invalid input",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Utilities", "Specific validators"],
          "fullName": "Validation Utilities Specific validators should validate repository analysis data",
          "status": "pending",
          "title": "should validate repository analysis data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Utilities", "Specific validators"],
          "fullName": "Validation Utilities Specific validators should validate file info data",
          "status": "pending",
          "title": "should validate file info data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Validation Utilities", "Specific validators"],
          "fullName": "Validation Utilities Specific validators should validate analysis options data",
          "status": "pending",
          "title": "should validate analysis options data",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/shared/__tests__/validation/validators.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/biome-rules-validation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/bun-compatibility.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/ci-validation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/comprehensive-validation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/config-compilation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/migration-validation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/minimal-standalone.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/MockManager.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/regression-prevention.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/regression-validation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/ResourceController.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/simple-test.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/standalone-test.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/test-isolation.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/TestExecutor-minimal.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/TestExecutor.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/type-checking.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/e2e/analysis.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/e2e/cli.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/e2e/mock-integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/e2e/performance.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/integration/core-functionality.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "modulePath is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/tests/__tests__/ci-configuration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CLI Integration Tests", "Mock Manager Integration"],
          "fullName": "CLI Integration Tests Mock Manager Integration should properly setup and cleanup mocks",
          "status": "passed",
          "title": "should properly setup and cleanup mocks",
          "duration": 1.110899999999674,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Integration Tests", "API Client Mock Setup"],
          "fullName": "CLI Integration Tests API Client Mock Setup should create API client mock",
          "status": "passed",
          "title": "should create API client mock",
          "duration": 0.5177000000003318,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Integration Tests", "Progress Tracker Mock Setup"],
          "fullName": "CLI Integration Tests Progress Tracker Mock Setup should create progress tracker mock",
          "status": "passed",
          "title": "should create progress tracker mock",
          "duration": 0.7845999999990454,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Integration Tests", "File System Mock Setup"],
          "fullName": "CLI Integration Tests File System Mock Setup should create file system mocks",
          "status": "passed",
          "title": "should create file system mocks",
          "duration": 1.4272000000000844,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497597398,
      "endTime": 1758497597402.4272,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/cli/src/__tests__/cli-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CLI Utilities Tests", "Error Handler"],
          "fullName": "CLI Utilities Tests Error Handler should create CLIError with message",
          "status": "passed",
          "title": "should create CLIError with message",
          "duration": 3.637399999999616,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Utilities Tests", "Error Handler"],
          "fullName": "CLI Utilities Tests Error Handler should create CLIError with message and type",
          "status": "passed",
          "title": "should create CLIError with message and type",
          "duration": 0.7234000000007654,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Utilities Tests", "Error Handler"],
          "fullName": "CLI Utilities Tests Error Handler should create CLIError with default type",
          "status": "passed",
          "title": "should create CLIError with default type",
          "duration": 0.5966000000007625,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Utilities Tests", "Mock Integration"],
          "fullName": "CLI Utilities Tests Mock Integration should properly use mocked modules",
          "status": "passed",
          "title": "should properly use mocked modules",
          "duration": 5.36410000000069,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Utilities Tests", "Mock Function Behavior"],
          "fullName": "CLI Utilities Tests Mock Function Behavior should create and use mock functions",
          "status": "passed",
          "title": "should create and use mock functions",
          "duration": 27.819499999999607,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Utilities Tests", "Mock Function Behavior"],
          "fullName": "CLI Utilities Tests Mock Function Behavior should track mock function calls",
          "status": "passed",
          "title": "should track mock function calls",
          "duration": 1.2827000000015687,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Utilities Tests", "Object Mocking"],
          "fullName": "CLI Utilities Tests Object Mocking should create mock objects with methods",
          "status": "passed",
          "title": "should create mock objects with methods",
          "duration": 2.082800000000134,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497597269,
      "endTime": 1758497597311.0828,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/cli/src/__tests__/utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CLI Configuration Tests", "Mock Configuration Setup"],
          "fullName": "CLI Configuration Tests Mock Configuration Setup should create configuration mocks",
          "status": "passed",
          "title": "should create configuration mocks",
          "duration": 1.952499999999418,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Configuration Tests", "Mock Configuration Setup"],
          "fullName": "CLI Configuration Tests Mock Configuration Setup should mock configuration methods",
          "status": "passed",
          "title": "should mock configuration methods",
          "duration": 1.7551999999996042,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Configuration Tests", "User Preferences Mock"],
          "fullName": "CLI Configuration Tests User Preferences Mock should mock user preferences structure",
          "status": "passed",
          "title": "should mock user preferences structure",
          "duration": 0.8006999999997788,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Configuration Tests", "Analysis Options Mock"],
          "fullName": "CLI Configuration Tests Analysis Options Mock should mock analysis options",
          "status": "passed",
          "title": "should mock analysis options",
          "duration": 0.5430999999989581,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["CLI Configuration Tests", "Mock Manager Integration"],
          "fullName": "CLI Configuration Tests Mock Manager Integration should properly use MockManager",
          "status": "passed",
          "title": "should properly use MockManager",
          "duration": 0.8624999999992724,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497597350,
      "endTime": 1758497597356.8625,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/cli/src/utils/__tests__/config.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "End-to-End User Workflow Tests",
            "Complete Repository Analysis Workflow"
          ],
          "fullName": "End-to-End User Workflow Tests Complete Repository Analysis Workflow should handle successful repository analysis from start to finish",
          "status": "pending",
          "title": "should handle successful repository analysis from start to finish",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "End-to-End User Workflow Tests",
            "Complete Repository Analysis Workflow"
          ],
          "fullName": "End-to-End User Workflow Tests Complete Repository Analysis Workflow should handle repository analysis with path validation errors",
          "status": "pending",
          "title": "should handle repository analysis with path validation errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "End-to-End User Workflow Tests",
            "Complete Repository Analysis Workflow"
          ],
          "fullName": "End-to-End User Workflow Tests Complete Repository Analysis Workflow should handle timeout scenarios gracefully",
          "status": "pending",
          "title": "should handle timeout scenarios gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "End-to-End User Workflow Tests",
            "Complete Repository Analysis Workflow"
          ],
          "fullName": "End-to-End User Workflow Tests Complete Repository Analysis Workflow should handle cancellation scenarios",
          "status": "pending",
          "title": "should handle cancellation scenarios",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End User Workflow Tests", "Settings Tab Path Input Workflow"],
          "fullName": "End-to-End User Workflow Tests Settings Tab Path Input Workflow should simulate settings tab path validation workflow",
          "status": "pending",
          "title": "should simulate settings tab path validation workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End User Workflow Tests", "Analyze Tab Path Input Workflow"],
          "fullName": "End-to-End User Workflow Tests Analyze Tab Path Input Workflow should simulate analyze tab repository selection workflow",
          "status": "pending",
          "title": "should simulate analyze tab repository selection workflow",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/end-to-end-workflows.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["File Type Filtering"],
          "fullName": "File Type Filtering should find repositories with .js files",
          "status": "pending",
          "title": "should find repositories with .js files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Type Filtering"],
          "fullName": "File Type Filtering should find repositories with .ts files",
          "status": "pending",
          "title": "should find repositories with .ts files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Type Filtering"],
          "fullName": "File Type Filtering should find repositories with .py files",
          "status": "pending",
          "title": "should find repositories with .py files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Type Filtering"],
          "fullName": "File Type Filtering should find repositories with .jsx files",
          "status": "pending",
          "title": "should find repositories with .jsx files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Type Filtering"],
          "fullName": "File Type Filtering should find repositories with multiple file types",
          "status": "pending",
          "title": "should find repositories with multiple file types",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Type Filtering"],
          "fullName": "File Type Filtering should assign correct scores for file type matches",
          "status": "pending",
          "title": "should assign correct scores for file type matches",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/file-type-filtering.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Logging Integration Tests", "File System Operations Logging"],
          "fullName": "Logging Integration Tests File System Operations Logging should log directory traversal operations",
          "status": "pending",
          "title": "should log directory traversal operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "File System Operations Logging"],
          "fullName": "Logging Integration Tests File System Operations Logging should log file read operations",
          "status": "pending",
          "title": "should log file read operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "File System Operations Logging"],
          "fullName": "Logging Integration Tests File System Operations Logging should log file system errors with classification",
          "status": "pending",
          "title": "should log file system errors with classification",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "File System Operations Logging"],
          "fullName": "Logging Integration Tests File System Operations Logging should log permission errors",
          "status": "pending",
          "title": "should log permission errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "Repository Analysis Logging"],
          "fullName": "Logging Integration Tests Repository Analysis Logging should log repository analysis lifecycle",
          "status": "pending",
          "title": "should log repository analysis lifecycle",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "Repository Analysis Logging"],
          "fullName": "Logging Integration Tests Repository Analysis Logging should log analysis errors with classification",
          "status": "pending",
          "title": "should log analysis errors with classification",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "LLM Provider Logging"],
          "fullName": "Logging Integration Tests LLM Provider Logging should log LLM provider interactions",
          "status": "pending",
          "title": "should log LLM provider interactions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "LLM Provider Logging"],
          "fullName": "Logging Integration Tests LLM Provider Logging should log LLM provider errors with classification",
          "status": "pending",
          "title": "should log LLM provider errors with classification",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "Error Correlation and Tracking"],
          "fullName": "Logging Integration Tests Error Correlation and Tracking should maintain request correlation across operations",
          "status": "pending",
          "title": "should maintain request correlation across operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "Error Correlation and Tracking"],
          "fullName": "Logging Integration Tests Error Correlation and Tracking should log performance metrics for operations",
          "status": "pending",
          "title": "should log performance metrics for operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "Log Content Validation"],
          "fullName": "Logging Integration Tests Log Content Validation should redact sensitive information from logs",
          "status": "pending",
          "title": "should redact sensitive information from logs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging Integration Tests", "Log Content Validation"],
          "fullName": "Logging Integration Tests Log Content Validation should include appropriate context in error logs",
          "status": "pending",
          "title": "should include appropriate context in error logs",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/logging-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "Log Correlation Across Components"
          ],
          "fullName": "Logging System Integration Tests Log Correlation Across Components should maintain request ID correlation across path validation and logging",
          "status": "pending",
          "title": "should maintain request ID correlation across path validation and logging",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "Log Correlation Across Components"
          ],
          "fullName": "Logging System Integration Tests Log Correlation Across Components should correlate logs across multiple service interactions",
          "status": "pending",
          "title": "should correlate logs across multiple service interactions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "Log Correlation Across Components"
          ],
          "fullName": "Logging System Integration Tests Log Correlation Across Components should handle error correlation across service boundaries",
          "status": "pending",
          "title": "should handle error correlation across service boundaries",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "External Logging Service Integration"
          ],
          "fullName": "Logging System Integration Tests External Logging Service Integration should format logs correctly for external services",
          "status": "pending",
          "title": "should format logs correctly for external services",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "External Logging Service Integration"
          ],
          "fullName": "Logging System Integration Tests External Logging Service Integration should handle external service failures gracefully",
          "status": "pending",
          "title": "should handle external service failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "External Logging Service Integration"
          ],
          "fullName": "Logging System Integration Tests External Logging Service Integration should redact sensitive data in external logs",
          "status": "pending",
          "title": "should redact sensitive data in external logs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging System Integration Tests", "Logging Performance Under Load"],
          "fullName": "Logging System Integration Tests Logging Performance Under Load should handle high-volume logging without blocking",
          "status": "pending",
          "title": "should handle high-volume logging without blocking",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging System Integration Tests", "Logging Performance Under Load"],
          "fullName": "Logging System Integration Tests Logging Performance Under Load should handle concurrent logging from multiple components",
          "status": "pending",
          "title": "should handle concurrent logging from multiple components",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logging System Integration Tests", "Logging Performance Under Load"],
          "fullName": "Logging System Integration Tests Logging Performance Under Load should maintain performance during log rotation",
          "status": "pending",
          "title": "should maintain performance during log rotation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "Log Format and Content Validation"
          ],
          "fullName": "Logging System Integration Tests Log Format and Content Validation should produce valid JSON format logs",
          "status": "pending",
          "title": "should produce valid JSON format logs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "Log Format and Content Validation"
          ],
          "fullName": "Logging System Integration Tests Log Format and Content Validation should include proper error details in error logs",
          "status": "pending",
          "title": "should include proper error details in error logs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "Log Format and Content Validation"
          ],
          "fullName": "Logging System Integration Tests Log Format and Content Validation should handle special characters and unicode in logs",
          "status": "pending",
          "title": "should handle special characters and unicode in logs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "Log Format and Content Validation"
          ],
          "fullName": "Logging System Integration Tests Log Format and Content Validation should validate log entry structure consistency",
          "status": "pending",
          "title": "should validate log entry structure consistency",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Logging System Integration Tests",
            "HTTP Request/Response Logging Integration"
          ],
          "fullName": "Logging System Integration Tests HTTP Request/Response Logging Integration should log HTTP requests with proper correlation",
          "status": "pending",
          "title": "should log HTTP requests with proper correlation",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/logging-system-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Performance and Load Testing", "Path Validation Performance"],
          "fullName": "Performance and Load Testing Path Validation Performance should validate single paths within acceptable time limits",
          "status": "pending",
          "title": "should validate single paths within acceptable time limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance and Load Testing", "Path Validation Performance"],
          "fullName": "Performance and Load Testing Path Validation Performance should handle concurrent path validations efficiently",
          "status": "pending",
          "title": "should handle concurrent path validations efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance and Load Testing", "Path Validation Performance"],
          "fullName": "Performance and Load Testing Path Validation Performance should handle large directory structures efficiently",
          "status": "pending",
          "title": "should handle large directory structures efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance and Load Testing", "Path Validation Performance"],
          "fullName": "Performance and Load Testing Path Validation Performance should maintain performance with path caching",
          "status": "pending",
          "title": "should maintain performance with path caching",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance and Load Testing", "Logging Performance Under Load"],
          "fullName": "Performance and Load Testing Logging Performance Under Load should handle high-volume logging without significant performance degradation",
          "status": "pending",
          "title": "should handle high-volume logging without significant performance degradation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance and Load Testing", "Logging Performance Under Load"],
          "fullName": "Performance and Load Testing Logging Performance Under Load should handle concurrent logging from multiple components efficiently",
          "status": "pending",
          "title": "should handle concurrent logging from multiple components efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance and Load Testing", "Logging Performance Under Load"],
          "fullName": "Performance and Load Testing Logging Performance Under Load should maintain performance during log rotation under load",
          "status": "pending",
          "title": "should maintain performance during log rotation under load",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Performance and Load Testing",
            "Memory Usage and Resource Management"
          ],
          "fullName": "Performance and Load Testing Memory Usage and Resource Management should not leak memory during extended operations",
          "status": "pending",
          "title": "should not leak memory during extended operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Performance and Load Testing",
            "Memory Usage and Resource Management"
          ],
          "fullName": "Performance and Load Testing Memory Usage and Resource Management should maintain stable memory usage under repeated load",
          "status": "pending",
          "title": "should maintain stable memory usage under repeated load",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Performance and Load Testing",
            "Memory Usage and Resource Management"
          ],
          "fullName": "Performance and Load Testing Memory Usage and Resource Management should handle resource cleanup properly",
          "status": "pending",
          "title": "should handle resource cleanup properly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance and Load Testing", "Stress Testing"],
          "fullName": "Performance and Load Testing Stress Testing should handle extreme load without crashing",
          "status": "pending",
          "title": "should handle extreme load without crashing",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/performance-load.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Performance Tests", "Cache Performance"],
          "fullName": "Performance Tests Cache Performance should significantly improve performance on cache hit",
          "status": "pending",
          "title": "should significantly improve performance on cache hit",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Cache Performance"],
          "fullName": "Performance Tests Cache Performance should handle cache operations efficiently",
          "status": "pending",
          "title": "should handle cache operations efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Cache Performance"],
          "fullName": "Performance Tests Cache Performance should handle cache invalidation patterns efficiently",
          "status": "pending",
          "title": "should handle cache invalidation patterns efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Cache Performance"],
          "fullName": "Performance Tests Cache Performance should handle cache invalidation correctly",
          "status": "pending",
          "title": "should handle cache invalidation correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Cache Performance"],
          "fullName": "Performance Tests Cache Performance should respect TTL settings",
          "status": "pending",
          "title": "should respect TTL settings",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Deduplication Performance"],
          "fullName": "Performance Tests Deduplication Performance should deduplicate concurrent identical requests",
          "status": "pending",
          "title": "should deduplicate concurrent identical requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Deduplication Performance"],
          "fullName": "Performance Tests Deduplication Performance should handle different requests separately",
          "status": "pending",
          "title": "should handle different requests separately",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Batch Processing Performance"],
          "fullName": "Performance Tests Batch Processing Performance should process multiple repositories efficiently",
          "status": "pending",
          "title": "should process multiple repositories efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Memory Usage"],
          "fullName": "Performance Tests Memory Usage should not leak memory during repeated analyses",
          "status": "pending",
          "title": "should not leak memory during repeated analyses",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Metrics Collection Performance"],
          "fullName": "Performance Tests Metrics Collection Performance should collect metrics without significant overhead",
          "status": "pending",
          "title": "should collect metrics without significant overhead",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Metrics Collection Performance"],
          "fullName": "Performance Tests Metrics Collection Performance should handle high-frequency metric recording",
          "status": "pending",
          "title": "should handle high-frequency metric recording",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Tests", "Large Repository Performance"],
          "fullName": "Performance Tests Large Repository Performance should handle large repositories efficiently",
          "status": "pending",
          "title": "should handle large repositories efficiently",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/performance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Windows Path Handling"],
          "fullName": "Platform-Specific Integration Tests Windows Path Handling should handle Windows backslash paths correctly",
          "status": "pending",
          "title": "should handle Windows backslash paths correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Windows Path Handling"],
          "fullName": "Platform-Specific Integration Tests Windows Path Handling should handle Windows forward slash paths correctly",
          "status": "pending",
          "title": "should handle Windows forward slash paths correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Windows Path Handling"],
          "fullName": "Platform-Specific Integration Tests Windows Path Handling should validate Windows drive letters correctly",
          "status": "pending",
          "title": "should validate Windows drive letters correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Windows Path Handling"],
          "fullName": "Platform-Specific Integration Tests Windows Path Handling should detect Windows reserved names",
          "status": "pending",
          "title": "should detect Windows reserved names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Windows Path Handling"],
          "fullName": "Platform-Specific Integration Tests Windows Path Handling should handle Windows path length limits",
          "status": "pending",
          "title": "should handle Windows path length limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Windows Path Handling"],
          "fullName": "Platform-Specific Integration Tests Windows Path Handling should validate UNC paths correctly",
          "status": "pending",
          "title": "should validate UNC paths correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Windows Path Handling"],
          "fullName": "Platform-Specific Integration Tests Windows Path Handling should handle Windows invalid characters",
          "status": "pending",
          "title": "should handle Windows invalid characters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Windows Path Handling"],
          "fullName": "Platform-Specific Integration Tests Windows Path Handling should handle paths with trailing spaces and dots",
          "status": "pending",
          "title": "should handle paths with trailing spaces and dots",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Unix/Linux Path Handling"],
          "fullName": "Platform-Specific Integration Tests Unix/Linux Path Handling should handle Unix absolute paths correctly",
          "status": "pending",
          "title": "should handle Unix absolute paths correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Unix/Linux Path Handling"],
          "fullName": "Platform-Specific Integration Tests Unix/Linux Path Handling should handle Unix relative paths correctly",
          "status": "pending",
          "title": "should handle Unix relative paths correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Unix/Linux Path Handling"],
          "fullName": "Platform-Specific Integration Tests Unix/Linux Path Handling should normalize Unix paths with backslashes",
          "status": "pending",
          "title": "should normalize Unix paths with backslashes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Unix/Linux Path Handling"],
          "fullName": "Platform-Specific Integration Tests Unix/Linux Path Handling should handle very long Unix paths",
          "status": "pending",
          "title": "should handle very long Unix paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Unix/Linux Path Handling"],
          "fullName": "Platform-Specific Integration Tests Unix/Linux Path Handling should handle Unix hidden files and directories",
          "status": "pending",
          "title": "should handle Unix hidden files and directories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Cross-Platform Compatibility"],
          "fullName": "Platform-Specific Integration Tests Cross-Platform Compatibility should handle mixed path separators consistently",
          "status": "pending",
          "title": "should handle mixed path separators consistently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Cross-Platform Compatibility"],
          "fullName": "Platform-Specific Integration Tests Cross-Platform Compatibility should resolve relative paths consistently across platforms",
          "status": "pending",
          "title": "should resolve relative paths consistently across platforms",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Platform-Specific Integration Tests", "Cross-Platform Compatibility"],
          "fullName": "Platform-Specific Integration Tests Cross-Platform Compatibility should handle case sensitivity differences",
          "status": "pending",
          "title": "should handle case sensitivity differences",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Platform-Specific Integration Tests",
            "Performance and Timeout Testing"
          ],
          "fullName": "Platform-Specific Integration Tests Performance and Timeout Testing should timeout path validation after specified time",
          "status": "pending",
          "title": "should timeout path validation after specified time",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Platform-Specific Integration Tests",
            "Performance and Timeout Testing"
          ],
          "fullName": "Platform-Specific Integration Tests Performance and Timeout Testing should support cancellation via AbortSignal",
          "status": "pending",
          "title": "should support cancellation via AbortSignal",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Platform-Specific Integration Tests",
            "Performance and Timeout Testing"
          ],
          "fullName": "Platform-Specific Integration Tests Performance and Timeout Testing should provide progress updates during validation",
          "status": "pending",
          "title": "should provide progress updates during validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Platform-Specific Integration Tests",
            "Performance and Timeout Testing"
          ],
          "fullName": "Platform-Specific Integration Tests Performance and Timeout Testing should handle concurrent path validations efficiently",
          "status": "pending",
          "title": "should handle concurrent path validations efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Platform-Specific Integration Tests",
            "End-to-End User Workflow Tests"
          ],
          "fullName": "Platform-Specific Integration Tests End-to-End User Workflow Tests should handle complete repository analysis workflow",
          "status": "pending",
          "title": "should handle complete repository analysis workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Platform-Specific Integration Tests",
            "End-to-End User Workflow Tests"
          ],
          "fullName": "Platform-Specific Integration Tests End-to-End User Workflow Tests should handle user input validation with helpful error messages",
          "status": "pending",
          "title": "should handle user input validation with helpful error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Platform-Specific Integration Tests",
            "End-to-End User Workflow Tests"
          ],
          "fullName": "Platform-Specific Integration Tests End-to-End User Workflow Tests should handle network path scenarios",
          "status": "pending",
          "title": "should handle network path scenarios",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Platform-Specific Integration Tests",
            "End-to-End User Workflow Tests"
          ],
          "fullName": "Platform-Specific Integration Tests End-to-End User Workflow Tests should integrate with logging system for debugging",
          "status": "pending",
          "title": "should integrate with logging system for debugging",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/platform-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Simple test"],
          "fullName": "Simple test should pass",
          "status": "pending",
          "title": "should pass",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/simple-test.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Simple test"],
          "fullName": "Simple test should pass",
          "status": "pending",
          "title": "should pass",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/__tests__/test-simple.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["File Importance Utilities", "IMPORTANT_FILE_PATTERNS constant"],
          "fullName": "File Importance Utilities IMPORTANT_FILE_PATTERNS constant should contain definitions for important file categories",
          "status": "pending",
          "title": "should contain definitions for important file categories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "IMPORTANT_FILE_PATTERNS constant"],
          "fullName": "File Importance Utilities IMPORTANT_FILE_PATTERNS constant should have patterns defined for each category",
          "status": "pending",
          "title": "should have patterns defined for each category",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "IMPORTANT_EXTENSIONS constant"],
          "fullName": "File Importance Utilities IMPORTANT_EXTENSIONS constant should contain definitions for important file extensions by language",
          "status": "pending",
          "title": "should contain definitions for important file extensions by language",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "IMPORTANT_EXTENSIONS constant"],
          "fullName": "File Importance Utilities IMPORTANT_EXTENSIONS constant should have extensions defined for each language category",
          "status": "pending",
          "title": "should have extensions defined for each language category",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "calculateImportanceFactors"],
          "fullName": "File Importance Utilities calculateImportanceFactors should calculate importance factors for a file",
          "status": "pending",
          "title": "should calculate importance factors for a file",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "calculateImportanceFactors"],
          "fullName": "File Importance Utilities calculateImportanceFactors should give higher name score to important configuration files",
          "status": "pending",
          "title": "should give higher name score to important configuration files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "calculateImportanceFactors"],
          "fullName": "File Importance Utilities calculateImportanceFactors should give higher name score to entry point files",
          "status": "pending",
          "title": "should give higher name score to entry point files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "calculateImportanceFactors"],
          "fullName": "File Importance Utilities calculateImportanceFactors should give higher location score to files at the root",
          "status": "pending",
          "title": "should give higher location score to files at the root",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "calculateImportanceFactors"],
          "fullName": "File Importance Utilities calculateImportanceFactors should give higher location score to files in core directories",
          "status": "pending",
          "title": "should give higher location score to files in core directories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "calculateImportanceFactors"],
          "fullName": "File Importance Utilities calculateImportanceFactors should give optimal size score to medium-sized files",
          "status": "pending",
          "title": "should give optimal size score to medium-sized files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "calculateFileImportance"],
          "fullName": "File Importance Utilities calculateFileImportance should calculate importance score between 0 and 1",
          "status": "pending",
          "title": "should calculate importance score between 0 and 1",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "calculateFileImportance"],
          "fullName": "File Importance Utilities calculateFileImportance should give higher scores to important files",
          "status": "pending",
          "title": "should give higher scores to important files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "sortFilesByImportance"],
          "fullName": "File Importance Utilities sortFilesByImportance should sort files by importance score in descending order",
          "status": "pending",
          "title": "should sort files by importance score in descending order",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "sortFilesByImportance"],
          "fullName": "File Importance Utilities sortFilesByImportance should handle empty file list",
          "status": "pending",
          "title": "should handle empty file list",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File Importance Utilities", "sortFilesByImportance"],
          "fullName": "File Importance Utilities sortFilesByImportance should handle missing file sizes",
          "status": "pending",
          "title": "should handle missing file sizes",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/__tests__/utils/fileImportance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["File System Utilities", "traverseDirectory"],
          "fullName": "File System Utilities traverseDirectory should traverse a directory and return files and directories",
          "status": "pending",
          "title": "should traverse a directory and return files and directories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "traverseDirectory"],
          "fullName": "File System Utilities traverseDirectory should respect maxDepth option",
          "status": "pending",
          "title": "should respect maxDepth option",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "traverseDirectory"],
          "fullName": "File System Utilities traverseDirectory should respect maxFiles option",
          "status": "pending",
          "title": "should respect maxFiles option",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "traverseDirectory"],
          "fullName": "File System Utilities traverseDirectory should respect ignorePatterns option",
          "status": "pending",
          "title": "should respect ignorePatterns option",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "traverseDirectory"],
          "fullName": "File System Utilities traverseDirectory should respect fileFilter option",
          "status": "pending",
          "title": "should respect fileFilter option",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "traverseDirectory"],
          "fullName": "File System Utilities traverseDirectory should throw FileSystemError for non-existent directory",
          "status": "pending",
          "title": "should throw FileSystemError for non-existent directory",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "traverseDirectory"],
          "fullName": "File System Utilities traverseDirectory should throw FileSystemError for invalid path",
          "status": "pending",
          "title": "should throw FileSystemError for invalid path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "readFileWithErrorHandling"],
          "fullName": "File System Utilities readFileWithErrorHandling should read a file successfully",
          "status": "pending",
          "title": "should read a file successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "readFileWithErrorHandling"],
          "fullName": "File System Utilities readFileWithErrorHandling should throw FileSystemError for non-existent file",
          "status": "pending",
          "title": "should throw FileSystemError for non-existent file",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "getCommonIgnorePatterns"],
          "fullName": "File System Utilities getCommonIgnorePatterns should return an array of common ignore patterns",
          "status": "pending",
          "title": "should return an array of common ignore patterns",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "readGitignore"],
          "fullName": "File System Utilities readGitignore should read and parse .gitignore file",
          "status": "pending",
          "title": "should read and parse .gitignore file",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "readGitignore"],
          "fullName": "File System Utilities readGitignore should return empty array if .gitignore does not exist",
          "status": "pending",
          "title": "should return empty array if .gitignore does not exist",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "getCombinedIgnorePatterns"],
          "fullName": "File System Utilities getCombinedIgnorePatterns should combine gitignore patterns with common and custom patterns",
          "status": "pending",
          "title": "should combine gitignore patterns with common and custom patterns",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["File System Utilities", "extractDirectoryInfo"],
          "fullName": "File System Utilities extractDirectoryInfo should extract directory information from traversal result",
          "status": "pending",
          "title": "should extract directory information from traversal result",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/__tests__/utils/fileSystem.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Language Detection Utilities", "LANGUAGES constant"],
          "fullName": "Language Detection Utilities LANGUAGES constant should contain definitions for common languages",
          "status": "pending",
          "title": "should contain definitions for common languages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "LANGUAGES constant"],
          "fullName": "Language Detection Utilities LANGUAGES constant should have extensions defined for each language",
          "status": "pending",
          "title": "should have extensions defined for each language",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectLanguageFromPath"],
          "fullName": "Language Detection Utilities detectLanguageFromPath should detect language based on file extension",
          "status": "pending",
          "title": "should detect language based on file extension",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectLanguageFromPath"],
          "fullName": "Language Detection Utilities detectLanguageFromPath should detect language based on filename",
          "status": "pending",
          "title": "should detect language based on filename",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectLanguageFromPath"],
          "fullName": "Language Detection Utilities detectLanguageFromPath should return \"Unknown\" for unrecognized files",
          "status": "pending",
          "title": "should return \"Unknown\" for unrecognized files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectLanguageFromShebang"],
          "fullName": "Language Detection Utilities detectLanguageFromShebang should detect language based on shebang",
          "status": "pending",
          "title": "should detect language based on shebang",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectLanguageFromShebang"],
          "fullName": "Language Detection Utilities detectLanguageFromShebang should return null for content without shebang",
          "status": "pending",
          "title": "should return null for content without shebang",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectLanguage"],
          "fullName": "Language Detection Utilities detectLanguage should detect language from file path and content",
          "status": "pending",
          "title": "should detect language from file path and content",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectLanguage"],
          "fullName": "Language Detection Utilities detectLanguage should use provided content if available",
          "status": "pending",
          "title": "should use provided content if available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectLanguage"],
          "fullName": "Language Detection Utilities detectLanguage should return \"Unknown\" for unrecognized files",
          "status": "pending",
          "title": "should return \"Unknown\" for unrecognized files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectFrameworks"],
          "fullName": "Language Detection Utilities detectFrameworks should detect frameworks based on file patterns",
          "status": "pending",
          "title": "should detect frameworks based on file patterns",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectFrameworks"],
          "fullName": "Language Detection Utilities detectFrameworks should detect frameworks based on dependencies",
          "status": "pending",
          "title": "should detect frameworks based on dependencies",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Language Detection Utilities", "detectFrameworks"],
          "fullName": "Language Detection Utilities detectFrameworks should return empty array for unrecognized projects",
          "status": "pending",
          "title": "should return empty array for unrecognized projects",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/__tests__/utils/languageDetection.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Windows Path Format Analysis"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Windows Path Format Analysis should analyze repository with Windows backslash path",
          "status": "pending",
          "title": "should analyze repository with Windows backslash path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Windows Path Format Analysis"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Windows Path Format Analysis should analyze repository with Windows forward slash path",
          "status": "pending",
          "title": "should analyze repository with Windows forward slash path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Windows Path Format Analysis"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Windows Path Format Analysis should handle relative paths correctly",
          "status": "pending",
          "title": "should handle relative paths correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Error Handling in Analysis Workflow"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Error Handling in Analysis Workflow should provide detailed error for non-existent path",
          "status": "pending",
          "title": "should provide detailed error for non-existent path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Error Handling in Analysis Workflow"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Error Handling in Analysis Workflow should handle file instead of directory",
          "status": "pending",
          "title": "should handle file instead of directory",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Error Handling in Analysis Workflow"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Error Handling in Analysis Workflow should handle invalid path characters",
          "status": "pending",
          "title": "should handle invalid path characters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Error Handling in Analysis Workflow"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Error Handling in Analysis Workflow should handle reserved names in path",
          "status": "pending",
          "title": "should handle reserved names in path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Error Handling in Analysis Workflow"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Error Handling in Analysis Workflow should handle very long paths",
          "status": "pending",
          "title": "should handle very long paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Batch Analysis with Mixed Path Formats"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Batch Analysis with Mixed Path Formats should handle batch analysis with mixed valid and invalid paths",
          "status": "pending",
          "title": "should handle batch analysis with mixed valid and invalid paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Batch Analysis with Mixed Path Formats"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Batch Analysis with Mixed Path Formats should normalize paths consistently in batch analysis",
          "status": "pending",
          "title": "should normalize paths consistently in batch analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Performance and Reliability"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Performance and Reliability should complete analysis within reasonable time",
          "status": "pending",
          "title": "should complete analysis within reasonable time",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Performance and Reliability"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Performance and Reliability should handle concurrent analysis requests",
          "status": "pending",
          "title": "should handle concurrent analysis requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Performance and Reliability"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Performance and Reliability should provide consistent results for same repository",
          "status": "pending",
          "title": "should provide consistent results for same repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Path Validation Integration"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Path Validation Integration should validate path before starting analysis",
          "status": "pending",
          "title": "should validate path before starting analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Complete Analysis Workflow Integration Tests",
            "Path Validation Integration"
          ],
          "fullName": "Complete Analysis Workflow Integration Tests Path Validation Integration should provide consistent error messages between validation and analysis",
          "status": "pending",
          "title": "should provide consistent error messages between validation and analysis",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "Transform failed with 1 error:\nC:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/api-fixed.test.ts:61:2: ERROR: Expected \"}\" but found \".\"",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/api-fixed.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["API Simple Integration Tests", "Health Check"],
          "fullName": "API Simple Integration Tests Health Check should return health status",
          "status": "pending",
          "title": "should return health status",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Simple Integration Tests", "API Routes"],
          "fullName": "API Simple Integration Tests API Routes should handle 404 for unknown routes",
          "status": "pending",
          "title": "should handle 404 for unknown routes",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/api.simple.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["API Integration Tests", "Health Check"],
          "fullName": "API Integration Tests Health Check should return status ok",
          "status": "pending",
          "title": "should return status ok",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Analysis"],
          "fullName": "API Integration Tests Repository Analysis should analyze a repository",
          "status": "pending",
          "title": "should analyze a repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Analysis"],
          "fullName": "API Integration Tests Repository Analysis should return validation error for missing path",
          "status": "pending",
          "title": "should return validation error for missing path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Analysis"],
          "fullName": "API Integration Tests Repository Analysis should analyze multiple repositories",
          "status": "pending",
          "title": "should analyze multiple repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Management"],
          "fullName": "API Integration Tests Repository Management should get all repositories",
          "status": "pending",
          "title": "should get all repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Management"],
          "fullName": "API Integration Tests Repository Management should get a repository by ID",
          "status": "pending",
          "title": "should get a repository by ID",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Management"],
          "fullName": "API Integration Tests Repository Management should return 404 for non-existent repository",
          "status": "pending",
          "title": "should return 404 for non-existent repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Management"],
          "fullName": "API Integration Tests Repository Management should search repositories",
          "status": "pending",
          "title": "should search repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Management"],
          "fullName": "API Integration Tests Repository Management should find similar repositories",
          "status": "pending",
          "title": "should find similar repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["API Integration Tests", "Repository Management"],
          "fullName": "API Integration Tests Repository Management should suggest combinations",
          "status": "pending",
          "title": "should suggest combinations",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/api.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Batch Analysis API"],
          "fullName": "Batch Analysis API should return 400 for invalid request",
          "status": "pending",
          "title": "should return 400 for invalid request",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Batch Analysis API"],
          "fullName": "Batch Analysis API should analyze multiple repositories",
          "status": "pending",
          "title": "should analyze multiple repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Batch Analysis API"],
          "fullName": "Batch Analysis API should handle errors during batch analysis",
          "status": "pending",
          "title": "should handle errors during batch analysis",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/batch-analyze.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should validate Windows absolute path with backslashes",
          "status": "pending",
          "title": "should validate Windows absolute path with backslashes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should validate Windows absolute path with forward slashes",
          "status": "pending",
          "title": "should validate Windows absolute path with forward slashes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should validate UNC path format",
          "status": "pending",
          "title": "should validate UNC path format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should reject invalid path with reserved names",
          "status": "pending",
          "title": "should reject invalid path with reserved names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should reject path that is too long",
          "status": "pending",
          "title": "should reject path that is too long",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should reject path with invalid characters",
          "status": "pending",
          "title": "should reject path with invalid characters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should handle timeout for slow path validation",
          "status": "pending",
          "title": "should handle timeout for slow path validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should return error for empty path",
          "status": "pending",
          "title": "should return error for empty path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Path Validation API"],
          "fullName": "Path Integration Tests Path Validation API should return validation errors for malformed request",
          "status": "pending",
          "title": "should return validation errors for malformed request",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Repository Analysis with Path Validation"],
          "fullName": "Path Integration Tests Repository Analysis with Path Validation should analyze repository with valid Windows path",
          "status": "pending",
          "title": "should analyze repository with valid Windows path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Repository Analysis with Path Validation"],
          "fullName": "Path Integration Tests Repository Analysis with Path Validation should reject repository analysis with invalid path",
          "status": "pending",
          "title": "should reject repository analysis with invalid path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Repository Analysis with Path Validation"],
          "fullName": "Path Integration Tests Repository Analysis with Path Validation should reject repository analysis with permission denied path",
          "status": "pending",
          "title": "should reject repository analysis with permission denied path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Repository Analysis with Path Validation"],
          "fullName": "Path Integration Tests Repository Analysis with Path Validation should handle batch analysis with mixed valid/invalid paths",
          "status": "pending",
          "title": "should handle batch analysis with mixed valid/invalid paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Repository Analysis with Path Validation"],
          "fullName": "Path Integration Tests Repository Analysis with Path Validation should normalize paths consistently across requests",
          "status": "pending",
          "title": "should normalize paths consistently across requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Error Message Quality"],
          "fullName": "Path Integration Tests Error Message Quality should provide helpful error messages for common path issues",
          "status": "pending",
          "title": "should provide helpful error messages for common path issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Error Message Quality"],
          "fullName": "Path Integration Tests Error Message Quality should provide platform-specific suggestions",
          "status": "pending",
          "title": "should provide platform-specific suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Performance and Reliability"],
          "fullName": "Path Integration Tests Performance and Reliability should handle concurrent path validation requests",
          "status": "pending",
          "title": "should handle concurrent path validation requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Performance and Reliability"],
          "fullName": "Path Integration Tests Performance and Reliability should handle very long paths gracefully",
          "status": "pending",
          "title": "should handle very long paths gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Path Integration Tests", "Performance and Reliability"],
          "fullName": "Path Integration Tests Performance and Reliability should validate paths with special characters correctly",
          "status": "pending",
          "title": "should validate paths with special characters correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service Unit Tests", "Path Normalization"],
          "fullName": "PathHandler Service Unit Tests Path Normalization should normalize Windows paths correctly",
          "status": "pending",
          "title": "should normalize Windows paths correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service Unit Tests", "Path Normalization"],
          "fullName": "PathHandler Service Unit Tests Path Normalization should handle UNC paths correctly",
          "status": "pending",
          "title": "should handle UNC paths correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service Unit Tests", "Path Normalization"],
          "fullName": "PathHandler Service Unit Tests Path Normalization should throw error for invalid input",
          "status": "pending",
          "title": "should throw error for invalid input",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service Unit Tests", "Path Format Validation"],
          "fullName": "PathHandler Service Unit Tests Path Format Validation should validate Windows drive letters",
          "status": "pending",
          "title": "should validate Windows drive letters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service Unit Tests", "Path Format Validation"],
          "fullName": "PathHandler Service Unit Tests Path Format Validation should detect reserved names",
          "status": "pending",
          "title": "should detect reserved names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service Unit Tests", "Path Format Validation"],
          "fullName": "PathHandler Service Unit Tests Path Format Validation should validate path length limits",
          "status": "pending",
          "title": "should validate path length limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service Unit Tests", "Timeout Handling"],
          "fullName": "PathHandler Service Unit Tests Timeout Handling should respect timeout settings",
          "status": "pending",
          "title": "should respect timeout settings",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/path-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["WebSocket Tests"],
          "fullName": "WebSocket Tests should connect and join client-specific room",
          "status": "pending",
          "title": "should connect and join client-specific room",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocket Tests"],
          "fullName": "WebSocket Tests should register for analysis updates",
          "status": "pending",
          "title": "should register for analysis updates",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocket Tests"],
          "fullName": "WebSocket Tests should receive analysis progress updates",
          "status": "pending",
          "title": "should receive analysis progress updates",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocket Tests"],
          "fullName": "WebSocket Tests should receive analysis completion notification",
          "status": "pending",
          "title": "should receive analysis completion notification",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/websocket.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Mock Infrastructure Validation"],
          "fullName": "AdvancedAnalyzer (Fixed) Mock Infrastructure Validation should have working mock functions",
          "status": "pending",
          "title": "should have working mock functions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Mock Infrastructure Validation"],
          "fullName": "AdvancedAnalyzer (Fixed) Mock Infrastructure Validation should be able to call mock functions",
          "status": "pending",
          "title": "should be able to call mock functions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Analyzer Instantiation"],
          "fullName": "AdvancedAnalyzer (Fixed) Analyzer Instantiation should create AdvancedAnalyzer instance",
          "status": "pending",
          "title": "should create AdvancedAnalyzer instance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Analyzer Instantiation"],
          "fullName": "AdvancedAnalyzer (Fixed) Analyzer Instantiation should have required methods",
          "status": "pending",
          "title": "should have required methods",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Basic Functionality Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Basic Functionality Tests should handle repository analysis data",
          "status": "pending",
          "title": "should handle repository analysis data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Basic Functionality Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Basic Functionality Tests should handle complexity analysis",
          "status": "pending",
          "title": "should handle complexity analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Basic Functionality Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Basic Functionality Tests should handle framework detection",
          "status": "pending",
          "title": "should handle framework detection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Mock Integration Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Mock Integration Tests should work with mock file operations",
          "status": "pending",
          "title": "should work with mock file operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Mock Integration Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Mock Integration Tests should work with mock file stats",
          "status": "pending",
          "title": "should work with mock file stats",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Mock Integration Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Mock Integration Tests should handle different file types",
          "status": "pending",
          "title": "should handle different file types",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Mock Integration Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Mock Integration Tests should handle error scenarios",
          "status": "pending",
          "title": "should handle error scenarios",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Analysis Workflow Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Analysis Workflow Tests should handle complexity calculation workflow",
          "status": "pending",
          "title": "should handle complexity calculation workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Analysis Workflow Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Analysis Workflow Tests should handle pattern detection workflow",
          "status": "pending",
          "title": "should handle pattern detection workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer (Fixed)", "Analysis Workflow Tests"],
          "fullName": "AdvancedAnalyzer (Fixed) Analysis Workflow Tests should handle insights generation workflow",
          "status": "pending",
          "title": "should handle insights generation workflow",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AdvancedAnalyzer", "analyzeRepository"],
          "fullName": "AdvancedAnalyzer analyzeRepository should perform comprehensive advanced analysis",
          "status": "pending",
          "title": "should perform comprehensive advanced analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "analyzeRepository"],
          "fullName": "AdvancedAnalyzer analyzeRepository should handle files with no content gracefully",
          "status": "pending",
          "title": "should handle files with no content gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "analyzeRepository"],
          "fullName": "AdvancedAnalyzer analyzeRepository should handle file read errors gracefully",
          "status": "pending",
          "title": "should handle file read errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Security Analysis"],
          "fullName": "AdvancedAnalyzer Security Analysis should detect hardcoded secrets",
          "status": "pending",
          "title": "should detect hardcoded secrets",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Security Analysis"],
          "fullName": "AdvancedAnalyzer Security Analysis should detect SQL injection vulnerabilities",
          "status": "pending",
          "title": "should detect SQL injection vulnerabilities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Security Analysis"],
          "fullName": "AdvancedAnalyzer Security Analysis should detect XSS vulnerabilities",
          "status": "pending",
          "title": "should detect XSS vulnerabilities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Security Analysis"],
          "fullName": "AdvancedAnalyzer Security Analysis should calculate security score correctly",
          "status": "pending",
          "title": "should calculate security score correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Code Quality Analysis"],
          "fullName": "AdvancedAnalyzer Code Quality Analysis should calculate cyclomatic complexity correctly",
          "status": "pending",
          "title": "should calculate cyclomatic complexity correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Code Quality Analysis"],
          "fullName": "AdvancedAnalyzer Code Quality Analysis should detect code smells",
          "status": "pending",
          "title": "should detect code smells",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Code Quality Analysis"],
          "fullName": "AdvancedAnalyzer Code Quality Analysis should detect technical debt",
          "status": "pending",
          "title": "should detect technical debt",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Code Quality Analysis"],
          "fullName": "AdvancedAnalyzer Code Quality Analysis should calculate maintainability index",
          "status": "pending",
          "title": "should calculate maintainability index",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Architectural Pattern Detection"],
          "fullName": "AdvancedAnalyzer Architectural Pattern Detection should detect MVC pattern from directory structure",
          "status": "pending",
          "title": "should detect MVC pattern from directory structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Architectural Pattern Detection"],
          "fullName": "AdvancedAnalyzer Architectural Pattern Detection should detect layered architecture",
          "status": "pending",
          "title": "should detect layered architecture",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Architectural Pattern Detection"],
          "fullName": "AdvancedAnalyzer Architectural Pattern Detection should detect component-based architecture",
          "status": "pending",
          "title": "should detect component-based architecture",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Architectural Pattern Detection"],
          "fullName": "AdvancedAnalyzer Architectural Pattern Detection should detect design patterns in code",
          "status": "pending",
          "title": "should detect design patterns in code",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Architectural Pattern Detection"],
          "fullName": "AdvancedAnalyzer Architectural Pattern Detection should calculate maintainability score",
          "status": "pending",
          "title": "should calculate maintainability score",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Architectural Pattern Detection"],
          "fullName": "AdvancedAnalyzer Architectural Pattern Detection should generate architectural recommendations",
          "status": "pending",
          "title": "should generate architectural recommendations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Integration with AnalysisEngine"],
          "fullName": "AdvancedAnalyzer Integration with AnalysisEngine should integrate with main analysis engine",
          "status": "pending",
          "title": "should integrate with main analysis engine",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Error Handling"],
          "fullName": "AdvancedAnalyzer Error Handling should handle malformed code gracefully",
          "status": "pending",
          "title": "should handle malformed code gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AdvancedAnalyzer", "Error Handling"],
          "fullName": "AdvancedAnalyzer Error Handling should handle empty repository gracefully",
          "status": "pending",
          "title": "should handle empty repository gracefully",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/advancedAnalyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Mock Infrastructure Validation"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Mock Infrastructure Validation should have working advanced mock functions",
          "status": "pending",
          "title": "should have working advanced mock functions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Mock Infrastructure Validation"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Mock Infrastructure Validation should be able to call advanced mock functions",
          "status": "pending",
          "title": "should be able to call advanced mock functions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Advanced Analysis Engine Features"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Analysis Engine Features should create AnalysisEngine instance for advanced analysis",
          "status": "pending",
          "title": "should create AnalysisEngine instance for advanced analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Advanced Analysis Engine Features"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Analysis Engine Features should handle advanced analysis options",
          "status": "pending",
          "title": "should handle advanced analysis options",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Advanced Analysis Engine Features"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Analysis Engine Features should have advanced analysis methods",
          "status": "pending",
          "title": "should have advanced analysis methods",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Advanced Repository Analysis"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Repository Analysis should handle complex repository structure",
          "status": "pending",
          "title": "should handle complex repository structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Advanced Repository Analysis"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Repository Analysis should analyze code complexity metrics",
          "status": "pending",
          "title": "should analyze code complexity metrics",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Advanced Repository Analysis"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Repository Analysis should detect architectural patterns",
          "status": "pending",
          "title": "should detect architectural patterns",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Advanced Repository Analysis"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Repository Analysis should analyze dependencies and frameworks",
          "status": "pending",
          "title": "should analyze dependencies and frameworks",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "LLM Integration Features"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) LLM Integration Features should handle LLM analysis metadata",
          "status": "pending",
          "title": "should handle LLM analysis metadata",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "LLM Integration Features"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) LLM Integration Features should provide AI-generated insights",
          "status": "pending",
          "title": "should provide AI-generated insights",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "LLM Integration Features"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) LLM Integration Features should handle different LLM providers",
          "status": "pending",
          "title": "should handle different LLM providers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine Advanced Features (Fixed)", "Advanced Code Analysis"],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Code Analysis should analyze function and class structures",
          "status": "pending",
          "title": "should analyze function and class structures",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine Advanced Features (Fixed)", "Advanced Code Analysis"],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Code Analysis should handle token counting for large files",
          "status": "pending",
          "title": "should handle token counting for large files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine Advanced Features (Fixed)", "Advanced Code Analysis"],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Advanced Code Analysis should sample text for analysis",
          "status": "pending",
          "title": "should sample text for analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Error Handling and Edge Cases"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Error Handling and Edge Cases should handle file reading errors gracefully",
          "status": "pending",
          "title": "should handle file reading errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Error Handling and Edge Cases"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Error Handling and Edge Cases should handle repository discovery failures",
          "status": "pending",
          "title": "should handle repository discovery failures",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Error Handling and Edge Cases"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Error Handling and Edge Cases should handle malformed code analysis",
          "status": "pending",
          "title": "should handle malformed code analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Error Handling and Edge Cases"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Error Handling and Edge Cases should handle empty or minimal repositories",
          "status": "pending",
          "title": "should handle empty or minimal repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Performance and Optimization"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Performance and Optimization should handle large repository analysis efficiently",
          "status": "pending",
          "title": "should handle large repository analysis efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Performance and Optimization"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Performance and Optimization should optimize analysis for different modes",
          "status": "pending",
          "title": "should optimize analysis for different modes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features (Fixed)",
            "Performance and Optimization"
          ],
          "fullName": "AnalysisEngine Advanced Features (Fixed) Performance and Optimization should handle concurrent analysis requests",
          "status": "pending",
          "title": "should handle concurrent analysis requests",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Comprehensive Mode Analysis"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Comprehensive Mode Analysis should perform advanced analysis in comprehensive mode",
          "status": "pending",
          "title": "should perform advanced analysis in comprehensive mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Comprehensive Mode Analysis"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Comprehensive Mode Analysis should not perform advanced analysis in quick mode",
          "status": "pending",
          "title": "should not perform advanced analysis in quick mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Comprehensive Mode Analysis"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Comprehensive Mode Analysis should not perform advanced analysis in standard mode",
          "status": "pending",
          "title": "should not perform advanced analysis in standard mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Security Integration"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Security Integration should add high-severity security issues to potential issues",
          "status": "pending",
          "title": "should add high-severity security issues to potential issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Security Integration"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Security Integration should add security recommendations",
          "status": "pending",
          "title": "should add security recommendations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Code Quality Integration"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Code Quality Integration should add high-severity quality issues to potential issues",
          "status": "pending",
          "title": "should add high-severity quality issues to potential issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Code Quality Integration"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Code Quality Integration should update complexity metrics",
          "status": "pending",
          "title": "should update complexity metrics",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Architectural Pattern Integration"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Architectural Pattern Integration should detect and add architectural patterns",
          "status": "pending",
          "title": "should detect and add architectural patterns",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Architectural Pattern Integration"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Architectural Pattern Integration should add architectural recommendations",
          "status": "pending",
          "title": "should add architectural recommendations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Performance and Error Handling"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Performance and Error Handling should handle file read errors gracefully",
          "status": "pending",
          "title": "should handle file read errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Performance and Error Handling"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Performance and Error Handling should handle malformed JSON in package.json",
          "status": "pending",
          "title": "should handle malformed JSON in package.json",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Performance and Error Handling"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Performance and Error Handling should maintain performance with large repositories",
          "status": "pending",
          "title": "should maintain performance with large repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Advanced Features Integration",
            "Batch Analysis with Advanced Features"
          ],
          "fullName": "AnalysisEngine Advanced Features Integration Batch Analysis with Advanced Features should perform advanced analysis on multiple repositories",
          "status": "pending",
          "title": "should perform advanced analysis on multiple repositories",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Mock Infrastructure Validation"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Mock Infrastructure Validation should have working mock functions",
          "status": "pending",
          "title": "should have working mock functions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Mock Infrastructure Validation"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Mock Infrastructure Validation should be able to call mock functions",
          "status": "pending",
          "title": "should be able to call mock functions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Batch Processing Infrastructure"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Batch Processing Infrastructure should create AnalysisEngine instance",
          "status": "pending",
          "title": "should create AnalysisEngine instance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Batch Processing Infrastructure"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Batch Processing Infrastructure should have batch processing methods",
          "status": "pending",
          "title": "should have batch processing methods",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Batch Processing Infrastructure"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Batch Processing Infrastructure should handle analysis options for batch processing",
          "status": "pending",
          "title": "should handle analysis options for batch processing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Repository Discovery Mock Tests"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Repository Discovery Mock Tests should work with mock repository discovery",
          "status": "pending",
          "title": "should work with mock repository discovery",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Repository Discovery Mock Tests"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Repository Discovery Mock Tests should handle multiple repository paths",
          "status": "pending",
          "title": "should handle multiple repository paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Repository Discovery Mock Tests"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Repository Discovery Mock Tests should handle batch analysis options conversion",
          "status": "pending",
          "title": "should handle batch analysis options conversion",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine Batch Processing (Fixed)", "Error Handling Tests"],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Error Handling Tests should handle repository discovery errors",
          "status": "pending",
          "title": "should handle repository discovery errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine Batch Processing (Fixed)", "Error Handling Tests"],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Error Handling Tests should handle file system errors",
          "status": "pending",
          "title": "should handle file system errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine Batch Processing (Fixed)", "Error Handling Tests"],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Error Handling Tests should handle code analysis errors",
          "status": "pending",
          "title": "should handle code analysis errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Batch Processing Workflow Tests"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Batch Processing Workflow Tests should handle sequential repository processing",
          "status": "pending",
          "title": "should handle sequential repository processing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Batch Processing Workflow Tests"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Batch Processing Workflow Tests should handle parallel repository processing simulation",
          "status": "pending",
          "title": "should handle parallel repository processing simulation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Batch Processing Workflow Tests"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Batch Processing Workflow Tests should handle mixed success and failure scenarios",
          "status": "pending",
          "title": "should handle mixed success and failure scenarios",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Performance and Resource Management"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Performance and Resource Management should handle large batch sizes",
          "status": "pending",
          "title": "should handle large batch sizes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Performance and Resource Management"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Performance and Resource Management should handle resource-constrained scenarios",
          "status": "pending",
          "title": "should handle resource-constrained scenarios",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AnalysisEngine Batch Processing (Fixed)",
            "Performance and Resource Management"
          ],
          "fullName": "AnalysisEngine Batch Processing (Fixed) Performance and Resource Management should handle timeout scenarios",
          "status": "pending",
          "title": "should handle timeout scenarios",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AnalysisEngine - Batch Processing"],
          "fullName": "AnalysisEngine - Batch Processing should analyze multiple repositories",
          "status": "pending",
          "title": "should analyze multiple repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine - Batch Processing"],
          "fullName": "AnalysisEngine - Batch Processing should handle errors in repository analysis",
          "status": "pending",
          "title": "should handle errors in repository analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine - Batch Processing"],
          "fullName": "AnalysisEngine - Batch Processing should generate combined insights for multiple repositories",
          "status": "pending",
          "title": "should generate combined insights for multiple repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisEngine - Batch Processing"],
          "fullName": "AnalysisEngine - Batch Processing should analyze multiple repositories with queue",
          "status": "pending",
          "title": "should analyze multiple repositories with queue",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/AnalysisEngine.batch.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Mock Infrastructure Validation"],
          "fullName": "Analysis Engine (Fixed) Mock Infrastructure Validation should have working mock functions",
          "status": "pending",
          "title": "should have working mock functions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Mock Infrastructure Validation"],
          "fullName": "Analysis Engine (Fixed) Mock Infrastructure Validation should be able to call mock functions",
          "status": "pending",
          "title": "should be able to call mock functions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Mock Infrastructure Validation"],
          "fullName": "Analysis Engine (Fixed) Mock Infrastructure Validation should be able to reset mocks",
          "status": "pending",
          "title": "should be able to reset mocks",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Engine Instantiation"],
          "fullName": "Analysis Engine (Fixed) Engine Instantiation should create AnalysisEngine instance",
          "status": "pending",
          "title": "should create AnalysisEngine instance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Engine Instantiation"],
          "fullName": "Analysis Engine (Fixed) Engine Instantiation should have required methods",
          "status": "pending",
          "title": "should have required methods",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Basic Functionality Tests"],
          "fullName": "Analysis Engine (Fixed) Basic Functionality Tests should handle basic analysis options",
          "status": "pending",
          "title": "should handle basic analysis options",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Basic Functionality Tests"],
          "fullName": "Analysis Engine (Fixed) Basic Functionality Tests should handle multiple repository paths",
          "status": "pending",
          "title": "should handle multiple repository paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Basic Functionality Tests"],
          "fullName": "Analysis Engine (Fixed) Basic Functionality Tests should handle output format validation",
          "status": "pending",
          "title": "should handle output format validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Mock Integration Tests"],
          "fullName": "Analysis Engine (Fixed) Mock Integration Tests should work with mock discovery options",
          "status": "pending",
          "title": "should work with mock discovery options",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Mock Integration Tests"],
          "fullName": "Analysis Engine (Fixed) Mock Integration Tests should work with mock repository discovery",
          "status": "pending",
          "title": "should work with mock repository discovery",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Mock Integration Tests"],
          "fullName": "Analysis Engine (Fixed) Mock Integration Tests should work with mock code structure analysis",
          "status": "pending",
          "title": "should work with mock code structure analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Mock Integration Tests"],
          "fullName": "Analysis Engine (Fixed) Mock Integration Tests should work with mock token analysis",
          "status": "pending",
          "title": "should work with mock token analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine (Fixed)", "Mock Integration Tests"],
          "fullName": "Analysis Engine (Fixed) Mock Integration Tests should work with mock file system operations",
          "status": "pending",
          "title": "should work with mock file system operations",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Analysis Engine", "analyzeRepository"],
          "fullName": "Analysis Engine analyzeRepository should analyze a repository",
          "status": "pending",
          "title": "should analyze a repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine", "analyzeMultipleRepositories"],
          "fullName": "Analysis Engine analyzeMultipleRepositories should analyze multiple repositories",
          "status": "pending",
          "title": "should analyze multiple repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine", "analyzeMultipleRepositories"],
          "fullName": "Analysis Engine analyzeMultipleRepositories should handle errors in individual repositories",
          "status": "pending",
          "title": "should handle errors in individual repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine", "generateSynopsis"],
          "fullName": "Analysis Engine generateSynopsis should generate JSON synopsis",
          "status": "pending",
          "title": "should generate JSON synopsis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine", "generateSynopsis"],
          "fullName": "Analysis Engine generateSynopsis should generate Markdown synopsis",
          "status": "pending",
          "title": "should generate Markdown synopsis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine", "generateSynopsis"],
          "fullName": "Analysis Engine generateSynopsis should generate HTML synopsis",
          "status": "pending",
          "title": "should generate HTML synopsis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Analysis Engine", "generateSynopsis"],
          "fullName": "Analysis Engine generateSynopsis should throw error for unsupported format",
          "status": "pending",
          "title": "should throw error for unsupported format",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/AnalysisEngine.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Code Structure Analyzer", "JavaScript/TypeScript detection"],
          "fullName": "Code Structure Analyzer JavaScript/TypeScript detection should detect function declarations",
          "status": "pending",
          "title": "should detect function declarations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "JavaScript/TypeScript detection"],
          "fullName": "Code Structure Analyzer JavaScript/TypeScript detection should detect class declarations",
          "status": "pending",
          "title": "should detect class declarations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "JavaScript/TypeScript detection"],
          "fullName": "Code Structure Analyzer JavaScript/TypeScript detection should count import statements",
          "status": "pending",
          "title": "should count import statements",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "Python detection"],
          "fullName": "Code Structure Analyzer Python detection should detect function declarations",
          "status": "pending",
          "title": "should detect function declarations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "Python detection"],
          "fullName": "Code Structure Analyzer Python detection should detect class declarations",
          "status": "pending",
          "title": "should detect class declarations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "Python detection"],
          "fullName": "Code Structure Analyzer Python detection should count import statements",
          "status": "pending",
          "title": "should count import statements",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "Java detection"],
          "fullName": "Code Structure Analyzer Java detection should detect method declarations",
          "status": "pending",
          "title": "should detect method declarations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "Java detection"],
          "fullName": "Code Structure Analyzer Java detection should detect class declarations",
          "status": "pending",
          "title": "should detect class declarations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "Java detection"],
          "fullName": "Code Structure Analyzer Java detection should count import statements",
          "status": "pending",
          "title": "should count import statements",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Code Structure Analyzer", "Generic detection"],
          "fullName": "Code Structure Analyzer Generic detection should detect functions and classes in unknown languages",
          "status": "pending",
          "title": "should detect functions and classes in unknown languages",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Constructor and Initialization"],
          "fullName": "IndexSystem Comprehensive Tests Constructor and Initialization should initialize empty index when no path provided",
          "status": "pending",
          "title": "should initialize empty index when no path provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Constructor and Initialization"],
          "fullName": "IndexSystem Comprehensive Tests Constructor and Initialization should initialize empty index when file does not exist",
          "status": "pending",
          "title": "should initialize empty index when file does not exist",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Constructor and Initialization"],
          "fullName": "IndexSystem Comprehensive Tests Constructor and Initialization should handle corrupted index file gracefully",
          "status": "pending",
          "title": "should handle corrupted index file gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Constructor and Initialization"],
          "fullName": "IndexSystem Comprehensive Tests Constructor and Initialization should load valid index from disk",
          "status": "pending",
          "title": "should load valid index from disk",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Repository Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Repository Management Edge Cases should handle duplicate repository additions",
          "status": "pending",
          "title": "should handle duplicate repository additions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Repository Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Repository Management Edge Cases should handle repository with empty languages/frameworks",
          "status": "pending",
          "title": "should handle repository with empty languages/frameworks",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Repository Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Repository Management Edge Cases should handle repository with special characters in name",
          "status": "pending",
          "title": "should handle repository with special characters in name",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Repository Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Repository Management Edge Cases should handle very long repository names",
          "status": "pending",
          "title": "should handle very long repository names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Repository Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Repository Management Edge Cases should handle repository removal",
          "status": "pending",
          "title": "should handle repository removal",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Repository Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Repository Management Edge Cases should throw error when removing non-existent repository",
          "status": "pending",
          "title": "should throw error when removing non-existent repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Search Functionality Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Search Functionality Edge Cases should handle empty search query",
          "status": "pending",
          "title": "should handle empty search query",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Search Functionality Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Search Functionality Edge Cases should handle search with no matches",
          "status": "pending",
          "title": "should handle search with no matches",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Search Functionality Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Search Functionality Edge Cases should handle case-insensitive search",
          "status": "pending",
          "title": "should handle case-insensitive search",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Search Functionality Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Search Functionality Edge Cases should handle special characters in search",
          "status": "pending",
          "title": "should handle special characters in search",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Search Functionality Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Search Functionality Edge Cases should handle unicode in search",
          "status": "pending",
          "title": "should handle unicode in search",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Search Functionality Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Search Functionality Edge Cases should handle multiple languages in search",
          "status": "pending",
          "title": "should handle multiple languages in search",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Search Functionality Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Search Functionality Edge Cases should handle partial keyword matches",
          "status": "pending",
          "title": "should handle partial keyword matches",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Tag Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Tag Management Edge Cases should handle duplicate tag additions",
          "status": "pending",
          "title": "should handle duplicate tag additions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Tag Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Tag Management Edge Cases should handle empty tag names",
          "status": "pending",
          "title": "should handle empty tag names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Tag Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Tag Management Edge Cases should handle very long tag names",
          "status": "pending",
          "title": "should handle very long tag names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Tag Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Tag Management Edge Cases should handle special characters in tag names",
          "status": "pending",
          "title": "should handle special characters in tag names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Tag Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Tag Management Edge Cases should handle removing non-existent tag from repository",
          "status": "pending",
          "title": "should handle removing non-existent tag from repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Tag Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Tag Management Edge Cases should handle removing tag from non-existent repository",
          "status": "pending",
          "title": "should handle removing tag from non-existent repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Tag Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Tag Management Edge Cases should handle global tag with duplicate name",
          "status": "pending",
          "title": "should handle global tag with duplicate name",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Tag Management Edge Cases"],
          "fullName": "IndexSystem Comprehensive Tests Tag Management Edge Cases should handle removing non-existent global tag",
          "status": "pending",
          "title": "should handle removing non-existent global tag",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IndexSystem Comprehensive Tests",
            "Similarity and Relationship Detection"
          ],
          "fullName": "IndexSystem Comprehensive Tests Similarity and Relationship Detection should handle finding similar repositories for non-existent ID",
          "status": "pending",
          "title": "should handle finding similar repositories for non-existent ID",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IndexSystem Comprehensive Tests",
            "Similarity and Relationship Detection"
          ],
          "fullName": "IndexSystem Comprehensive Tests Similarity and Relationship Detection should handle finding similar repositories with empty index",
          "status": "pending",
          "title": "should handle finding similar repositories with empty index",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IndexSystem Comprehensive Tests",
            "Similarity and Relationship Detection"
          ],
          "fullName": "IndexSystem Comprehensive Tests Similarity and Relationship Detection should handle similarity with repositories having no common attributes",
          "status": "pending",
          "title": "should handle similarity with repositories having no common attributes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IndexSystem Comprehensive Tests",
            "Similarity and Relationship Detection"
          ],
          "fullName": "IndexSystem Comprehensive Tests Similarity and Relationship Detection should handle combination suggestions with non-existent IDs",
          "status": "pending",
          "title": "should handle combination suggestions with non-existent IDs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IndexSystem Comprehensive Tests",
            "Similarity and Relationship Detection"
          ],
          "fullName": "IndexSystem Comprehensive Tests Similarity and Relationship Detection should handle combination suggestions with single repository",
          "status": "pending",
          "title": "should handle combination suggestions with single repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IndexSystem Comprehensive Tests",
            "Similarity and Relationship Detection"
          ],
          "fullName": "IndexSystem Comprehensive Tests Similarity and Relationship Detection should handle combination suggestions with duplicate IDs",
          "status": "pending",
          "title": "should handle combination suggestions with duplicate IDs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Persistence and File Operations"],
          "fullName": "IndexSystem Comprehensive Tests Persistence and File Operations should handle file system errors during save",
          "status": "pending",
          "title": "should handle file system errors during save",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Persistence and File Operations"],
          "fullName": "IndexSystem Comprehensive Tests Persistence and File Operations should handle invalid JSON in loaded index",
          "status": "pending",
          "title": "should handle invalid JSON in loaded index",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Persistence and File Operations"],
          "fullName": "IndexSystem Comprehensive Tests Persistence and File Operations should handle missing fields in loaded index",
          "status": "pending",
          "title": "should handle missing fields in loaded index",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Persistence and File Operations"],
          "fullName": "IndexSystem Comprehensive Tests Persistence and File Operations should handle concurrent save operations",
          "status": "pending",
          "title": "should handle concurrent save operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Performance and Large Datasets"],
          "fullName": "IndexSystem Comprehensive Tests Performance and Large Datasets should handle large number of repositories",
          "status": "pending",
          "title": "should handle large number of repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Performance and Large Datasets"],
          "fullName": "IndexSystem Comprehensive Tests Performance and Large Datasets should handle large number of tags",
          "status": "pending",
          "title": "should handle large number of tags",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Performance and Large Datasets"],
          "fullName": "IndexSystem Comprehensive Tests Performance and Large Datasets should handle search with large result sets",
          "status": "pending",
          "title": "should handle search with large result sets",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Data Validation and Sanitization"],
          "fullName": "IndexSystem Comprehensive Tests Data Validation and Sanitization should handle null/undefined values in repository data",
          "status": "pending",
          "title": "should handle null/undefined values in repository data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Data Validation and Sanitization"],
          "fullName": "IndexSystem Comprehensive Tests Data Validation and Sanitization should handle malformed repository data",
          "status": "pending",
          "title": "should handle malformed repository data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Data Validation and Sanitization"],
          "fullName": "IndexSystem Comprehensive Tests Data Validation and Sanitization should handle XSS attempts in repository data",
          "status": "pending",
          "title": "should handle XSS attempts in repository data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Index Statistics and Metadata"],
          "fullName": "IndexSystem Comprehensive Tests Index Statistics and Metadata should provide accurate repository count",
          "status": "pending",
          "title": "should provide accurate repository count",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Index Statistics and Metadata"],
          "fullName": "IndexSystem Comprehensive Tests Index Statistics and Metadata should provide accurate tag count",
          "status": "pending",
          "title": "should provide accurate tag count",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Comprehensive Tests", "Index Statistics and Metadata"],
          "fullName": "IndexSystem Comprehensive Tests Index Statistics and Metadata should update lastUpdated on modifications",
          "status": "pending",
          "title": "should update lastUpdated on modifications",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "calculateSimilarity"],
          "fullName": "IndexSystem Relationship Functionality calculateSimilarity should calculate high similarity for repositories with shared languages and frameworks",
          "status": "pending",
          "title": "should calculate high similarity for repositories with shared languages and frameworks",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "calculateSimilarity"],
          "fullName": "IndexSystem Relationship Functionality calculateSimilarity should identify fork relationships for similar names and high similarity",
          "status": "pending",
          "title": "should identify fork relationships for similar names and high similarity",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "calculateSimilarity"],
          "fullName": "IndexSystem Relationship Functionality calculateSimilarity should identify dependency relationships for library-application pairs",
          "status": "pending",
          "title": "should identify dependency relationships for library-application pairs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "calculateSimilarity"],
          "fullName": "IndexSystem Relationship Functionality calculateSimilarity should calculate low similarity for unrelated repositories",
          "status": "pending",
          "title": "should calculate low similarity for unrelated repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "suggestCombinations"],
          "fullName": "IndexSystem Relationship Functionality suggestCombinations should suggest full-stack combinations",
          "status": "pending",
          "title": "should suggest full-stack combinations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "suggestCombinations"],
          "fullName": "IndexSystem Relationship Functionality suggestCombinations should suggest microservices combinations",
          "status": "pending",
          "title": "should suggest microservices combinations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "suggestCombinations"],
          "fullName": "IndexSystem Relationship Functionality suggestCombinations should suggest library ecosystem combinations",
          "status": "pending",
          "title": "should suggest library ecosystem combinations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "suggestCombinations"],
          "fullName": "IndexSystem Relationship Functionality suggestCombinations should sort suggestions by compatibility score",
          "status": "pending",
          "title": "should sort suggestions by compatibility score",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "suggestCombinations"],
          "fullName": "IndexSystem Relationship Functionality suggestCombinations should limit suggestions to top 10",
          "status": "pending",
          "title": "should limit suggestions to top 10",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "repository type detection"],
          "fullName": "IndexSystem Relationship Functionality repository type detection should correctly identify frontend repositories",
          "status": "pending",
          "title": "should correctly identify frontend repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "repository type detection"],
          "fullName": "IndexSystem Relationship Functionality repository type detection should correctly identify backend repositories",
          "status": "pending",
          "title": "should correctly identify backend repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "repository type detection"],
          "fullName": "IndexSystem Relationship Functionality repository type detection should correctly identify mobile repositories",
          "status": "pending",
          "title": "should correctly identify mobile repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem Relationship Functionality", "repository type detection"],
          "fullName": "IndexSystem Relationship Functionality repository type detection should correctly identify library repositories",
          "status": "pending",
          "title": "should correctly identify library repositories",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["IndexSystem", "addRepository"],
          "fullName": "IndexSystem addRepository should add a repository to the index",
          "status": "pending",
          "title": "should add a repository to the index",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "addRepository"],
          "fullName": "IndexSystem addRepository should update existing repository if path matches",
          "status": "pending",
          "title": "should update existing repository if path matches",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "updateRepository"],
          "fullName": "IndexSystem updateRepository should update an existing repository",
          "status": "pending",
          "title": "should update an existing repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "updateRepository"],
          "fullName": "IndexSystem updateRepository should throw error if repository not found",
          "status": "pending",
          "title": "should throw error if repository not found",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "searchRepositories"],
          "fullName": "IndexSystem searchRepositories should search repositories by language",
          "status": "pending",
          "title": "should search repositories by language",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "searchRepositories"],
          "fullName": "IndexSystem searchRepositories should search repositories by framework",
          "status": "pending",
          "title": "should search repositories by framework",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "searchRepositories"],
          "fullName": "IndexSystem searchRepositories should search repositories by keyword",
          "status": "pending",
          "title": "should search repositories by keyword",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "searchRepositories"],
          "fullName": "IndexSystem searchRepositories should combine multiple search criteria",
          "status": "pending",
          "title": "should combine multiple search criteria",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "findSimilarRepositories"],
          "fullName": "IndexSystem findSimilarRepositories should find similar repositories",
          "status": "pending",
          "title": "should find similar repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "findSimilarRepositories"],
          "fullName": "IndexSystem findSimilarRepositories should throw error if repository not found",
          "status": "pending",
          "title": "should throw error if repository not found",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "suggestCombinations"],
          "fullName": "IndexSystem suggestCombinations should suggest combinations of repositories",
          "status": "pending",
          "title": "should suggest combinations of repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "suggestCombinations"],
          "fullName": "IndexSystem suggestCombinations should throw error if repository not found",
          "status": "pending",
          "title": "should throw error if repository not found",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "tag management"],
          "fullName": "IndexSystem tag management should add a tag to a repository",
          "status": "pending",
          "title": "should add a tag to a repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "tag management"],
          "fullName": "IndexSystem tag management should remove a tag from a repository",
          "status": "pending",
          "title": "should remove a tag from a repository",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "tag management"],
          "fullName": "IndexSystem tag management should add a global tag",
          "status": "pending",
          "title": "should add a global tag",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "tag management"],
          "fullName": "IndexSystem tag management should remove a global tag and from all repositories",
          "status": "pending",
          "title": "should remove a global tag and from all repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IndexSystem", "persistence"],
          "fullName": "IndexSystem persistence should save and load index from disk",
          "status": "pending",
          "title": "should save and load index from disk",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/IndexSystem.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Token Analyzer", "countTokens"],
          "fullName": "Token Analyzer countTokens should count tokens in simple text",
          "status": "pending",
          "title": "should count tokens in simple text",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "countTokens"],
          "fullName": "Token Analyzer countTokens should handle empty text",
          "status": "pending",
          "title": "should handle empty text",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "countTokens"],
          "fullName": "Token Analyzer countTokens should handle text with punctuation",
          "status": "pending",
          "title": "should handle text with punctuation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "countTokens"],
          "fullName": "Token Analyzer countTokens should handle text with multiple spaces",
          "status": "pending",
          "title": "should handle text with multiple spaces",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "sampleText"],
          "fullName": "Token Analyzer sampleText should return original text if within token limit",
          "status": "pending",
          "title": "should return original text if within token limit",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "sampleText"],
          "fullName": "Token Analyzer sampleText should handle empty text",
          "status": "pending",
          "title": "should handle empty text",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "sampleText"],
          "fullName": "Token Analyzer sampleText should sample from start",
          "status": "pending",
          "title": "should sample from start",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "sampleText"],
          "fullName": "Token Analyzer sampleText should sample from end",
          "status": "pending",
          "title": "should sample from end",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "sampleText"],
          "fullName": "Token Analyzer sampleText should sample from middle",
          "status": "pending",
          "title": "should sample from middle",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Token Analyzer", "sampleText"],
          "fullName": "Token Analyzer sampleText should perform smart sampling",
          "status": "pending",
          "title": "should perform smart sampling",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/core/__tests__/tokenAnalyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ClaudeProvider", "constructor"],
          "fullName": "ClaudeProvider constructor should throw error if API key is not provided",
          "status": "pending",
          "title": "should throw error if API key is not provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ClaudeProvider", "constructor"],
          "fullName": "ClaudeProvider constructor should initialize with default model if not provided",
          "status": "pending",
          "title": "should initialize with default model if not provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ClaudeProvider", "constructor"],
          "fullName": "ClaudeProvider constructor should use provided model if specified",
          "status": "pending",
          "title": "should use provided model if specified",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ClaudeProvider", "name"],
          "fullName": "ClaudeProvider name should return correct provider name",
          "status": "pending",
          "title": "should return correct provider name",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ClaudeProvider", "formatPrompt"],
          "fullName": "ClaudeProvider formatPrompt should format prompt with project information",
          "status": "pending",
          "title": "should format prompt with project information",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ClaudeProvider", "formatPrompt"],
          "fullName": "ClaudeProvider formatPrompt should handle optional fields",
          "status": "pending",
          "title": "should handle optional fields",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ClaudeProvider", "analyze"],
          "fullName": "ClaudeProvider analyze should call Claude API and return formatted response",
          "status": "pending",
          "title": "should call Claude API and return formatted response",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ClaudeProvider", "analyze"],
          "fullName": "ClaudeProvider analyze should handle API errors",
          "status": "pending",
          "title": "should handle API errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ClaudeProvider", "analyze"],
          "fullName": "ClaudeProvider analyze should handle non-Axios errors",
          "status": "pending",
          "title": "should handle non-Axios errors",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/providers/__tests__/ClaudeProvider.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["GeminiProvider", "constructor"],
          "fullName": "GeminiProvider constructor should throw error if API key is not provided",
          "status": "pending",
          "title": "should throw error if API key is not provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "constructor"],
          "fullName": "GeminiProvider constructor should initialize with default model if not provided",
          "status": "pending",
          "title": "should initialize with default model if not provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "constructor"],
          "fullName": "GeminiProvider constructor should use provided model if specified",
          "status": "pending",
          "title": "should use provided model if specified",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "name"],
          "fullName": "GeminiProvider name should return correct provider name",
          "status": "pending",
          "title": "should return correct provider name",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "formatPrompt"],
          "fullName": "GeminiProvider formatPrompt should format prompt with project information",
          "status": "pending",
          "title": "should format prompt with project information",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "formatPrompt"],
          "fullName": "GeminiProvider formatPrompt should handle optional fields",
          "status": "pending",
          "title": "should handle optional fields",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "analyze"],
          "fullName": "GeminiProvider analyze should call Gemini API and return formatted response",
          "status": "pending",
          "title": "should call Gemini API and return formatted response",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "analyze"],
          "fullName": "GeminiProvider analyze should handle content filtering",
          "status": "pending",
          "title": "should handle content filtering",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "analyze"],
          "fullName": "GeminiProvider analyze should handle empty candidates",
          "status": "pending",
          "title": "should handle empty candidates",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "analyze"],
          "fullName": "GeminiProvider analyze should handle API errors",
          "status": "pending",
          "title": "should handle API errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["GeminiProvider", "analyze"],
          "fullName": "GeminiProvider analyze should handle non-Axios errors",
          "status": "pending",
          "title": "should handle non-Axios errors",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/providers/__tests__/GeminiProvider.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["LLMProvider", "constructor"],
          "fullName": "LLMProvider constructor should initialize with provided config",
          "status": "pending",
          "title": "should initialize with provided config",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LLMProvider", "constructor"],
          "fullName": "LLMProvider constructor should throw error if config is not provided",
          "status": "pending",
          "title": "should throw error if config is not provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LLMProvider", "validateAndNormalizeConfig"],
          "fullName": "LLMProvider validateAndNormalizeConfig should apply default values for missing config properties",
          "status": "pending",
          "title": "should apply default values for missing config properties",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LLMProvider", "validateAndNormalizeConfig"],
          "fullName": "LLMProvider validateAndNormalizeConfig should preserve provided values",
          "status": "pending",
          "title": "should preserve provided values",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LLMProvider", "abstract methods"],
          "fullName": "LLMProvider abstract methods concrete implementation should provide name property",
          "status": "pending",
          "title": "concrete implementation should provide name property",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LLMProvider", "abstract methods"],
          "fullName": "LLMProvider abstract methods concrete implementation should implement formatPrompt",
          "status": "pending",
          "title": "concrete implementation should implement formatPrompt",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LLMProvider", "abstract methods"],
          "fullName": "LLMProvider abstract methods concrete implementation should implement analyze",
          "status": "pending",
          "title": "concrete implementation should implement analyze",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/providers/__tests__/LLMProvider.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["MockProvider", "constructor"],
          "fullName": "MockProvider constructor should initialize with default values",
          "status": "pending",
          "title": "should initialize with default values",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "constructor"],
          "fullName": "MockProvider constructor should initialize with custom options",
          "status": "pending",
          "title": "should initialize with custom options",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "name"],
          "fullName": "MockProvider name should return correct provider name",
          "status": "pending",
          "title": "should return correct provider name",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "formatPrompt"],
          "fullName": "MockProvider formatPrompt should format prompt with project name",
          "status": "pending",
          "title": "should format prompt with project name",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "analyze"],
          "fullName": "MockProvider analyze should return mock response",
          "status": "pending",
          "title": "should return mock response",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "analyze"],
          "fullName": "MockProvider analyze should respect configured delay",
          "status": "pending",
          "title": "should respect configured delay",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "analyze"],
          "fullName": "MockProvider analyze should throw error when configured to fail",
          "status": "pending",
          "title": "should throw error when configured to fail",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "configuration methods"],
          "fullName": "MockProvider configuration methods setMockResponse should update the response",
          "status": "pending",
          "title": "setMockResponse should update the response",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "configuration methods"],
          "fullName": "MockProvider configuration methods setMockTokenUsage should update the token usage",
          "status": "pending",
          "title": "setMockTokenUsage should update the token usage",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "configuration methods"],
          "fullName": "MockProvider configuration methods setShouldFail should control failure behavior",
          "status": "pending",
          "title": "setShouldFail should control failure behavior",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MockProvider", "configuration methods"],
          "fullName": "MockProvider configuration methods setDelay should update the delay",
          "status": "pending",
          "title": "setDelay should update the delay",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/providers/__tests__/MockProvider.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "fetchModels"],
          "fullName": "OpenRouterProvider Model Selection fetchModels should fetch and sort models from OpenRouter API",
          "status": "pending",
          "title": "should fetch and sort models from OpenRouter API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "fetchModels"],
          "fullName": "OpenRouterProvider Model Selection fetchModels should handle API errors gracefully",
          "status": "pending",
          "title": "should handle API errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "fetchModels"],
          "fullName": "OpenRouterProvider Model Selection fetchModels should filter out models without id or name",
          "status": "pending",
          "title": "should filter out models without id or name",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "validateModel"],
          "fullName": "OpenRouterProvider Model Selection validateModel should validate existing model successfully",
          "status": "pending",
          "title": "should validate existing model successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "validateModel"],
          "fullName": "OpenRouterProvider Model Selection validateModel should return invalid for non-existent model",
          "status": "pending",
          "title": "should return invalid for non-existent model",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "validateModel"],
          "fullName": "OpenRouterProvider Model Selection validateModel should handle API errors during validation",
          "status": "pending",
          "title": "should handle API errors during validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "getModelRecommendations"],
          "fullName": "OpenRouterProvider Model Selection getModelRecommendations should return specific recommendations for Claude models",
          "status": "pending",
          "title": "should return specific recommendations for Claude models",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "getModelRecommendations"],
          "fullName": "OpenRouterProvider Model Selection getModelRecommendations should return specific recommendations for GPT models",
          "status": "pending",
          "title": "should return specific recommendations for GPT models",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "getModelRecommendations"],
          "fullName": "OpenRouterProvider Model Selection getModelRecommendations should return default recommendations for unknown models",
          "status": "pending",
          "title": "should return default recommendations for unknown models",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouterProvider Model Selection", "getModelRecommendations"],
          "fullName": "OpenRouterProvider Model Selection getModelRecommendations should return partial match recommendations for model families",
          "status": "pending",
          "title": "should return partial match recommendations for model families",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "OpenRouterProvider Model Selection",
            "analyze with model-specific configuration"
          ],
          "fullName": "OpenRouterProvider Model Selection analyze with model-specific configuration should use configured model in API request",
          "status": "pending",
          "title": "should use configured model in API request",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ProviderRegistry - Enhanced Status Tracking",
            "Provider Status Management"
          ],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Status Management should initialize providers with correct default status",
          "status": "pending",
          "title": "should initialize providers with correct default status",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ProviderRegistry - Enhanced Status Tracking",
            "Provider Status Management"
          ],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Status Management should update status when provider is configured",
          "status": "pending",
          "title": "should update status when provider is configured",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ProviderRegistry - Enhanced Status Tracking",
            "Provider Status Management"
          ],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Status Management should clear errors when configuration changes",
          "status": "pending",
          "title": "should clear errors when configuration changes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Health Checking"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Health Checking should perform health check for mock provider",
          "status": "pending",
          "title": "should perform health check for mock provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Health Checking"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Health Checking should fail health check for unconfigured provider",
          "status": "pending",
          "title": "should fail health check for unconfigured provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Health Checking"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Health Checking should fail health check for unregistered provider",
          "status": "pending",
          "title": "should fail health check for unregistered provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Health Checking"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Health Checking should measure response time during health check",
          "status": "pending",
          "title": "should measure response time during health check",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Testing"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Testing should test mock provider successfully",
          "status": "pending",
          "title": "should test mock provider successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Testing"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Testing should fail test for unconfigured provider",
          "status": "pending",
          "title": "should fail test for unconfigured provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Error Categorization"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Error Categorization should categorize authentication errors correctly",
          "status": "pending",
          "title": "should categorize authentication errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Error Categorization"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Error Categorization should categorize rate limit errors correctly",
          "status": "pending",
          "title": "should categorize rate limit errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Error Categorization"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Error Categorization should categorize network errors correctly",
          "status": "pending",
          "title": "should categorize network errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Recovery Mechanisms"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Recovery Mechanisms should not attempt recovery for non-recoverable errors",
          "status": "pending",
          "title": "should not attempt recovery for non-recoverable errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Recovery Mechanisms"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Recovery Mechanisms should attempt recovery for rate limit errors",
          "status": "pending",
          "title": "should attempt recovery for rate limit errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Bulk Operations"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Bulk Operations should test all providers",
          "status": "pending",
          "title": "should test all providers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Bulk Operations"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Bulk Operations should get health status for all providers",
          "status": "pending",
          "title": "should get health status for all providers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Bulk Operations"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Bulk Operations should identify providers needing attention",
          "status": "pending",
          "title": "should identify providers needing attention",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Statistics"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Statistics should provide accurate statistics",
          "status": "pending",
          "title": "should provide accurate statistics",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ProviderRegistry - Enhanced Status Tracking",
            "Error State Management"
          ],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Error State Management should clear provider errors",
          "status": "pending",
          "title": "should clear provider errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Information"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Information should include enhanced information in getAllProviderInfo",
          "status": "pending",
          "title": "should include enhanced information in getAllProviderInfo",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Information"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Information should show configured status correctly",
          "status": "pending",
          "title": "should show configured status correctly",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ProviderRegistry Model Selection", "fetchProviderModels"],
          "fullName": "ProviderRegistry Model Selection fetchProviderModels should throw error when provider not found",
          "status": "pending",
          "title": "should throw error when provider not found",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry Model Selection", "fetchProviderModels"],
          "fullName": "ProviderRegistry Model Selection fetchProviderModels should handle OpenRouter provider",
          "status": "pending",
          "title": "should handle OpenRouter provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry Model Selection", "validateProviderModel"],
          "fullName": "ProviderRegistry Model Selection validateProviderModel should throw error for invalid provider",
          "status": "pending",
          "title": "should throw error for invalid provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry Model Selection", "validateProviderModel"],
          "fullName": "ProviderRegistry Model Selection validateProviderModel should handle OpenRouter provider",
          "status": "pending",
          "title": "should handle OpenRouter provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry Model Selection", "provider configuration"],
          "fullName": "ProviderRegistry Model Selection provider configuration should set and get provider config",
          "status": "pending",
          "title": "should set and get provider config",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/providers/__tests__/ProviderRegistry.models.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ProviderRegistry - Enhanced Status Tracking",
            "Provider Status Management"
          ],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Status Management should initialize providers with correct default status",
          "status": "pending",
          "title": "should initialize providers with correct default status",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ProviderRegistry - Enhanced Status Tracking",
            "Provider Status Management"
          ],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Status Management should update status when provider is configured",
          "status": "pending",
          "title": "should update status when provider is configured",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ProviderRegistry - Enhanced Status Tracking",
            "Provider Status Management"
          ],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Status Management should clear errors when configuration changes",
          "status": "pending",
          "title": "should clear errors when configuration changes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Health Checking"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Health Checking should perform health check for mock provider",
          "status": "pending",
          "title": "should perform health check for mock provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Health Checking"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Health Checking should fail health check for unconfigured provider",
          "status": "pending",
          "title": "should fail health check for unconfigured provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Health Checking"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Health Checking should fail health check for unregistered provider",
          "status": "pending",
          "title": "should fail health check for unregistered provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Health Checking"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Health Checking should measure response time during health check",
          "status": "pending",
          "title": "should measure response time during health check",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Testing"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Testing should test mock provider successfully",
          "status": "pending",
          "title": "should test mock provider successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Testing"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Testing should fail test for unconfigured provider",
          "status": "pending",
          "title": "should fail test for unconfigured provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Testing"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Testing should update status to testing during test",
          "status": "pending",
          "title": "should update status to testing during test",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Error Categorization"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Error Categorization should categorize authentication errors correctly",
          "status": "pending",
          "title": "should categorize authentication errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Error Categorization"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Error Categorization should categorize rate limit errors correctly",
          "status": "pending",
          "title": "should categorize rate limit errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Error Categorization"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Error Categorization should categorize network errors correctly",
          "status": "pending",
          "title": "should categorize network errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Recovery Mechanisms"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Recovery Mechanisms should not attempt recovery for non-recoverable errors",
          "status": "pending",
          "title": "should not attempt recovery for non-recoverable errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Recovery Mechanisms"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Recovery Mechanisms should attempt recovery for rate limit errors",
          "status": "pending",
          "title": "should attempt recovery for rate limit errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Recovery Mechanisms"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Recovery Mechanisms should attempt recovery for network errors",
          "status": "pending",
          "title": "should attempt recovery for network errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Bulk Operations"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Bulk Operations should test all providers",
          "status": "pending",
          "title": "should test all providers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Bulk Operations"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Bulk Operations should get health status for all providers",
          "status": "pending",
          "title": "should get health status for all providers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Bulk Operations"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Bulk Operations should identify providers needing attention",
          "status": "pending",
          "title": "should identify providers needing attention",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Statistics"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Statistics should provide accurate statistics",
          "status": "pending",
          "title": "should provide accurate statistics",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ProviderRegistry - Enhanced Status Tracking",
            "Error State Management"
          ],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Error State Management should clear provider errors",
          "status": "pending",
          "title": "should clear provider errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Information"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Information should include enhanced information in getAllProviderInfo",
          "status": "pending",
          "title": "should include enhanced information in getAllProviderInfo",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProviderRegistry - Enhanced Status Tracking", "Provider Information"],
          "fullName": "ProviderRegistry - Enhanced Status Tracking Provider Information should show configured status correctly",
          "status": "pending",
          "title": "should show configured status correctly",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/providers/__tests__/ProviderRegistry.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ConfigurationService - Basic Tests", "initialization"],
          "fullName": "ConfigurationService - Basic Tests initialization should initialize successfully",
          "status": "pending",
          "title": "should initialize successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService - Basic Tests", "user preferences"],
          "fullName": "ConfigurationService - Basic Tests user preferences should get user preferences",
          "status": "pending",
          "title": "should get user preferences",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService - Basic Tests", "user preferences"],
          "fullName": "ConfigurationService - Basic Tests user preferences should validate valid preferences",
          "status": "pending",
          "title": "should validate valid preferences",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService - Basic Tests", "workspace management"],
          "fullName": "ConfigurationService - Basic Tests workspace management should create workspace configuration",
          "status": "pending",
          "title": "should create workspace configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService - Basic Tests", "export functionality"],
          "fullName": "ConfigurationService - Basic Tests export functionality should export configuration as JSON string",
          "status": "pending",
          "title": "should export configuration as JSON string",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/config.service.basic.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ConfigurationService", "basic functionality"],
          "fullName": "ConfigurationService basic functionality should initialize without errors",
          "status": "pending",
          "title": "should initialize without errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "basic functionality"],
          "fullName": "ConfigurationService basic functionality should get user preferences",
          "status": "pending",
          "title": "should get user preferences",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "basic functionality"],
          "fullName": "ConfigurationService basic functionality should validate preferences structure",
          "status": "pending",
          "title": "should validate preferences structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "basic functionality"],
          "fullName": "ConfigurationService basic functionality should create workspace configuration",
          "status": "pending",
          "title": "should create workspace configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "basic functionality"],
          "fullName": "ConfigurationService basic functionality should export configuration",
          "status": "pending",
          "title": "should export configuration",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/config.service.simple.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ConfigurationService", "initialize"],
          "fullName": "ConfigurationService initialize should create configuration directory and default files",
          "status": "pending",
          "title": "should create configuration directory and default files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "initialize"],
          "fullName": "ConfigurationService initialize should not overwrite existing files",
          "status": "pending",
          "title": "should not overwrite existing files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "getUserPreferences"],
          "fullName": "ConfigurationService getUserPreferences should return user preferences from file",
          "status": "pending",
          "title": "should return user preferences from file",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "getUserPreferences"],
          "fullName": "ConfigurationService getUserPreferences should return defaults if file read fails",
          "status": "pending",
          "title": "should return defaults if file read fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "getUserPreferences"],
          "fullName": "ConfigurationService getUserPreferences should merge with defaults for missing fields",
          "status": "pending",
          "title": "should merge with defaults for missing fields",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "saveUserPreferences"],
          "fullName": "ConfigurationService saveUserPreferences should save valid preferences",
          "status": "pending",
          "title": "should save valid preferences",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "saveUserPreferences"],
          "fullName": "ConfigurationService saveUserPreferences should create backup before saving",
          "status": "pending",
          "title": "should create backup before saving",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "saveUserPreferences"],
          "fullName": "ConfigurationService saveUserPreferences should throw error for invalid preferences",
          "status": "pending",
          "title": "should throw error for invalid preferences",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "updatePreferences"],
          "fullName": "ConfigurationService updatePreferences should update specific preference section",
          "status": "pending",
          "title": "should update specific preference section",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "validateUserPreferences"],
          "fullName": "ConfigurationService validateUserPreferences should validate correct preferences",
          "status": "pending",
          "title": "should validate correct preferences",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "validateUserPreferences"],
          "fullName": "ConfigurationService validateUserPreferences should return errors for invalid preferences",
          "status": "pending",
          "title": "should return errors for invalid preferences",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "workspace management"],
          "fullName": "ConfigurationService workspace management should save workspace configuration",
          "status": "pending",
          "title": "should save workspace configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "workspace management"],
          "fullName": "ConfigurationService workspace management should update workspace configuration",
          "status": "pending",
          "title": "should update workspace configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "workspace management"],
          "fullName": "ConfigurationService workspace management should delete workspace configuration",
          "status": "pending",
          "title": "should delete workspace configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "backup and restore"],
          "fullName": "ConfigurationService backup and restore should create configuration backup",
          "status": "pending",
          "title": "should create configuration backup",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "backup and restore"],
          "fullName": "ConfigurationService backup and restore should restore from backup",
          "status": "pending",
          "title": "should restore from backup",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "import and export"],
          "fullName": "ConfigurationService import and export should export configuration",
          "status": "pending",
          "title": "should export configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ConfigurationService", "import and export"],
          "fullName": "ConfigurationService import and export should import configuration",
          "status": "pending",
          "title": "should import configuration",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/config.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Basic Functionality"],
          "fullName": "ErrorMessageService - Fixed Basic Functionality should create error service instance",
          "status": "pending",
          "title": "should create error service instance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Basic Functionality"],
          "fullName": "ErrorMessageService - Fixed Basic Functionality should create path error messages without throwing",
          "status": "pending",
          "title": "should create path error messages without throwing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Basic Functionality"],
          "fullName": "ErrorMessageService - Fixed Basic Functionality should create network error messages",
          "status": "pending",
          "title": "should create network error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Timeout and Cancellation Messages"],
          "fullName": "ErrorMessageService - Fixed Timeout and Cancellation Messages should create timeout error messages",
          "status": "pending",
          "title": "should create timeout error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Timeout and Cancellation Messages"],
          "fullName": "ErrorMessageService - Fixed Timeout and Cancellation Messages should create operation cancelled messages",
          "status": "pending",
          "title": "should create operation cancelled messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Security Error Messages"],
          "fullName": "ErrorMessageService - Fixed Security Error Messages should create null byte error messages",
          "status": "pending",
          "title": "should create null byte error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Security Error Messages"],
          "fullName": "ErrorMessageService - Fixed Security Error Messages should create control characters error messages",
          "status": "pending",
          "title": "should create control characters error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Permission Error Messages"],
          "fullName": "ErrorMessageService - Fixed Permission Error Messages should create permission check error messages",
          "status": "pending",
          "title": "should create permission check error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Permission Error Messages"],
          "fullName": "ErrorMessageService - Fixed Permission Error Messages should create read-only file error messages",
          "status": "pending",
          "title": "should create read-only file error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Input Validation Messages"],
          "fullName": "ErrorMessageService - Fixed Input Validation Messages should create invalid input error messages",
          "status": "pending",
          "title": "should create invalid input error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService - Fixed", "Input Validation Messages"],
          "fullName": "ErrorMessageService - Fixed Input Validation Messages should create not directory error messages",
          "status": "pending",
          "title": "should create not directory error messages",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/error-message.service.fixed.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for path not found error",
          "status": "pending",
          "title": "should create user-friendly message for path not found error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for invalid format error",
          "status": "pending",
          "title": "should create user-friendly message for invalid format error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for path too long error",
          "status": "pending",
          "title": "should create user-friendly message for path too long error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for reserved name error",
          "status": "pending",
          "title": "should create user-friendly message for reserved name error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for invalid characters error",
          "status": "pending",
          "title": "should create user-friendly message for invalid characters error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for permission denied error",
          "status": "pending",
          "title": "should create user-friendly message for permission denied error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for system path access error",
          "status": "pending",
          "title": "should create user-friendly message for system path access error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for timeout error",
          "status": "pending",
          "title": "should create user-friendly message for timeout error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for cancelled operation",
          "status": "pending",
          "title": "should create user-friendly message for cancelled operation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should handle multiple errors by prioritizing the most important",
          "status": "pending",
          "title": "should handle multiple errors by prioritizing the most important",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create generic error message for unknown error codes",
          "status": "pending",
          "title": "should create generic error message for unknown error codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should handle empty errors array",
          "status": "pending",
          "title": "should handle empty errors array",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for null byte error",
          "status": "pending",
          "title": "should create user-friendly message for null byte error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for control characters error",
          "status": "pending",
          "title": "should create user-friendly message for control characters error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for invalid component ending error",
          "status": "pending",
          "title": "should create user-friendly message for invalid component ending error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for permission check error",
          "status": "pending",
          "title": "should create user-friendly message for permission check error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for Windows permission check error",
          "status": "pending",
          "title": "should create user-friendly message for Windows permission check error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for read-only file error",
          "status": "pending",
          "title": "should create user-friendly message for read-only file error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for ownership info error",
          "status": "pending",
          "title": "should create user-friendly message for ownership info error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for invalid input error",
          "status": "pending",
          "title": "should create user-friendly message for invalid input error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create user-friendly message for not directory error",
          "status": "pending",
          "title": "should create user-friendly message for not directory error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createNetworkErrorMessage"],
          "fullName": "ErrorMessageService createNetworkErrorMessage should create user-friendly message for UNC path network error",
          "status": "pending",
          "title": "should create user-friendly message for UNC path network error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createNetworkErrorMessage"],
          "fullName": "ErrorMessageService createNetworkErrorMessage should create user-friendly message for general network error",
          "status": "pending",
          "title": "should create user-friendly message for general network error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createNetworkErrorMessage"],
          "fullName": "ErrorMessageService createNetworkErrorMessage should handle network error without details",
          "status": "pending",
          "title": "should handle network error without details",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Platform-specific suggestions"],
          "fullName": "ErrorMessageService Platform-specific suggestions should include platform-appropriate suggestions",
          "status": "pending",
          "title": "should include platform-appropriate suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message quality"],
          "fullName": "ErrorMessageService Error message quality should provide actionable suggestions",
          "status": "pending",
          "title": "should provide actionable suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message quality"],
          "fullName": "ErrorMessageService Error message quality should provide clear and concise messages",
          "status": "pending",
          "title": "should provide clear and concise messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message quality"],
          "fullName": "ErrorMessageService Error message quality should include helpful learn more URLs when appropriate",
          "status": "pending",
          "title": "should include helpful learn more URLs when appropriate",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message quality"],
          "fullName": "ErrorMessageService Error message quality should provide detailed explanations in details field",
          "status": "pending",
          "title": "should provide detailed explanations in details field",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message quality"],
          "fullName": "ErrorMessageService Error message quality should provide Windows-specific guidance for Windows paths",
          "status": "pending",
          "title": "should provide Windows-specific guidance for Windows paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message quality"],
          "fullName": "ErrorMessageService Error message quality should include specific examples in suggestions",
          "status": "pending",
          "title": "should include specific examples in suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message quality"],
          "fullName": "ErrorMessageService Error message quality should provide step-by-step instructions for complex issues",
          "status": "pending",
          "title": "should provide step-by-step instructions for complex issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message quality"],
          "fullName": "ErrorMessageService Error message quality should handle network path errors with specific network guidance",
          "status": "pending",
          "title": "should handle network path errors with specific network guidance",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/error-message.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ExportService", "exportAnalysis"],
          "fullName": "ExportService exportAnalysis exports analysis to JSON format",
          "status": "pending",
          "title": "exports analysis to JSON format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "exportAnalysis"],
          "fullName": "ExportService exportAnalysis exports analysis to Markdown format",
          "status": "pending",
          "title": "exports analysis to Markdown format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "exportAnalysis"],
          "fullName": "ExportService exportAnalysis exports analysis to HTML format",
          "status": "pending",
          "title": "exports analysis to HTML format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "exportAnalysis"],
          "fullName": "ExportService exportAnalysis throws error for unsupported format",
          "status": "pending",
          "title": "throws error for unsupported format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "exportBatchAnalysis"],
          "fullName": "ExportService exportBatchAnalysis exports batch analysis to JSON format",
          "status": "pending",
          "title": "exports batch analysis to JSON format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "exportBatchAnalysis"],
          "fullName": "ExportService exportBatchAnalysis exports batch analysis to Markdown format",
          "status": "pending",
          "title": "exports batch analysis to Markdown format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "exportBatchAnalysis"],
          "fullName": "ExportService exportBatchAnalysis exports batch analysis to HTML format",
          "status": "pending",
          "title": "exports batch analysis to HTML format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "exportBatchAnalysis"],
          "fullName": "ExportService exportBatchAnalysis handles batch analysis without combined insights",
          "status": "pending",
          "title": "handles batch analysis without combined insights",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "exportBatchAnalysis"],
          "fullName": "ExportService exportBatchAnalysis throws error for unsupported format",
          "status": "pending",
          "title": "throws error for unsupported format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "format-specific content validation"],
          "fullName": "ExportService format-specific content validation JSON export contains all required fields",
          "status": "pending",
          "title": "JSON export contains all required fields",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "format-specific content validation"],
          "fullName": "ExportService format-specific content validation Markdown export contains proper formatting",
          "status": "pending",
          "title": "Markdown export contains proper formatting",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportService", "format-specific content validation"],
          "fullName": "ExportService format-specific content validation HTML export contains proper structure and styling",
          "status": "pending",
          "title": "HTML export contains proper structure and styling",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/export.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["LogManagementService", "Log Rotation and Cleanup"],
          "fullName": "LogManagementService Log Rotation and Cleanup should remove files older than maxAge",
          "status": "pending",
          "title": "should remove files older than maxAge",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log Rotation and Cleanup"],
          "fullName": "LogManagementService Log Rotation and Cleanup should remove excess files beyond maxFiles limit",
          "status": "pending",
          "title": "should remove excess files beyond maxFiles limit",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log Rotation and Cleanup"],
          "fullName": "LogManagementService Log Rotation and Cleanup should remove files when total size exceeds maxSize",
          "status": "pending",
          "title": "should remove files when total size exceeds maxSize",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log Rotation and Cleanup"],
          "fullName": "LogManagementService Log Rotation and Cleanup should handle cleanup errors gracefully",
          "status": "pending",
          "title": "should handle cleanup errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log Retention Policy Enforcement"],
          "fullName": "LogManagementService Log Retention Policy Enforcement should update retention policy and apply changes",
          "status": "pending",
          "title": "should update retention policy and apply changes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log Retention Policy Enforcement"],
          "fullName": "LogManagementService Log Retention Policy Enforcement should enforce retention policy during cleanup",
          "status": "pending",
          "title": "should enforce retention policy during cleanup",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log File Monitoring and Alerts"],
          "fullName": "LogManagementService Log File Monitoring and Alerts should emit alert when file size exceeds threshold",
          "status": "pending",
          "title": "should emit alert when file size exceeds threshold",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log File Monitoring and Alerts"],
          "fullName": "LogManagementService Log File Monitoring and Alerts should emit alert when disk usage exceeds threshold",
          "status": "pending",
          "title": "should emit alert when disk usage exceeds threshold",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log File Monitoring and Alerts"],
          "fullName": "LogManagementService Log File Monitoring and Alerts should emit cleanup failed alert on error",
          "status": "pending",
          "title": "should emit cleanup failed alert on error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log Directory Statistics"],
          "fullName": "LogManagementService Log Directory Statistics should calculate correct directory statistics",
          "status": "pending",
          "title": "should calculate correct directory statistics",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log Directory Statistics"],
          "fullName": "LogManagementService Log Directory Statistics should handle empty directory",
          "status": "pending",
          "title": "should handle empty directory",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Service Lifecycle"],
          "fullName": "LogManagementService Service Lifecycle should start and stop service correctly",
          "status": "pending",
          "title": "should start and stop service correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Service Lifecycle"],
          "fullName": "LogManagementService Service Lifecycle should not start service twice",
          "status": "pending",
          "title": "should not start service twice",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Service Lifecycle"],
          "fullName": "LogManagementService Service Lifecycle should handle stop when not running",
          "status": "pending",
          "title": "should handle stop when not running",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log File Identification"],
          "fullName": "LogManagementService Log File Identification should identify log files correctly",
          "status": "pending",
          "title": "should identify log files correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Log File Identification"],
          "fullName": "LogManagementService Log File Identification should sort log files by modification time",
          "status": "pending",
          "title": "should sort log files by modification time",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Size Parsing and Formatting"],
          "fullName": "LogManagementService Size Parsing and Formatting should parse size strings correctly",
          "status": "pending",
          "title": "should parse size strings correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LogManagementService", "Size Parsing and Formatting"],
          "fullName": "LogManagementService Size Parsing and Formatting should format bytes correctly",
          "status": "pending",
          "title": "should format bytes correctly",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/log-management.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "HTTP Request/Response Logging - Simplified",
            "Middleware Functionality"
          ],
          "fullName": "HTTP Request/Response Logging - Simplified Middleware Functionality should add request ID to request object",
          "status": "pending",
          "title": "should add request ID to request object",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HTTP Request/Response Logging - Simplified",
            "Middleware Functionality"
          ],
          "fullName": "HTTP Request/Response Logging - Simplified Middleware Functionality should call next middleware",
          "status": "pending",
          "title": "should call next middleware",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HTTP Request/Response Logging - Simplified",
            "Middleware Functionality"
          ],
          "fullName": "HTTP Request/Response Logging - Simplified Middleware Functionality should register finish and error event listeners",
          "status": "pending",
          "title": "should register finish and error event listeners",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HTTP Request/Response Logging - Simplified",
            "Middleware Functionality"
          ],
          "fullName": "HTTP Request/Response Logging - Simplified Middleware Functionality should handle finish event without throwing",
          "status": "pending",
          "title": "should handle finish event without throwing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HTTP Request/Response Logging - Simplified",
            "Middleware Functionality"
          ],
          "fullName": "HTTP Request/Response Logging - Simplified Middleware Functionality should handle error event without throwing",
          "status": "pending",
          "title": "should handle error event without throwing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "Request ID Generation"],
          "fullName": "HTTP Request/Response Logging - Simplified Request ID Generation should generate unique request IDs",
          "status": "pending",
          "title": "should generate unique request IDs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "Request ID Generation"],
          "fullName": "HTTP Request/Response Logging - Simplified Request ID Generation should generate UUID format request IDs",
          "status": "pending",
          "title": "should generate UUID format request IDs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "Response Handling"],
          "fullName": "HTTP Request/Response Logging - Simplified Response Handling should handle different status codes",
          "status": "pending",
          "title": "should handle different status codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "Response Handling"],
          "fullName": "HTTP Request/Response Logging - Simplified Response Handling should override res.send method",
          "status": "pending",
          "title": "should override res.send method",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "Response Handling"],
          "fullName": "HTTP Request/Response Logging - Simplified Response Handling should override res.json method",
          "status": "pending",
          "title": "should override res.json method",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "HTTP Methods"],
          "fullName": "HTTP Request/Response Logging - Simplified HTTP Methods should handle GET requests",
          "status": "pending",
          "title": "should handle GET requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "HTTP Methods"],
          "fullName": "HTTP Request/Response Logging - Simplified HTTP Methods should handle POST requests",
          "status": "pending",
          "title": "should handle POST requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "HTTP Methods"],
          "fullName": "HTTP Request/Response Logging - Simplified HTTP Methods should handle PUT requests",
          "status": "pending",
          "title": "should handle PUT requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "HTTP Methods"],
          "fullName": "HTTP Request/Response Logging - Simplified HTTP Methods should handle DELETE requests",
          "status": "pending",
          "title": "should handle DELETE requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging - Simplified", "HTTP Methods"],
          "fullName": "HTTP Request/Response Logging - Simplified HTTP Methods should handle PATCH requests",
          "status": "pending",
          "title": "should handle PATCH requests",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/logger-http-simple.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Request Logging"],
          "fullName": "HTTP Request/Response Logging Request Logging should log incoming HTTP requests with correlation ID",
          "status": "pending",
          "title": "should log incoming HTTP requests with correlation ID",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Request Logging"],
          "fullName": "HTTP Request/Response Logging Request Logging should sanitize sensitive data in request headers",
          "status": "pending",
          "title": "should sanitize sensitive data in request headers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Request Logging"],
          "fullName": "HTTP Request/Response Logging Request Logging should sanitize sensitive data in query parameters",
          "status": "pending",
          "title": "should sanitize sensitive data in query parameters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Request Logging"],
          "fullName": "HTTP Request/Response Logging Request Logging should sanitize sensitive data in request body",
          "status": "pending",
          "title": "should sanitize sensitive data in request body",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Response Logging"],
          "fullName": "HTTP Request/Response Logging Response Logging should log successful responses as info",
          "status": "pending",
          "title": "should log successful responses as info",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Response Logging"],
          "fullName": "HTTP Request/Response Logging Response Logging should log client error responses as warnings",
          "status": "pending",
          "title": "should log client error responses as warnings",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Response Logging"],
          "fullName": "HTTP Request/Response Logging Response Logging should log server error responses as errors",
          "status": "pending",
          "title": "should log server error responses as errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Error Handling"],
          "fullName": "HTTP Request/Response Logging Error Handling should log response errors",
          "status": "pending",
          "title": "should log response errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Different HTTP Methods"],
          "fullName": "HTTP Request/Response Logging Different HTTP Methods should handle POST requests",
          "status": "pending",
          "title": "should handle POST requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Different HTTP Methods"],
          "fullName": "HTTP Request/Response Logging Different HTTP Methods should handle PUT requests",
          "status": "pending",
          "title": "should handle PUT requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["HTTP Request/Response Logging", "Different HTTP Methods"],
          "fullName": "HTTP Request/Response Logging Different HTTP Methods should handle DELETE requests",
          "status": "pending",
          "title": "should handle DELETE requests",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/logger-http.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Logger Output Destinations", "Console Output"],
          "fullName": "Logger Output Destinations Console Output should create logger with console output",
          "status": "pending",
          "title": "should create logger with console output",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Console Output"],
          "fullName": "Logger Output Destinations Console Output should create logger with non-colorized console output",
          "status": "pending",
          "title": "should create logger with non-colorized console output",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "File Output"],
          "fullName": "Logger Output Destinations File Output should create logger with file output configuration",
          "status": "pending",
          "title": "should create logger with file output configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "File Output"],
          "fullName": "Logger Output Destinations File Output should handle file rotation configuration",
          "status": "pending",
          "title": "should handle file rotation configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "External Output"],
          "fullName": "Logger Output Destinations External Output should create logger with external output configuration",
          "status": "pending",
          "title": "should create logger with external output configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Multiple Outputs"],
          "fullName": "Logger Output Destinations Multiple Outputs should create logger with multiple output destinations",
          "status": "pending",
          "title": "should create logger with multiple output destinations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Multiple Outputs"],
          "fullName": "Logger Output Destinations Multiple Outputs should log to multiple destinations",
          "status": "pending",
          "title": "should log to multiple destinations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Configuration Validation"],
          "fullName": "Logger Output Destinations Configuration Validation should handle empty outputs array",
          "status": "pending",
          "title": "should handle empty outputs array",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Configuration Validation"],
          "fullName": "Logger Output Destinations Configuration Validation should handle mixed output types",
          "status": "pending",
          "title": "should handle mixed output types",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Format Configuration"],
          "fullName": "Logger Output Destinations Format Configuration should support JSON format",
          "status": "pending",
          "title": "should support JSON format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Format Configuration"],
          "fullName": "Logger Output Destinations Format Configuration should support TEXT format",
          "status": "pending",
          "title": "should support TEXT format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Format Configuration"],
          "fullName": "Logger Output Destinations Format Configuration should log in different formats",
          "status": "pending",
          "title": "should log in different formats",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Log Level Configuration"],
          "fullName": "Logger Output Destinations Log Level Configuration should respect log level configuration",
          "status": "pending",
          "title": "should respect log level configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Output Destinations", "Log Level Configuration"],
          "fullName": "Logger Output Destinations Log Level Configuration should log at appropriate levels",
          "status": "pending",
          "title": "should log at appropriate levels",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/logger-outputs.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Logger Service", "Logger Class"],
          "fullName": "Logger Service Logger Class should create logger with default configuration",
          "status": "pending",
          "title": "should create logger with default configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Logger Class"],
          "fullName": "Logger Service Logger Class should create logger with custom configuration",
          "status": "pending",
          "title": "should create logger with custom configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Logger Class"],
          "fullName": "Logger Service Logger Class should generate unique request IDs",
          "status": "pending",
          "title": "should generate unique request IDs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Logger Class"],
          "fullName": "Logger Service Logger Class should set and get request ID",
          "status": "pending",
          "title": "should set and get request ID",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Logger Class"],
          "fullName": "Logger Service Logger Class should update configuration",
          "status": "pending",
          "title": "should update configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Logging Methods"],
          "fullName": "Logger Service Logging Methods should log debug messages with structured format",
          "status": "pending",
          "title": "should log debug messages with structured format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Logging Methods"],
          "fullName": "Logger Service Logging Methods should log info messages with metadata",
          "status": "pending",
          "title": "should log info messages with metadata",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Logging Methods"],
          "fullName": "Logger Service Logging Methods should log warning messages",
          "status": "pending",
          "title": "should log warning messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Logging Methods"],
          "fullName": "Logger Service Logging Methods should log error messages with error objects",
          "status": "pending",
          "title": "should log error messages with error objects",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Data Sanitization"],
          "fullName": "Logger Service Data Sanitization should redact sensitive data when enabled",
          "status": "pending",
          "title": "should redact sensitive data when enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "Data Sanitization"],
          "fullName": "Logger Service Data Sanitization should not redact data when disabled",
          "status": "pending",
          "title": "should not redact data when disabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger Service", "File Configuration"],
          "fullName": "Logger Service File Configuration should handle file configuration without creating files",
          "status": "pending",
          "title": "should handle file configuration without creating files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Helper Functions"],
          "fullName": "Helper Functions should export helper functions",
          "status": "pending",
          "title": "should export helper functions",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/logger.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Configuration"],
          "fullName": "PathHandler Caching Cache Configuration should initialize with default cache configuration",
          "status": "pending",
          "title": "should initialize with default cache configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Configuration"],
          "fullName": "PathHandler Caching Cache Configuration should allow custom cache configuration",
          "status": "pending",
          "title": "should allow custom cache configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Configuration"],
          "fullName": "PathHandler Caching Cache Configuration should disable caching when configured",
          "status": "pending",
          "title": "should disable caching when configured",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Operations"],
          "fullName": "PathHandler Caching Cache Operations should cache path validations for existing paths",
          "status": "pending",
          "title": "should cache path validations for existing paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Operations"],
          "fullName": "PathHandler Caching Cache Operations should not cache failed validations",
          "status": "pending",
          "title": "should not cache failed validations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Operations"],
          "fullName": "PathHandler Caching Cache Operations should generate different cache keys for different paths",
          "status": "pending",
          "title": "should generate different cache keys for different paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Operations"],
          "fullName": "PathHandler Caching Cache Operations should generate same cache key for same path with same options",
          "status": "pending",
          "title": "should generate same cache key for same path with same options",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Invalidation"],
          "fullName": "PathHandler Caching Cache Invalidation should clear all cache entries",
          "status": "pending",
          "title": "should clear all cache entries",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Invalidation"],
          "fullName": "PathHandler Caching Cache Invalidation should invalidate specific path",
          "status": "pending",
          "title": "should invalidate specific path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Invalidation"],
          "fullName": "PathHandler Caching Cache Invalidation should invalidate paths by pattern",
          "status": "pending",
          "title": "should invalidate paths by pattern",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Performance Monitoring"],
          "fullName": "PathHandler Caching Cache Performance Monitoring should track hit rate correctly",
          "status": "pending",
          "title": "should track hit rate correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Performance Monitoring"],
          "fullName": "PathHandler Caching Cache Performance Monitoring should track average validation time",
          "status": "pending",
          "title": "should track average validation time",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Performance Monitoring"],
          "fullName": "PathHandler Caching Cache Performance Monitoring should perform cache maintenance",
          "status": "pending",
          "title": "should perform cache maintenance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Warm-up"],
          "fullName": "PathHandler Caching Cache Warm-up should warm up cache with provided paths",
          "status": "pending",
          "title": "should warm up cache with provided paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Warm-up"],
          "fullName": "PathHandler Caching Cache Warm-up should handle warm-up failures gracefully",
          "status": "pending",
          "title": "should handle warm-up failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Warm-up"],
          "fullName": "PathHandler Caching Cache Warm-up should skip warm-up when caching is disabled",
          "status": "pending",
          "title": "should skip warm-up when caching is disabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Memory Management"],
          "fullName": "PathHandler Caching Cache Memory Management should estimate memory usage",
          "status": "pending",
          "title": "should estimate memory usage",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Caching", "Cache Memory Management"],
          "fullName": "PathHandler Caching Cache Memory Management should respect maximum cache size",
          "status": "pending",
          "title": "should respect maximum cache size",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/path-handler-cache.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PathHandler Performance", "Single Path Validation Performance"],
          "fullName": "PathHandler Performance Single Path Validation Performance should validate paths within acceptable time limits",
          "status": "pending",
          "title": "should validate paths within acceptable time limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Single Path Validation Performance"],
          "fullName": "PathHandler Performance Single Path Validation Performance should show performance improvement with caching",
          "status": "pending",
          "title": "should show performance improvement with caching",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Single Path Validation Performance"],
          "fullName": "PathHandler Performance Single Path Validation Performance should handle timeout scenarios gracefully",
          "status": "pending",
          "title": "should handle timeout scenarios gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Concurrent Path Validation Performance"],
          "fullName": "PathHandler Performance Concurrent Path Validation Performance should handle concurrent validations efficiently",
          "status": "pending",
          "title": "should handle concurrent validations efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Concurrent Path Validation Performance"],
          "fullName": "PathHandler Performance Concurrent Path Validation Performance should maintain performance under load",
          "status": "pending",
          "title": "should maintain performance under load",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Cache Performance"],
          "fullName": "PathHandler Performance Cache Performance should demonstrate cache performance benefits",
          "status": "pending",
          "title": "should demonstrate cache performance benefits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Cache Performance"],
          "fullName": "PathHandler Performance Cache Performance should handle cache invalidation performance",
          "status": "pending",
          "title": "should handle cache invalidation performance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Memory Usage Performance"],
          "fullName": "PathHandler Performance Memory Usage Performance should not leak memory during repeated validations",
          "status": "pending",
          "title": "should not leak memory during repeated validations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Memory Usage Performance"],
          "fullName": "PathHandler Performance Memory Usage Performance should maintain reasonable cache memory usage",
          "status": "pending",
          "title": "should maintain reasonable cache memory usage",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Performance Regression Detection"],
          "fullName": "PathHandler Performance Performance Regression Detection should detect performance regressions in path validation",
          "status": "pending",
          "title": "should detect performance regressions in path validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Performance Benchmarks"],
          "fullName": "PathHandler Performance Performance Benchmarks should meet performance benchmarks for different path types",
          "status": "pending",
          "title": "should meet performance benchmarks for different path types",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Performance", "Performance Benchmarks"],
          "fullName": "PathHandler Performance Performance Benchmarks should generate performance report",
          "status": "pending",
          "title": "should generate performance report",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/path-handler-performance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PathHandler Service", "Singleton Pattern"],
          "fullName": "PathHandler Service Singleton Pattern should return the same instance",
          "status": "pending",
          "title": "should return the same instance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Normalization - Cross Platform"],
          "fullName": "PathHandler Service Path Normalization - Cross Platform should normalize forward slashes on Windows",
          "status": "pending",
          "title": "should normalize forward slashes on Windows",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Normalization - Cross Platform"],
          "fullName": "PathHandler Service Path Normalization - Cross Platform should normalize backslashes on Unix-like systems",
          "status": "pending",
          "title": "should normalize backslashes on Unix-like systems",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Normalization - Cross Platform"],
          "fullName": "PathHandler Service Path Normalization - Cross Platform should handle empty or invalid paths",
          "status": "pending",
          "title": "should handle empty or invalid paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Normalization - Cross Platform"],
          "fullName": "PathHandler Service Path Normalization - Cross Platform should normalize relative paths",
          "status": "pending",
          "title": "should normalize relative paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Windows-Specific Path Handling"],
          "fullName": "PathHandler Service Windows-Specific Path Handling should handle UNC paths",
          "status": "pending",
          "title": "should handle UNC paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Windows-Specific Path Handling"],
          "fullName": "PathHandler Service Windows-Specific Path Handling should normalize drive letters to uppercase",
          "status": "pending",
          "title": "should normalize drive letters to uppercase",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Windows-Specific Path Handling"],
          "fullName": "PathHandler Service Windows-Specific Path Handling should handle mixed path separators",
          "status": "pending",
          "title": "should handle mixed path separators",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect Windows reserved names",
          "status": "pending",
          "title": "should detect Windows reserved names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect all Windows reserved names",
          "status": "pending",
          "title": "should detect all Windows reserved names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect invalid Windows characters",
          "status": "pending",
          "title": "should detect invalid Windows characters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect all invalid Windows characters",
          "status": "pending",
          "title": "should detect all invalid Windows characters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect control characters",
          "status": "pending",
          "title": "should detect control characters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect null bytes in path",
          "status": "pending",
          "title": "should detect null bytes in path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect trailing spaces and dots",
          "status": "pending",
          "title": "should detect trailing spaces and dots",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect paths that are too long",
          "status": "pending",
          "title": "should detect paths that are too long",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should validate drive letter format",
          "status": "pending",
          "title": "should validate drive letter format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should detect invalid drive letter format",
          "status": "pending",
          "title": "should detect invalid drive letter format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should validate UNC path format",
          "status": "pending",
          "title": "should validate UNC path format",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should warn about very long paths on Unix systems",
          "status": "pending",
          "title": "should warn about very long paths on Unix systems",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should warn about long path components",
          "status": "pending",
          "title": "should warn about long path components",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Format Validation"],
          "fullName": "PathHandler Service Path Format Validation should handle mixed path separators in validation",
          "status": "pending",
          "title": "should handle mixed path separators in validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Existence and Metadata"],
          "fullName": "PathHandler Service Path Existence and Metadata should detect existing files",
          "status": "pending",
          "title": "should detect existing files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Existence and Metadata"],
          "fullName": "PathHandler Service Path Existence and Metadata should detect existing directories",
          "status": "pending",
          "title": "should detect existing directories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Path Existence and Metadata"],
          "fullName": "PathHandler Service Path Existence and Metadata should handle non-existing paths",
          "status": "pending",
          "title": "should handle non-existing paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should check read permissions",
          "status": "pending",
          "title": "should check read permissions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should check write permissions",
          "status": "pending",
          "title": "should check write permissions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should check execute permissions",
          "status": "pending",
          "title": "should check execute permissions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should check all permissions when available",
          "status": "pending",
          "title": "should check all permissions when available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should handle non-existent paths",
          "status": "pending",
          "title": "should handle non-existent paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should get file ownership on Unix-like systems",
          "status": "pending",
          "title": "should get file ownership on Unix-like systems",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should handle Windows permission checks",
          "status": "pending",
          "title": "should handle Windows permission checks",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should detect Windows system paths",
          "status": "pending",
          "title": "should detect Windows system paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should detect read-only files on Windows",
          "status": "pending",
          "title": "should detect read-only files on Windows",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should provide detailed error messages for Windows permission issues",
          "status": "pending",
          "title": "should provide detailed error messages for Windows permission issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should handle permission check errors gracefully",
          "status": "pending",
          "title": "should handle permission check errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should handle ownership information errors",
          "status": "pending",
          "title": "should handle ownership information errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Permission Checking"],
          "fullName": "PathHandler Service Permission Checking should detect hidden files on Windows",
          "status": "pending",
          "title": "should detect hidden files on Windows",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Relative Path Resolution"],
          "fullName": "PathHandler Service Relative Path Resolution should resolve relative paths with base path",
          "status": "pending",
          "title": "should resolve relative paths with base path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Relative Path Resolution"],
          "fullName": "PathHandler Service Relative Path Resolution should resolve relative paths without base path",
          "status": "pending",
          "title": "should resolve relative paths without base path",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Relative Path Resolution"],
          "fullName": "PathHandler Service Relative Path Resolution should handle path resolution errors",
          "status": "pending",
          "title": "should handle path resolution errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Error Handling"],
          "fullName": "PathHandler Service Error Handling should handle validation errors gracefully",
          "status": "pending",
          "title": "should handle validation errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Error Handling"],
          "fullName": "PathHandler Service Error Handling should provide helpful error messages",
          "status": "pending",
          "title": "should provide helpful error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should complete validation within timeout",
          "status": "pending",
          "title": "should complete validation within timeout",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should report progress during validation",
          "status": "pending",
          "title": "should report progress during validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should handle operation cancellation",
          "status": "pending",
          "title": "should handle operation cancellation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should timeout long-running operations",
          "status": "pending",
          "title": "should timeout long-running operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should support timeout in permission checking",
          "status": "pending",
          "title": "should support timeout in permission checking",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should handle permission check cancellation",
          "status": "pending",
          "title": "should handle permission check cancellation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should create abort controller",
          "status": "pending",
          "title": "should create abort controller",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should handle pre-aborted signals",
          "status": "pending",
          "title": "should handle pre-aborted signals",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Timeout and Progress Handling"],
          "fullName": "PathHandler Service Timeout and Progress Handling should provide detailed progress information",
          "status": "pending",
          "title": "should provide detailed progress information",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Cross-Platform Compatibility"],
          "fullName": "PathHandler Service Cross-Platform Compatibility should work on Linux",
          "status": "pending",
          "title": "should work on Linux",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Cross-Platform Compatibility"],
          "fullName": "PathHandler Service Cross-Platform Compatibility should work on macOS",
          "status": "pending",
          "title": "should work on macOS",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathHandler Service", "Cross-Platform Compatibility"],
          "fullName": "PathHandler Service Cross-Platform Compatibility should work on Windows",
          "status": "pending",
          "title": "should work on Windows",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/path-handler.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PerformanceMonitor", "Operation Timing"],
          "fullName": "PerformanceMonitor Operation Timing should track operation timing",
          "status": "pending",
          "title": "should track operation timing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Operation Timing"],
          "fullName": "PerformanceMonitor Operation Timing should handle failed operations",
          "status": "pending",
          "title": "should handle failed operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Operation Timing"],
          "fullName": "PerformanceMonitor Operation Timing should return null for unknown operations",
          "status": "pending",
          "title": "should return null for unknown operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Metrics Recording"],
          "fullName": "PerformanceMonitor Metrics Recording should record custom metrics",
          "status": "pending",
          "title": "should record custom metrics",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Metrics Recording"],
          "fullName": "PerformanceMonitor Metrics Recording should filter metrics by time window",
          "status": "pending",
          "title": "should filter metrics by time window",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Resource Usage"],
          "fullName": "PerformanceMonitor Resource Usage should capture current resource usage",
          "status": "pending",
          "title": "should capture current resource usage",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Resource Usage"],
          "fullName": "PerformanceMonitor Resource Usage should track resource usage history",
          "status": "pending",
          "title": "should track resource usage history",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Performance Statistics"],
          "fullName": "PerformanceMonitor Performance Statistics should calculate operation statistics",
          "status": "pending",
          "title": "should calculate operation statistics",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Performance Statistics"],
          "fullName": "PerformanceMonitor Performance Statistics should handle empty statistics",
          "status": "pending",
          "title": "should handle empty statistics",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Performance Baselines"],
          "fullName": "PerformanceMonitor Performance Baselines should create and update baselines",
          "status": "pending",
          "title": "should create and update baselines",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Performance Regression Detection"],
          "fullName": "PerformanceMonitor Performance Regression Detection should detect performance regressions",
          "status": "pending",
          "title": "should detect performance regressions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Configuration"],
          "fullName": "PerformanceMonitor Configuration should respect sample rate",
          "status": "pending",
          "title": "should respect sample rate",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Configuration"],
          "fullName": "PerformanceMonitor Configuration should disable monitoring when configured",
          "status": "pending",
          "title": "should disable monitoring when configured",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Configuration"],
          "fullName": "PerformanceMonitor Configuration should update configuration",
          "status": "pending",
          "title": "should update configuration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Performance Report"],
          "fullName": "PerformanceMonitor Performance Report should generate comprehensive performance report",
          "status": "pending",
          "title": "should generate comprehensive performance report",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Memory Management"],
          "fullName": "PerformanceMonitor Memory Management should limit metrics history",
          "status": "pending",
          "title": "should limit metrics history",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PerformanceMonitor", "Memory Management"],
          "fullName": "PerformanceMonitor Memory Management should clear all data",
          "status": "pending",
          "title": "should clear all data",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/performance-monitor.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["RelationshipService", "generateRelationshipGraph"],
          "fullName": "RelationshipService generateRelationshipGraph should generate a relationship graph with nodes, edges, and clusters",
          "status": "pending",
          "title": "should generate a relationship graph with nodes, edges, and clusters",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "generateRelationshipGraph"],
          "fullName": "RelationshipService generateRelationshipGraph should filter repositories when IDs are provided",
          "status": "pending",
          "title": "should filter repositories when IDs are provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "generateRelationshipGraph"],
          "fullName": "RelationshipService generateRelationshipGraph should apply force-directed layout positions to nodes",
          "status": "pending",
          "title": "should apply force-directed layout positions to nodes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "analyzeIntegrationOpportunities"],
          "fullName": "RelationshipService analyzeIntegrationOpportunities should identify full-stack opportunities",
          "status": "pending",
          "title": "should identify full-stack opportunities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "analyzeIntegrationOpportunities"],
          "fullName": "RelationshipService analyzeIntegrationOpportunities should identify microservices opportunities",
          "status": "pending",
          "title": "should identify microservices opportunities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "analyzeIntegrationOpportunities"],
          "fullName": "RelationshipService analyzeIntegrationOpportunities should identify library ecosystem opportunities",
          "status": "pending",
          "title": "should identify library ecosystem opportunities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "analyzeIntegrationOpportunities"],
          "fullName": "RelationshipService analyzeIntegrationOpportunities should identify mobile-backend opportunities",
          "status": "pending",
          "title": "should identify mobile-backend opportunities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "analyzeIntegrationOpportunities"],
          "fullName": "RelationshipService analyzeIntegrationOpportunities should sort opportunities by priority",
          "status": "pending",
          "title": "should sort opportunities by priority",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "generateRelationshipInsights"],
          "fullName": "RelationshipService generateRelationshipInsights should generate comprehensive relationship insights",
          "status": "pending",
          "title": "should generate comprehensive relationship insights",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "generateRelationshipInsights"],
          "fullName": "RelationshipService generateRelationshipInsights should filter insights by repository IDs when provided",
          "status": "pending",
          "title": "should filter insights by repository IDs when provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RelationshipService", "generateRelationshipInsights"],
          "fullName": "RelationshipService generateRelationshipInsights should calculate architectural patterns correctly",
          "status": "pending",
          "title": "should calculate architectural patterns correctly",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/services/__tests__/relationship.service.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["TaskQueue"],
          "fullName": "TaskQueue should process tasks sequentially with concurrency 1",
          "status": "pending",
          "title": "should process tasks sequentially with concurrency 1",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["TaskQueue"],
          "fullName": "TaskQueue should process tasks concurrently with concurrency > 1",
          "status": "pending",
          "title": "should process tasks concurrently with concurrency > 1",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["TaskQueue"],
          "fullName": "TaskQueue should handle task failures",
          "status": "pending",
          "title": "should handle task failures",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["TaskQueue"],
          "fullName": "TaskQueue should emit progress events",
          "status": "pending",
          "title": "should emit progress events",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["TaskQueue"],
          "fullName": "TaskQueue should handle task timeout",
          "status": "pending",
          "title": "should handle task timeout",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/utils/__tests__/queue.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "Transform failed with 1 error:\nC:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/controllers/__tests__/export.controller.test.ts:17:3: ERROR: Expected \"}\" but found \";\"",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/controllers/__tests__/export.controller.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["analysis requests routes"],
          "fullName": "analysis requests routes should define GET routes",
          "status": "pending",
          "title": "should define GET routes",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/routes/__tests__/analysis-requests.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["OpenRouter Model Selection Integration", "Model Fetching"],
          "fullName": "OpenRouter Model Selection Integration Model Fetching should return available models for OpenRouter",
          "status": "pending",
          "title": "should return available models for OpenRouter",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouter Model Selection Integration", "Model Fetching"],
          "fullName": "OpenRouter Model Selection Integration Model Fetching should return 400 when API key is missing",
          "status": "pending",
          "title": "should return 400 when API key is missing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouter Model Selection Integration", "Model Fetching"],
          "fullName": "OpenRouter Model Selection Integration Model Fetching should return 404 for non-existent provider",
          "status": "pending",
          "title": "should return 404 for non-existent provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouter Model Selection Integration", "Model Validation"],
          "fullName": "OpenRouter Model Selection Integration Model Validation should validate existing model successfully",
          "status": "pending",
          "title": "should validate existing model successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouter Model Selection Integration", "Model Validation"],
          "fullName": "OpenRouter Model Selection Integration Model Validation should return validation failure for invalid model",
          "status": "pending",
          "title": "should return validation failure for invalid model",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouter Model Selection Integration", "Model Recommendations"],
          "fullName": "OpenRouter Model Selection Integration Model Recommendations should return model recommendations",
          "status": "pending",
          "title": "should return model recommendations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["OpenRouter Model Selection Integration", "Provider Discovery"],
          "fullName": "OpenRouter Model Selection Integration Provider Discovery should include OpenRouter in provider list with model-selection capability",
          "status": "pending",
          "title": "should include OpenRouter in provider list with model-selection capability",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Providers API Integration - Task 1 Requirements"],
          "fullName": "Providers API Integration - Task 1 Requirements Requirement 1.1: OpenRouter should be listed as available provider",
          "status": "pending",
          "title": "Requirement 1.1: OpenRouter should be listed as available provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Providers API Integration - Task 1 Requirements"],
          "fullName": "Providers API Integration - Task 1 Requirements Requirement 1.2: System should display available models from OpenRouter",
          "status": "pending",
          "title": "Requirement 1.2: System should display available models from OpenRouter",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Providers API Integration - Task 1 Requirements"],
          "fullName": "Providers API Integration - Task 1 Requirements Requirement 7.1: Show status of all configured providers",
          "status": "pending",
          "title": "Requirement 7.1: Show status of all configured providers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Providers API Integration - Task 1 Requirements"],
          "fullName": "Providers API Integration - Task 1 Requirements Requirement 7.3: Clearly indicate provider capabilities",
          "status": "pending",
          "title": "Requirement 7.3: Clearly indicate provider capabilities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Providers API Integration - Task 1 Requirements"],
          "fullName": "Providers API Integration - Task 1 Requirements Provider status checking and availability validation",
          "status": "pending",
          "title": "Provider status checking and availability validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Providers API Integration - Task 1 Requirements"],
          "fullName": "Providers API Integration - Task 1 Requirements Provider configuration status in response",
          "status": "pending",
          "title": "Provider configuration status in response",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/routes/__tests__/providers-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Provider Models API Routes", "GET /api/providers/:name/models"],
          "fullName": "Provider Models API Routes GET /api/providers/:name/models should fetch models for valid provider with API key",
          "status": "pending",
          "title": "should fetch models for valid provider with API key",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Provider Models API Routes", "GET /api/providers/:name/models"],
          "fullName": "Provider Models API Routes GET /api/providers/:name/models should return 404 for non-existent provider",
          "status": "pending",
          "title": "should return 404 for non-existent provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Provider Models API Routes", "GET /api/providers/:name/models"],
          "fullName": "Provider Models API Routes GET /api/providers/:name/models should return 400 when API key is missing",
          "status": "pending",
          "title": "should return 400 when API key is missing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Provider Models API Routes", "GET /api/providers/:name/models"],
          "fullName": "Provider Models API Routes GET /api/providers/:name/models should handle provider errors gracefully",
          "status": "pending",
          "title": "should handle provider errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Provider Models API Routes",
            "POST /api/providers/:name/models/:modelId/validate"
          ],
          "fullName": "Provider Models API Routes POST /api/providers/:name/models/:modelId/validate should validate model successfully",
          "status": "pending",
          "title": "should validate model successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Provider Models API Routes",
            "POST /api/providers/:name/models/:modelId/validate"
          ],
          "fullName": "Provider Models API Routes POST /api/providers/:name/models/:modelId/validate should handle invalid model validation",
          "status": "pending",
          "title": "should handle invalid model validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Provider Models API Routes",
            "POST /api/providers/:name/models/:modelId/validate"
          ],
          "fullName": "Provider Models API Routes POST /api/providers/:name/models/:modelId/validate should return 404 for non-existent provider",
          "status": "pending",
          "title": "should return 404 for non-existent provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Provider Models API Routes",
            "POST /api/providers/:name/models/:modelId/validate"
          ],
          "fullName": "Provider Models API Routes POST /api/providers/:name/models/:modelId/validate should return 400 when API key is missing",
          "status": "pending",
          "title": "should return 400 when API key is missing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Provider Models API Routes",
            "GET /api/providers/:name/models/:modelId/recommendations"
          ],
          "fullName": "Provider Models API Routes GET /api/providers/:name/models/:modelId/recommendations should get model recommendations successfully",
          "status": "pending",
          "title": "should get model recommendations successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Provider Models API Routes",
            "GET /api/providers/:name/models/:modelId/recommendations"
          ],
          "fullName": "Provider Models API Routes GET /api/providers/:name/models/:modelId/recommendations should return 404 for non-existent provider",
          "status": "pending",
          "title": "should return 404 for non-existent provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Provider Models API Routes",
            "GET /api/providers/:name/models/:modelId/recommendations"
          ],
          "fullName": "Provider Models API Routes GET /api/providers/:name/models/:modelId/recommendations should handle URL-encoded model IDs",
          "status": "pending",
          "title": "should handle URL-encoded model IDs",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/routes/__tests__/providers.models.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["providers routes"],
          "fullName": "providers routes simple test to verify structure",
          "status": "pending",
          "title": "simple test to verify structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["providers routes", "GET /api/providers"],
          "fullName": "providers routes GET /api/providers should return all registered providers with their status",
          "status": "pending",
          "title": "should return all registered providers with their status",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["providers routes", "GET /api/providers"],
          "fullName": "providers routes GET /api/providers should handle errors gracefully",
          "status": "pending",
          "title": "should handle errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["providers routes", "Requirements Validation"],
          "fullName": "providers routes Requirements Validation should meet requirement 1.1 - OpenRouter listed as available provider",
          "status": "pending",
          "title": "should meet requirement 1.1 - OpenRouter listed as available provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["providers routes", "Requirements Validation"],
          "fullName": "providers routes Requirements Validation should meet requirement 7.1 - show status of all configured providers",
          "status": "pending",
          "title": "should meet requirement 7.1 - show status of all configured providers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["providers routes", "Requirements Validation"],
          "fullName": "providers routes Requirements Validation should meet requirement 7.3 - clearly indicate provider capabilities",
          "status": "pending",
          "title": "should meet requirement 7.3 - clearly indicate provider capabilities",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/routes/__tests__/providers.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Frontend Performance Tests", "Performance Service"],
          "fullName": "Frontend Performance Tests Performance Service should record metrics without significant overhead",
          "status": "pending",
          "title": "should record metrics without significant overhead",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Performance Service"],
          "fullName": "Frontend Performance Tests Performance Service should collect navigation timing correctly",
          "status": "pending",
          "title": "should collect navigation timing correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Performance Service"],
          "fullName": "Frontend Performance Tests Performance Service should track component render performance",
          "status": "pending",
          "title": "should track component render performance",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Lazy Loading Performance"],
          "fullName": "Frontend Performance Tests Lazy Loading Performance should handle large datasets efficiently",
          "status": "pending",
          "title": "should handle large datasets efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Lazy Loading Performance"],
          "fullName": "Frontend Performance Tests Lazy Loading Performance should handle virtual scrolling efficiently",
          "status": "pending",
          "title": "should handle virtual scrolling efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Performance Optimization Hooks"],
          "fullName": "Frontend Performance Tests Performance Optimization Hooks should debounce function calls effectively",
          "status": "pending",
          "title": "should debounce function calls effectively",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Performance Optimization Hooks"],
          "fullName": "Frontend Performance Tests Performance Optimization Hooks should throttle function calls effectively",
          "status": "pending",
          "title": "should throttle function calls effectively",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Performance Optimization Hooks"],
          "fullName": "Frontend Performance Tests Performance Optimization Hooks should measure render performance accurately",
          "status": "pending",
          "title": "should measure render performance accurately",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Bundle Size and Code Splitting"],
          "fullName": "Frontend Performance Tests Bundle Size and Code Splitting should load chunks efficiently",
          "status": "pending",
          "title": "should load chunks efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Bundle Size and Code Splitting"],
          "fullName": "Frontend Performance Tests Bundle Size and Code Splitting should handle multiple concurrent chunk loads",
          "status": "pending",
          "title": "should handle multiple concurrent chunk loads",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Frontend Performance Tests", "Memory Usage"],
          "fullName": "Frontend Performance Tests Memory Usage should not leak memory during repeated operations",
          "status": "pending",
          "title": "should not leak memory during repeated operations",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/test/performance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PathInput Basic Tests"],
          "fullName": "PathInput Basic Tests should render with basic props",
          "status": "pending",
          "title": "should render with basic props",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Basic Tests"],
          "fullName": "PathInput Basic Tests should show required indicator when required",
          "status": "pending",
          "title": "should show required indicator when required",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Basic Tests"],
          "fullName": "PathInput Basic Tests should display the current value",
          "status": "pending",
          "title": "should display the current value",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Basic Tests"],
          "fullName": "PathInput Basic Tests should show format help button when showFormatHints is true",
          "status": "pending",
          "title": "should show format help button when showFormatHints is true",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Basic Tests"],
          "fullName": "PathInput Basic Tests should show validate button when validateOnChange is false",
          "status": "pending",
          "title": "should show validate button when validateOnChange is false",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Basic Tests"],
          "fullName": "PathInput Basic Tests should show browse button",
          "status": "pending",
          "title": "should show browse button",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Basic Tests"],
          "fullName": "PathInput Basic Tests should have proper accessibility attributes",
          "status": "pending",
          "title": "should have proper accessibility attributes",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/__tests__/PathInput.basic.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["PathInput Integration Tests", "Real-time Validation"],
          "fullName": "PathInput Integration Tests Real-time Validation should validate path on input change with debouncing",
          "status": "pending",
          "title": "should validate path on input change with debouncing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Real-time Validation"],
          "fullName": "PathInput Integration Tests Real-time Validation should show validation errors for invalid paths",
          "status": "pending",
          "title": "should show validation errors for invalid paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Real-time Validation"],
          "fullName": "PathInput Integration Tests Real-time Validation should show loading state during validation",
          "status": "pending",
          "title": "should show loading state during validation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Real-time Validation"],
          "fullName": "PathInput Integration Tests Real-time Validation should handle validation timeout",
          "status": "pending",
          "title": "should handle validation timeout",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Format Hints"],
          "fullName": "PathInput Integration Tests Format Hints should show format hints when requested",
          "status": "pending",
          "title": "should show format hints when requested",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Format Hints"],
          "fullName": "PathInput Integration Tests Format Hints should hide format hints when toggled",
          "status": "pending",
          "title": "should hide format hints when toggled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Windows-specific Path Handling"],
          "fullName": "PathInput Integration Tests Windows-specific Path Handling should handle Windows backslash paths",
          "status": "pending",
          "title": "should handle Windows backslash paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Windows-specific Path Handling"],
          "fullName": "PathInput Integration Tests Windows-specific Path Handling should handle Windows forward slash paths",
          "status": "pending",
          "title": "should handle Windows forward slash paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Windows-specific Path Handling"],
          "fullName": "PathInput Integration Tests Windows-specific Path Handling should handle UNC paths",
          "status": "pending",
          "title": "should handle UNC paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Windows-specific Path Handling"],
          "fullName": "PathInput Integration Tests Windows-specific Path Handling should detect reserved names",
          "status": "pending",
          "title": "should detect reserved names",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "User Experience"],
          "fullName": "PathInput Integration Tests User Experience should provide visual feedback for validation states",
          "status": "pending",
          "title": "should provide visual feedback for validation states",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "User Experience"],
          "fullName": "PathInput Integration Tests User Experience should show error state for invalid paths",
          "status": "pending",
          "title": "should show error state for invalid paths",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "User Experience"],
          "fullName": "PathInput Integration Tests User Experience should disable validation when validateOnChange is false",
          "status": "pending",
          "title": "should disable validation when validateOnChange is false",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "User Experience"],
          "fullName": "PathInput Integration Tests User Experience should trigger manual validation when button is clicked",
          "status": "pending",
          "title": "should trigger manual validation when button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Accessibility"],
          "fullName": "PathInput Integration Tests Accessibility should have proper ARIA labels and descriptions",
          "status": "pending",
          "title": "should have proper ARIA labels and descriptions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["PathInput Integration Tests", "Accessibility"],
          "fullName": "PathInput Integration Tests Accessibility should be keyboard navigable",
          "status": "pending",
          "title": "should be keyboard navigable",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/__tests__/PathInput.integration.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["useAnalysisRequests"],
          "fullName": "useAnalysisRequests should fetch requests and stats on mount",
          "status": "pending",
          "title": "should fetch requests and stats on mount",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAnalysisRequests"],
          "fullName": "useAnalysisRequests should handle fetch errors",
          "status": "pending",
          "title": "should handle fetch errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAnalysisRequests"],
          "fullName": "useAnalysisRequests should refresh requests",
          "status": "pending",
          "title": "should refresh requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useAnalysisRequests"],
          "fullName": "useAnalysisRequests should fetch a specific request",
          "status": "pending",
          "title": "should fetch a specific request",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/hooks/__tests__/useAnalysisRequests.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["useProviders Model Selection", "fetchProviderModels"],
          "fullName": "useProviders Model Selection fetchProviderModels should fetch models for OpenRouter provider",
          "status": "pending",
          "title": "should fetch models for OpenRouter provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "fetchProviderModels"],
          "fullName": "useProviders Model Selection fetchProviderModels should return empty array when API call fails",
          "status": "pending",
          "title": "should return empty array when API call fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "fetchProviderModels"],
          "fullName": "useProviders Model Selection fetchProviderModels should return empty array when response is null",
          "status": "pending",
          "title": "should return empty array when response is null",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "validateProviderModel"],
          "fullName": "useProviders Model Selection validateProviderModel should validate model successfully",
          "status": "pending",
          "title": "should validate model successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "validateProviderModel"],
          "fullName": "useProviders Model Selection validateProviderModel should handle validation failure",
          "status": "pending",
          "title": "should handle validation failure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "validateProviderModel"],
          "fullName": "useProviders Model Selection validateProviderModel should handle API errors gracefully",
          "status": "pending",
          "title": "should handle API errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "validateProviderModel"],
          "fullName": "useProviders Model Selection validateProviderModel should handle null response",
          "status": "pending",
          "title": "should handle null response",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "getModelRecommendations"],
          "fullName": "useProviders Model Selection getModelRecommendations should get model recommendations successfully",
          "status": "pending",
          "title": "should get model recommendations successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "getModelRecommendations"],
          "fullName": "useProviders Model Selection getModelRecommendations should return empty object when API call fails",
          "status": "pending",
          "title": "should return empty object when API call fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "getModelRecommendations"],
          "fullName": "useProviders Model Selection getModelRecommendations should return empty object when response is null",
          "status": "pending",
          "title": "should return empty object when response is null",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "loading states"],
          "fullName": "useProviders Model Selection loading states should include model validation loading in overall loading state",
          "status": "pending",
          "title": "should include model validation loading in overall loading state",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders Model Selection", "error handling"],
          "fullName": "useProviders Model Selection error handling should aggregate errors from all API calls",
          "status": "pending",
          "title": "should aggregate errors from all API calls",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/hooks/__tests__/useProviders.models.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["useProviders"],
          "fullName": "useProviders should initialize with empty providers and no loading/error state",
          "status": "pending",
          "title": "should initialize with empty providers and no loading/error state",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders"],
          "fullName": "useProviders should fetch providers successfully",
          "status": "pending",
          "title": "should fetch providers successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders"],
          "fullName": "useProviders should handle fetch providers error",
          "status": "pending",
          "title": "should handle fetch providers error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders"],
          "fullName": "useProviders should test provider successfully",
          "status": "pending",
          "title": "should test provider successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders"],
          "fullName": "useProviders should handle test provider error",
          "status": "pending",
          "title": "should handle test provider error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders"],
          "fullName": "useProviders should fetch provider models successfully",
          "status": "pending",
          "title": "should fetch provider models successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useProviders"],
          "fullName": "useProviders should handle fetch provider models error",
          "status": "pending",
          "title": "should handle fetch provider models error",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/hooks/__tests__/useProviders.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["useRetry"],
          "fullName": "useRetry should be defined",
          "status": "pending",
          "title": "should be defined",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useRetry"],
          "fullName": "useRetry should return an object with expected properties",
          "status": "pending",
          "title": "should return an object with expected properties",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useRetry"],
          "fullName": "useRetry should handle retry options",
          "status": "pending",
          "title": "should handle retry options",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useRetry"],
          "fullName": "useRetry should handle retry state structure",
          "status": "pending",
          "title": "should handle retry state structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useRetry"],
          "fullName": "useRetry should handle sleep function",
          "status": "pending",
          "title": "should handle sleep function",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useRetry"],
          "fullName": "useRetry should handle error scenarios",
          "status": "pending",
          "title": "should handle error scenarios",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/hooks/__tests__/useRetry.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast throws error when used outside provider",
          "status": "pending",
          "title": "throws error when used outside provider",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast shows success toast",
          "status": "pending",
          "title": "shows success toast",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast shows error toast",
          "status": "pending",
          "title": "shows error toast",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast shows warning toast",
          "status": "pending",
          "title": "shows warning toast",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast shows info toast",
          "status": "pending",
          "title": "shows info toast",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast shows multiple toasts",
          "status": "pending",
          "title": "shows multiple toasts",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast auto-removes success toasts after duration",
          "status": "pending",
          "title": "auto-removes success toasts after duration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast does not auto-remove error toasts",
          "status": "pending",
          "title": "does not auto-remove error toasts",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast removes toast when close button is clicked",
          "status": "pending",
          "title": "removes toast when close button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast clears all toasts",
          "status": "pending",
          "title": "clears all toasts",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["useToast"],
          "fullName": "useToast handles toast with action",
          "status": "pending",
          "title": "handles toast with action",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/hooks/__tests__/useToast.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create error message for PATH_NOT_FOUND",
          "status": "pending",
          "title": "should create error message for PATH_NOT_FOUND",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create error message for PATH_INVALID_FORMAT",
          "status": "pending",
          "title": "should create error message for PATH_INVALID_FORMAT",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create error message for READ_PERMISSION_DENIED",
          "status": "pending",
          "title": "should create error message for READ_PERMISSION_DENIED",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should create error message for TIMEOUT_ERROR",
          "status": "pending",
          "title": "should create error message for TIMEOUT_ERROR",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should handle unknown error codes",
          "status": "pending",
          "title": "should handle unknown error codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should handle empty errors array",
          "status": "pending",
          "title": "should handle empty errors array",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should combine suggestions from multiple sources",
          "status": "pending",
          "title": "should combine suggestions from multiple sources",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should limit suggestions to avoid overwhelming user",
          "status": "pending",
          "title": "should limit suggestions to avoid overwhelming user",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createPathErrorMessage"],
          "fullName": "ErrorMessageService createPathErrorMessage should include error details when multiple errors exist",
          "status": "pending",
          "title": "should include error details when multiple errors exist",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createWarningMessage"],
          "fullName": "ErrorMessageService createWarningMessage should create warning message for PATH_LENGTH_WARNING",
          "status": "pending",
          "title": "should create warning message for PATH_LENGTH_WARNING",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createWarningMessage"],
          "fullName": "ErrorMessageService createWarningMessage should return null for empty warnings array",
          "status": "pending",
          "title": "should return null for empty warnings array",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createWarningMessage"],
          "fullName": "ErrorMessageService createWarningMessage should handle unknown warning codes",
          "status": "pending",
          "title": "should handle unknown warning codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createNetworkErrorMessage"],
          "fullName": "ErrorMessageService createNetworkErrorMessage should create UNC path error message",
          "status": "pending",
          "title": "should create UNC path error message",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createNetworkErrorMessage"],
          "fullName": "ErrorMessageService createNetworkErrorMessage should create generic network error message",
          "status": "pending",
          "title": "should create generic network error message",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "createTimeoutErrorMessage"],
          "fullName": "ErrorMessageService createTimeoutErrorMessage should create timeout error message",
          "status": "pending",
          "title": "should create timeout error message",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "getPlatformSpecificSuggestions"],
          "fullName": "ErrorMessageService getPlatformSpecificSuggestions should return Windows-specific suggestions",
          "status": "pending",
          "title": "should return Windows-specific suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "getPlatformSpecificSuggestions"],
          "fullName": "ErrorMessageService getPlatformSpecificSuggestions should return macOS-specific suggestions",
          "status": "pending",
          "title": "should return macOS-specific suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "getPlatformSpecificSuggestions"],
          "fullName": "ErrorMessageService getPlatformSpecificSuggestions should return Linux-specific suggestions",
          "status": "pending",
          "title": "should return Linux-specific suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "getPlatformSpecificErrorGuidance"],
          "fullName": "ErrorMessageService getPlatformSpecificErrorGuidance should return Windows-specific guidance for PATH_NOT_FOUND",
          "status": "pending",
          "title": "should return Windows-specific guidance for PATH_NOT_FOUND",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "getPlatformSpecificErrorGuidance"],
          "fullName": "ErrorMessageService getPlatformSpecificErrorGuidance should return macOS-specific guidance for READ_PERMISSION_DENIED",
          "status": "pending",
          "title": "should return macOS-specific guidance for READ_PERMISSION_DENIED",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "getPlatformSpecificErrorGuidance"],
          "fullName": "ErrorMessageService getPlatformSpecificErrorGuidance should return generic guidance for unknown error codes",
          "status": "pending",
          "title": "should return generic guidance for unknown error codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "getCategoryColor"],
          "fullName": "ErrorMessageService getCategoryColor should return correct colors for different categories",
          "status": "pending",
          "title": "should return correct colors for different categories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "getSeverityColor"],
          "fullName": "ErrorMessageService getSeverityColor should return correct colors for different severities",
          "status": "pending",
          "title": "should return correct colors for different severities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should provide clear and actionable error messages",
          "status": "pending",
          "title": "should provide clear and actionable error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should provide platform-appropriate suggestions",
          "status": "pending",
          "title": "should provide platform-appropriate suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should provide contextual error messages based on path type",
          "status": "pending",
          "title": "should provide contextual error messages based on path type",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should provide helpful learn more URLs for relevant errors",
          "status": "pending",
          "title": "should provide helpful learn more URLs for relevant errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should handle new permission-related error codes",
          "status": "pending",
          "title": "should handle new permission-related error codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should handle file system and access errors",
          "status": "pending",
          "title": "should handle file system and access errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should handle VERY_LONG_PATH warning",
          "status": "pending",
          "title": "should handle VERY_LONG_PATH warning",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should provide platform-specific guidance for new error codes",
          "status": "pending",
          "title": "should provide platform-specific guidance for new error codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should provide actionable suggestions for all error types",
          "status": "pending",
          "title": "should provide actionable suggestions for all error types",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorMessageService", "Error message accuracy and clarity"],
          "fullName": "ErrorMessageService Error message accuracy and clarity should provide clear error categorization",
          "status": "pending",
          "title": "should provide clear error categorization",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/services/__tests__/errorMessages.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should connect to WebSocket server",
          "status": "pending",
          "title": "should connect to WebSocket server",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should disconnect from WebSocket server",
          "status": "pending",
          "title": "should disconnect from WebSocket server",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should subscribe to analysis progress",
          "status": "pending",
          "title": "should subscribe to analysis progress",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should handle connect event",
          "status": "pending",
          "title": "should handle connect event",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should handle disconnect event",
          "status": "pending",
          "title": "should handle disconnect event",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should handle analysis progress event",
          "status": "pending",
          "title": "should handle analysis progress event",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should handle analysis complete event",
          "status": "pending",
          "title": "should handle analysis complete event",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should handle batch analysis progress event",
          "status": "pending",
          "title": "should handle batch analysis progress event",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["WebSocketService"],
          "fullName": "WebSocketService should handle batch analysis complete event",
          "status": "pending",
          "title": "should handle batch analysis complete event",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/services/__tests__/websocket.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "Failed to resolve import \"../../contexts/ToastContext\" from \"packages/frontend/src/test/accessibility/a11y.test.tsx\". Does the file exist?",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/test/accessibility/a11y.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Complete Analysis Workflow"],
          "fullName": "End-to-End Integration Tests Complete Analysis Workflow should complete full repository analysis workflow",
          "status": "pending",
          "title": "should complete full repository analysis workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Complete Analysis Workflow"],
          "fullName": "End-to-End Integration Tests Complete Analysis Workflow should handle batch analysis workflow",
          "status": "pending",
          "title": "should handle batch analysis workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Search and Discovery Workflow"],
          "fullName": "End-to-End Integration Tests Search and Discovery Workflow should complete repository search workflow",
          "status": "pending",
          "title": "should complete repository search workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Export and Sharing Workflow"],
          "fullName": "End-to-End Integration Tests Export and Sharing Workflow should complete export workflow",
          "status": "pending",
          "title": "should complete export workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Error Handling and Recovery"],
          "fullName": "End-to-End Integration Tests Error Handling and Recovery should handle API errors gracefully",
          "status": "pending",
          "title": "should handle API errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Error Handling and Recovery"],
          "fullName": "End-to-End Integration Tests Error Handling and Recovery should handle partial batch failures",
          "status": "pending",
          "title": "should handle partial batch failures",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Performance and Optimization"],
          "fullName": "End-to-End Integration Tests Performance and Optimization should handle large datasets efficiently",
          "status": "pending",
          "title": "should handle large datasets efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Performance and Optimization"],
          "fullName": "End-to-End Integration Tests Performance and Optimization should implement lazy loading for results",
          "status": "pending",
          "title": "should implement lazy loading for results",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Accessibility and User Experience"],
          "fullName": "End-to-End Integration Tests Accessibility and User Experience should be keyboard navigable",
          "status": "pending",
          "title": "should be keyboard navigable",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Accessibility and User Experience"],
          "fullName": "End-to-End Integration Tests Accessibility and User Experience should provide proper ARIA labels and roles",
          "status": "pending",
          "title": "should provide proper ARIA labels and roles",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Accessibility and User Experience"],
          "fullName": "End-to-End Integration Tests Accessibility and User Experience should handle screen reader announcements",
          "status": "pending",
          "title": "should handle screen reader announcements",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["End-to-End Integration Tests", "Configuration and Settings"],
          "fullName": "End-to-End Integration Tests Configuration and Settings should persist user preferences",
          "status": "pending",
          "title": "should persist user preferences",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/test/e2e/integration.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Performance Benchmarks", "Component Rendering Performance"],
          "fullName": "Performance Benchmarks Component Rendering Performance should render large repository lists within performance budget",
          "status": "pending",
          "title": "should render large repository lists within performance budget",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "Component Rendering Performance"],
          "fullName": "Performance Benchmarks Component Rendering Performance should handle rapid state updates efficiently",
          "status": "pending",
          "title": "should handle rapid state updates efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "Component Rendering Performance"],
          "fullName": "Performance Benchmarks Component Rendering Performance should optimize bundle size and loading",
          "status": "pending",
          "title": "should optimize bundle size and loading",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "API Performance"],
          "fullName": "Performance Benchmarks API Performance should handle concurrent API requests efficiently",
          "status": "pending",
          "title": "should handle concurrent API requests efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "API Performance"],
          "fullName": "Performance Benchmarks API Performance should implement effective caching strategy",
          "status": "pending",
          "title": "should implement effective caching strategy",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "Memory Management"],
          "fullName": "Performance Benchmarks Memory Management should not leak memory during repeated operations",
          "status": "pending",
          "title": "should not leak memory during repeated operations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "Memory Management"],
          "fullName": "Performance Benchmarks Memory Management should handle large file processing efficiently",
          "status": "pending",
          "title": "should handle large file processing efficiently",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "User Interaction Performance"],
          "fullName": "Performance Benchmarks User Interaction Performance should respond to user interactions within 16ms (60fps)",
          "status": "pending",
          "title": "should respond to user interactions within 16ms (60fps)",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "User Interaction Performance"],
          "fullName": "Performance Benchmarks User Interaction Performance should implement smooth scrolling and virtualization",
          "status": "pending",
          "title": "should implement smooth scrolling and virtualization",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "Network Performance"],
          "fullName": "Performance Benchmarks Network Performance should implement request deduplication",
          "status": "pending",
          "title": "should implement request deduplication",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Performance Benchmarks", "Network Performance"],
          "fullName": "Performance Benchmarks Network Performance should handle request timeouts gracefully",
          "status": "pending",
          "title": "should handle request timeouts gracefully",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/test/performance/benchmarks.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "Developer Workflow - Frontend Developer"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios Developer Workflow - Frontend Developer should help frontend developer analyze React project",
          "status": "failed",
          "title": "should help frontend developer analyze React project",
          "duration": 203.05609999999797,
          "failureMessages": [
            "TestingLibraryElementError: Unable to find an accessible element with the role \"button\" and name `/analyze/i`\n\nThere are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole\n\nIgnored nodes: comments, script, style\n\u001b[36m<body />\u001b[39m\n    at Object.getElementError (C:\\Users\\AlexJ\\Documents\\Coding\\Repos\\my-repos\\myRepoAnalyzer\\unified-repo-analyzer\\node_modules\\@testing-library\\dom\\dist\\config.js:37:19)\n    at C:\\Users\\AlexJ\\Documents\\Coding\\Repos\\my-repos\\myRepoAnalyzer\\unified-repo-analyzer\\node_modules\\@testing-library\\dom\\dist\\query-helpers.js:76:38\n    at C:\\Users\\AlexJ\\Documents\\Coding\\Repos\\my-repos\\myRepoAnalyzer\\unified-repo-analyzer\\node_modules\\@testing-library\\dom\\dist\\query-helpers.js:52:17\n    at C:\\Users\\AlexJ\\Documents\\Coding\\Repos\\my-repos\\myRepoAnalyzer\\unified-repo-analyzer\\node_modules\\@testing-library\\dom\\dist\\query-helpers.js:95:19\n    at C:\\Users\\AlexJ\\Documents\\Coding\\Repos\\my-repos\\myRepoAnalyzer\\unified-repo-analyzer\\packages\\frontend\\src\\test\\user-acceptance\\real-world.test.tsx:194:36\n    at file:///C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "Team Lead Workflow - Batch Analysis"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios Team Lead Workflow - Batch Analysis should help team lead analyze multiple projects",
          "status": "pending",
          "title": "should help team lead analyze multiple projects",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "Architect Workflow - Technology Discovery"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios Architect Workflow - Technology Discovery should help architect discover technology patterns",
          "status": "pending",
          "title": "should help architect discover technology patterns",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "New Developer Workflow - Learning from Codebase"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios New Developer Workflow - Learning from Codebase should help new developer understand project structure",
          "status": "pending",
          "title": "should help new developer understand project structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "DevOps Engineer Workflow - Deployment Analysis"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios DevOps Engineer Workflow - Deployment Analysis should help DevOps engineer assess deployment readiness",
          "status": "pending",
          "title": "should help DevOps engineer assess deployment readiness",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "Project Manager Workflow - Progress Tracking"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios Project Manager Workflow - Progress Tracking should help project manager track project health",
          "status": "pending",
          "title": "should help project manager track project health",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "Error Recovery and Edge Cases"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios Error Recovery and Edge Cases should handle network failures gracefully",
          "status": "pending",
          "title": "should handle network failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "Error Recovery and Edge Cases"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios Error Recovery and Edge Cases should handle large repository analysis",
          "status": "pending",
          "title": "should handle large repository analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "User Acceptance Tests - Real World Scenarios",
            "Error Recovery and Edge Cases"
          ],
          "fullName": "User Acceptance Tests - Real World Scenarios Error Recovery and Edge Cases should handle corrupted or inaccessible repositories",
          "status": "pending",
          "title": "should handle corrupted or inaccessible repositories",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497603806,
      "endTime": 1758497604009.0562,
      "status": "failed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/test/user-acceptance/real-world.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["errorHandling utils", "parseError"],
          "fullName": "errorHandling utils parseError parses Axios errors correctly",
          "status": "pending",
          "title": "parses Axios errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "parseError"],
          "fullName": "errorHandling utils parseError parses network errors correctly",
          "status": "pending",
          "title": "parses network errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "parseError"],
          "fullName": "errorHandling utils parseError parses standard errors correctly",
          "status": "pending",
          "title": "parses standard errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "parseError"],
          "fullName": "errorHandling utils parseError handles permission errors",
          "status": "pending",
          "title": "handles permission errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "parseError"],
          "fullName": "errorHandling utils parseError handles memory errors",
          "status": "pending",
          "title": "handles memory errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "parseError"],
          "fullName": "errorHandling utils parseError handles timeout errors",
          "status": "pending",
          "title": "handles timeout errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "parseError"],
          "fullName": "errorHandling utils parseError handles string errors",
          "status": "pending",
          "title": "handles string errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "parseError"],
          "fullName": "errorHandling utils parseError handles unknown errors",
          "status": "pending",
          "title": "handles unknown errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "HTTP status code handling"],
          "fullName": "errorHandling utils HTTP status code handling handles 400 Bad Request",
          "status": "pending",
          "title": "handles 400 Bad Request",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "HTTP status code handling"],
          "fullName": "errorHandling utils HTTP status code handling handles 401 Unauthorized",
          "status": "pending",
          "title": "handles 401 Unauthorized",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "HTTP status code handling"],
          "fullName": "errorHandling utils HTTP status code handling handles 403 Forbidden",
          "status": "pending",
          "title": "handles 403 Forbidden",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "HTTP status code handling"],
          "fullName": "errorHandling utils HTTP status code handling handles 408 Request Timeout",
          "status": "pending",
          "title": "handles 408 Request Timeout",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "HTTP status code handling"],
          "fullName": "errorHandling utils HTTP status code handling handles 413 Payload Too Large",
          "status": "pending",
          "title": "handles 413 Payload Too Large",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "HTTP status code handling"],
          "fullName": "errorHandling utils HTTP status code handling handles 429 Too Many Requests",
          "status": "pending",
          "title": "handles 429 Too Many Requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "HTTP status code handling"],
          "fullName": "errorHandling utils HTTP status code handling handles 500 Internal Server Error",
          "status": "pending",
          "title": "handles 500 Internal Server Error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "HTTP status code handling"],
          "fullName": "errorHandling utils HTTP status code handling handles 503 Service Unavailable",
          "status": "pending",
          "title": "handles 503 Service Unavailable",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "getRecoverySuggestions"],
          "fullName": "errorHandling utils getRecoverySuggestions includes base suggestions",
          "status": "pending",
          "title": "includes base suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "getRecoverySuggestions"],
          "fullName": "errorHandling utils getRecoverySuggestions adds network-specific suggestions",
          "status": "pending",
          "title": "adds network-specific suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "getRecoverySuggestions"],
          "fullName": "errorHandling utils getRecoverySuggestions adds timeout-specific suggestions",
          "status": "pending",
          "title": "adds timeout-specific suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "getRecoverySuggestions"],
          "fullName": "errorHandling utils getRecoverySuggestions adds server error suggestions",
          "status": "pending",
          "title": "adds server error suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "getRecoverySuggestions"],
          "fullName": "errorHandling utils getRecoverySuggestions removes duplicate suggestions",
          "status": "pending",
          "title": "removes duplicate suggestions",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "shouldShowRetryButton"],
          "fullName": "errorHandling utils shouldShowRetryButton shows retry for recoverable errors",
          "status": "pending",
          "title": "shows retry for recoverable errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "shouldShowRetryButton"],
          "fullName": "errorHandling utils shouldShowRetryButton hides retry for non-recoverable errors",
          "status": "pending",
          "title": "hides retry for non-recoverable errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "shouldShowRetryButton"],
          "fullName": "errorHandling utils shouldShowRetryButton hides retry for 401 errors",
          "status": "pending",
          "title": "hides retry for 401 errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "shouldShowRetryButton"],
          "fullName": "errorHandling utils shouldShowRetryButton hides retry for 403 errors",
          "status": "pending",
          "title": "hides retry for 403 errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "getErrorTitle"],
          "fullName": "errorHandling utils getErrorTitle returns specific titles for known error codes",
          "status": "pending",
          "title": "returns specific titles for known error codes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["errorHandling utils", "getErrorTitle"],
          "fullName": "errorHandling utils getErrorTitle returns generic title for unknown error codes",
          "status": "pending",
          "title": "returns generic title for unknown error codes",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/utils/__tests__/errorHandling.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling handles initialization errors gracefully",
          "status": "pending",
          "title": "handles initialization errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling shows validation errors with recovery option",
          "status": "pending",
          "title": "shows validation errors with recovery option",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling handles provider change errors",
          "status": "pending",
          "title": "handles provider change errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling disables controls during loading",
          "status": "pending",
          "title": "disables controls during loading",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling shows graceful degradation for unavailable providers",
          "status": "pending",
          "title": "shows graceful degradation for unavailable providers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling resets to defaults when reset button is clicked",
          "status": "pending",
          "title": "resets to defaults when reset button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling shows success toast on successful configuration changes",
          "status": "pending",
          "title": "shows success toast on successful configuration changes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling handles component errors with error boundary",
          "status": "pending",
          "title": "handles component errors with error boundary",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration Error Handling"],
          "fullName": "AnalysisConfiguration Error Handling shows warning toast for configuration issues",
          "status": "pending",
          "title": "shows warning toast for configuration issues",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AnalysisConfiguration"],
          "fullName": "AnalysisConfiguration should have access to DOM globals",
          "status": "pending",
          "title": "should have access to DOM globals",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisConfiguration"],
          "fullName": "AnalysisConfiguration renders correctly with default options",
          "status": "skipped",
          "title": "renders correctly with default options",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AnalysisRequests"],
          "fullName": "AnalysisRequests should render loading state",
          "status": "pending",
          "title": "should render loading state",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisRequests"],
          "fullName": "AnalysisRequests should render error state",
          "status": "pending",
          "title": "should render error state",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisRequests"],
          "fullName": "AnalysisRequests should render requests and stats",
          "status": "pending",
          "title": "should render requests and stats",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["AnalysisRequests"],
          "fullName": "AnalysisRequests should render empty state",
          "status": "pending",
          "title": "should render empty state",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/AnalysisRequests.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Environment Test"],
          "fullName": "Environment Test should show current environment",
          "status": "pending",
          "title": "should show current environment",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/environment.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ExecutiveSummary"],
          "fullName": "ExecutiveSummary renders repository overview",
          "status": "pending",
          "title": "renders repository overview",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExecutiveSummary"],
          "fullName": "ExecutiveSummary renders executive summary content",
          "status": "pending",
          "title": "renders executive summary content",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExecutiveSummary"],
          "fullName": "ExecutiveSummary renders recommendations",
          "status": "pending",
          "title": "renders recommendations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExecutiveSummary"],
          "fullName": "ExecutiveSummary renders potential issues",
          "status": "pending",
          "title": "renders potential issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExecutiveSummary"],
          "fullName": "ExecutiveSummary renders frameworks",
          "status": "pending",
          "title": "renders frameworks",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/ExecutiveSummary.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["MobileProgressTracker Component"],
          "fullName": "MobileProgressTracker Component renders idle state correctly",
          "status": "pending",
          "title": "renders idle state correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MobileProgressTracker Component"],
          "fullName": "MobileProgressTracker Component renders running state with progress bar",
          "status": "pending",
          "title": "renders running state with progress bar",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MobileProgressTracker Component"],
          "fullName": "MobileProgressTracker Component renders completed state correctly",
          "status": "pending",
          "title": "renders completed state correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MobileProgressTracker Component"],
          "fullName": "MobileProgressTracker Component renders failed state with error message",
          "status": "pending",
          "title": "renders failed state with error message",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MobileProgressTracker Component"],
          "fullName": "MobileProgressTracker Component shows disconnected state when websocket is not connected",
          "status": "pending",
          "title": "shows disconnected state when websocket is not connected",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MobileProgressTracker Component"],
          "fullName": "MobileProgressTracker Component subscribes to analysis updates when analysisId is provided",
          "status": "pending",
          "title": "subscribes to analysis updates when analysisId is provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MobileProgressTracker Component"],
          "fullName": "MobileProgressTracker Component calls cancelAnalysis when cancel button is clicked",
          "status": "pending",
          "title": "calls cancelAnalysis when cancel button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MobileProgressTracker Component"],
          "fullName": "MobileProgressTracker Component toggles log visibility when show/hide logs button is clicked",
          "status": "pending",
          "title": "toggles log visibility when show/hide logs button is clicked",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ProgressTracker Component"],
          "fullName": "ProgressTracker Component renders idle state correctly",
          "status": "pending",
          "title": "renders idle state correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProgressTracker Component"],
          "fullName": "ProgressTracker Component renders running state with progress bar",
          "status": "pending",
          "title": "renders running state with progress bar",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProgressTracker Component"],
          "fullName": "ProgressTracker Component renders completed state correctly",
          "status": "pending",
          "title": "renders completed state correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProgressTracker Component"],
          "fullName": "ProgressTracker Component renders failed state with error message",
          "status": "pending",
          "title": "renders failed state with error message",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProgressTracker Component"],
          "fullName": "ProgressTracker Component shows disconnected state when websocket is not connected",
          "status": "pending",
          "title": "shows disconnected state when websocket is not connected",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProgressTracker Component"],
          "fullName": "ProgressTracker Component subscribes to analysis updates when analysisId is provided",
          "status": "pending",
          "title": "subscribes to analysis updates when analysisId is provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProgressTracker Component"],
          "fullName": "ProgressTracker Component calls cancelAnalysis when cancel button is clicked",
          "status": "pending",
          "title": "calls cancelAnalysis when cancel button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ProgressTracker Component"],
          "fullName": "ProgressTracker Component displays logs when available",
          "status": "pending",
          "title": "displays logs when available",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ResultsViewer"],
          "fullName": "ResultsViewer renders without crashing",
          "status": "pending",
          "title": "renders without crashing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResultsViewer"],
          "fullName": "ResultsViewer shows executive summary by default",
          "status": "pending",
          "title": "shows executive summary by default",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResultsViewer"],
          "fullName": "ResultsViewer switches tabs when clicked",
          "status": "pending",
          "title": "switches tabs when clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ResultsViewer"],
          "fullName": "ResultsViewer displays message when no analysis is provided",
          "status": "pending",
          "title": "displays message when no analysis is provided",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/ResultsViewer.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Setup Test"],
          "fullName": "Setup Test should have JSDOM globals after setup",
          "status": "pending",
          "title": "should have JSDOM globals after setup",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/setup-test.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Simple JSDOM Test"],
          "fullName": "Simple JSDOM Test should have access to DOM globals",
          "status": "pending",
          "title": "should have access to DOM globals",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Simple JSDOM Test"],
          "fullName": "Simple JSDOM Test should be able to create DOM elements",
          "status": "pending",
          "title": "should be able to create DOM elements",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/__tests__/simple.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "[vitest] vi.mock(\"../AnalysisPreferences\", factory?: () => unknown) is not returning an object. Did you mean to return an object with a \"default\" key?",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/configuration/__tests__/ConfigurationManager.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["LLMProviderPreferences OpenRouter Model Selection"],
          "fullName": "LLMProviderPreferences OpenRouter Model Selection should render without crashing",
          "status": "pending",
          "title": "should render without crashing",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["LLMProviderPreferences OpenRouter Model Selection"],
          "fullName": "LLMProviderPreferences OpenRouter Model Selection should render some content",
          "status": "pending",
          "title": "should render some content",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/configuration/__tests__/LLMProviderPreferences.models.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should render user-friendly error message",
          "status": "pending",
          "title": "should render user-friendly error message",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should render suggestions list",
          "status": "pending",
          "title": "should render suggestions list",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should render learn more link when provided",
          "status": "pending",
          "title": "should render learn more link when provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should render original path when provided",
          "status": "pending",
          "title": "should render original path when provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should show platform-specific tips when expanded",
          "status": "pending",
          "title": "should show platform-specific tips when expanded",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should render technical details when enabled",
          "status": "pending",
          "title": "should render technical details when enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should handle retry callback",
          "status": "pending",
          "title": "should handle retry callback",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should handle dismiss callback",
          "status": "pending",
          "title": "should handle dismiss callback",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should render in compact mode",
          "status": "pending",
          "title": "should render in compact mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should not render when dismissed",
          "status": "pending",
          "title": "should not render when dismissed",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should render warning message when no errors but warnings exist",
          "status": "pending",
          "title": "should render warning message when no errors but warnings exist",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should not render when no errors, warnings, or user-friendly error",
          "status": "pending",
          "title": "should not render when no errors, warnings, or user-friendly error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should render appropriate icon for different severities",
          "status": "pending",
          "title": "should render appropriate icon for different severities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should hide suggestions when showSuggestions is false",
          "status": "pending",
          "title": "should hide suggestions when showSuggestions is false",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should hide technical details when showTechnicalDetails is false",
          "status": "pending",
          "title": "should hide technical details when showTechnicalDetails is false",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should apply custom className",
          "status": "pending",
          "title": "should apply custom className",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay"],
          "fullName": "EnhancedErrorDisplay should create error message from path errors when no user-friendly error provided",
          "status": "pending",
          "title": "should create error message from path errors when no user-friendly error provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay", "Accessibility"],
          "fullName": "EnhancedErrorDisplay Accessibility should have proper ARIA attributes",
          "status": "pending",
          "title": "should have proper ARIA attributes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay", "Accessibility"],
          "fullName": "EnhancedErrorDisplay Accessibility should have proper focus management",
          "status": "pending",
          "title": "should have proper focus management",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay", "Error message quality"],
          "fullName": "EnhancedErrorDisplay Error message quality should display clear and actionable error messages",
          "status": "pending",
          "title": "should display clear and actionable error messages",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["EnhancedErrorDisplay", "Error message quality"],
          "fullName": "EnhancedErrorDisplay Error message quality should provide contextual help for different error categories",
          "status": "pending",
          "title": "should provide contextual help for different error categories",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ErrorBoundary"],
          "fullName": "ErrorBoundary renders children when there is no error",
          "status": "pending",
          "title": "renders children when there is no error",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorBoundary"],
          "fullName": "ErrorBoundary renders error UI when child component throws",
          "status": "pending",
          "title": "renders error UI when child component throws",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorBoundary"],
          "fullName": "ErrorBoundary calls onError callback when error occurs",
          "status": "pending",
          "title": "calls onError callback when error occurs",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorBoundary"],
          "fullName": "ErrorBoundary renders custom fallback when provided",
          "status": "pending",
          "title": "renders custom fallback when provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorBoundary"],
          "fullName": "ErrorBoundary resets error state when retry button is clicked",
          "status": "pending",
          "title": "resets error state when retry button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorBoundary"],
          "fullName": "ErrorBoundary shows error details in development mode",
          "status": "pending",
          "title": "shows error details in development mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ErrorBoundary"],
          "fullName": "ErrorBoundary hides error details in production mode",
          "status": "pending",
          "title": "hides error details in production mode",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Toast"],
          "fullName": "Toast renders toast with title and message",
          "status": "pending",
          "title": "renders toast with title and message",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Toast"],
          "fullName": "Toast renders different toast types with appropriate styling",
          "status": "pending",
          "title": "renders different toast types with appropriate styling",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Toast"],
          "fullName": "Toast calls onClose when close button is clicked",
          "status": "pending",
          "title": "calls onClose when close button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Toast"],
          "fullName": "Toast auto-closes after specified duration",
          "status": "pending",
          "title": "auto-closes after specified duration",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Toast"],
          "fullName": "Toast does not auto-close when duration is 0",
          "status": "pending",
          "title": "does not auto-close when duration is 0",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Toast"],
          "fullName": "Toast renders and handles action button",
          "status": "pending",
          "title": "renders and handles action button",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Toast"],
          "fullName": "Toast renders without message when not provided",
          "status": "pending",
          "title": "renders without message when not provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Toast"],
          "fullName": "Toast renders toast element correctly",
          "status": "pending",
          "title": "renders toast element correctly",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/error/__tests__/Toast.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should render all opportunities",
          "status": "pending",
          "title": "should render all opportunities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should display opportunity details",
          "status": "pending",
          "title": "should display opportunity details",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should filter opportunities by type",
          "status": "pending",
          "title": "should filter opportunities by type",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should expand opportunity details when clicked",
          "status": "pending",
          "title": "should expand opportunity details when clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should call onSelectOpportunity when View Details is clicked",
          "status": "pending",
          "title": "should call onSelectOpportunity when View Details is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should show correct type badges with appropriate colors",
          "status": "pending",
          "title": "should show correct type badges with appropriate colors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should sort opportunities by priority",
          "status": "pending",
          "title": "should sort opportunities by priority",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should show empty state when no opportunities",
          "status": "pending",
          "title": "should show empty state when no opportunities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should show filter counts correctly",
          "status": "pending",
          "title": "should show filter counts correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should show repository count for each opportunity",
          "status": "pending",
          "title": "should show repository count for each opportunity",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["IntegrationOpportunities"],
          "fullName": "IntegrationOpportunities should handle different effort levels with appropriate styling",
          "status": "pending",
          "title": "should handle different effort levels with appropriate styling",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Pagination"],
          "fullName": "Pagination renders pagination with correct page numbers",
          "status": "pending",
          "title": "renders pagination with correct page numbers",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Pagination"],
          "fullName": "Pagination handles page changes correctly",
          "status": "pending",
          "title": "handles page changes correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Pagination"],
          "fullName": "Pagination handles next and previous buttons correctly",
          "status": "pending",
          "title": "handles next and previous buttons correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Pagination"],
          "fullName": "Pagination disables previous button on first page",
          "status": "pending",
          "title": "disables previous button on first page",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Pagination"],
          "fullName": "Pagination disables next button on last page",
          "status": "pending",
          "title": "disables next button on last page",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Pagination"],
          "fullName": "Pagination handles small number of pages correctly",
          "status": "pending",
          "title": "handles small number of pages correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Pagination"],
          "fullName": "Pagination shows mobile pagination indicator",
          "status": "pending",
          "title": "shows mobile pagination indicator",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/repository/__tests__/Pagination.test.tsx"
    },
    {
      "assertionResults": [],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "failed",
      "message": "jest is not defined",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/repository/__tests__/RelationshipGraph.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["RepositoryCard"],
          "fullName": "RepositoryCard renders repository information correctly",
          "status": "pending",
          "title": "renders repository information correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositoryCard"],
          "fullName": "RepositoryCard handles selection correctly",
          "status": "pending",
          "title": "handles selection correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositoryCard"],
          "fullName": "RepositoryCard handles view button click correctly",
          "status": "pending",
          "title": "handles view button click correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositoryCard"],
          "fullName": "RepositoryCard displays selected state correctly",
          "status": "pending",
          "title": "displays selected state correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositoryCard"],
          "fullName": "RepositoryCard formats date correctly",
          "status": "pending",
          "title": "formats date correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositoryCard"],
          "fullName": "RepositoryCard formats different sizes correctly",
          "status": "pending",
          "title": "formats different sizes correctly",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/repository/__tests__/RepositoryCard.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["RepositoryComparison"],
          "fullName": "RepositoryComparison renders loading state initially",
          "status": "pending",
          "title": "renders loading state initially",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositoryComparison"],
          "fullName": "RepositoryComparison renders comparison data correctly",
          "status": "pending",
          "title": "renders comparison data correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositoryComparison"],
          "fullName": "RepositoryComparison handles API errors correctly",
          "status": "pending",
          "title": "handles API errors correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositoryComparison"],
          "fullName": "RepositoryComparison calls onClose when close button is clicked",
          "status": "pending",
          "title": "calls onClose when close button is clicked",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/repository/__tests__/RepositoryComparison.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["RepositorySelector"],
          "fullName": "RepositorySelector renders correctly with initial state",
          "status": "pending",
          "title": "renders correctly with initial state",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositorySelector"],
          "fullName": "RepositorySelector displays directory contents when loaded",
          "status": "pending",
          "title": "displays directory contents when loaded",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositorySelector"],
          "fullName": "RepositorySelector navigates to a directory when clicked",
          "status": "pending",
          "title": "navigates to a directory when clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositorySelector"],
          "fullName": "RepositorySelector selects a repository when Select Repository button is clicked",
          "status": "pending",
          "title": "selects a repository when Select Repository button is clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RepositorySelector"],
          "fullName": "RepositorySelector displays recent repositories when available",
          "status": "pending",
          "title": "displays recent repositories when available",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/repository/__tests__/RepositorySelector.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface renders the search interface with repositories",
          "status": "pending",
          "title": "renders the search interface with repositories",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface handles search input correctly",
          "status": "pending",
          "title": "handles search input correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface handles repository selection correctly",
          "status": "pending",
          "title": "handles repository selection correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface handles view repository correctly",
          "status": "pending",
          "title": "handles view repository correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface handles saved search selection correctly",
          "status": "pending",
          "title": "handles saved search selection correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface handles pagination correctly",
          "status": "pending",
          "title": "handles pagination correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface displays loading state correctly",
          "status": "pending",
          "title": "displays loading state correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface displays error state correctly",
          "status": "pending",
          "title": "displays error state correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["SearchInterface"],
          "fullName": "SearchInterface displays empty state correctly",
          "status": "pending",
          "title": "displays empty state correctly",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton renders export button correctly",
          "status": "pending",
          "title": "renders export button correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton opens dropdown when clicked",
          "status": "pending",
          "title": "opens dropdown when clicked",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton handles direct download correctly",
          "status": "pending",
          "title": "handles direct download correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton handles export for sharing correctly",
          "status": "pending",
          "title": "handles export for sharing correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton shows loading state during export",
          "status": "pending",
          "title": "shows loading state during export",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton handles export errors gracefully",
          "status": "pending",
          "title": "handles export errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton displays export history when available",
          "status": "pending",
          "title": "displays export history when available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton works with batch analysis",
          "status": "pending",
          "title": "works with batch analysis",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton handles sharing with native share API when available",
          "status": "pending",
          "title": "handles sharing with native share API when available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["ExportButton"],
          "fullName": "ExportButton falls back to clipboard when native share is not available",
          "status": "pending",
          "title": "falls back to clipboard when native share is not available",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1758497581672,
      "endTime": 1758497581672,
      "status": "passed",
      "message": "",
      "name": "C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx"
    }
  ]
}
