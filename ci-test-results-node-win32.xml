<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="1248" failures="30" errors="0" time="0.4182106">
    <testsuite name="packages/shared/__tests__/configuration-manager.test.ts" timestamp="2025-09-21T23:33:30.802Z" hostname="AlexJ-N501VW" tests="29" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Singleton Pattern &gt; should return the same instance" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Loading &gt; should load default configuration when no path provided" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Loading &gt; should emit configurationLoaded event" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Loading &gt; should return current configuration" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Loading &gt; should return a copy of configuration to prevent mutation" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Updates &gt; should update log level successfully" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Updates &gt; should update multiple properties" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Updates &gt; should reject invalid configuration updates" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Updates &gt; should emit configurationUpdated event on successful update" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Updates &gt; should detect when restart is required" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Validation &gt; should validate valid configuration" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Validation &gt; should detect missing required fields" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Validation &gt; should validate file size parsing" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Validation &gt; should reject invalid file size formats" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Watching &gt; should start configuration watching" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Watching &gt; should stop configuration watching" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Watching &gt; should not start watching without config path" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Error Handling &gt; should handle configuration update errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Error Handling &gt; should preserve original configuration on update failure" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigurationManager &gt; Configuration Merging &gt; should merge partial updates with existing configuration" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; Logger Configuration Validation &gt; should validate complete valid configuration" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; Logger Configuration Validation &gt; should detect invalid log levels" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; Logger Configuration Validation &gt; should detect missing required fields" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; Logger Configuration Validation &gt; should validate file output configuration" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; Logger Configuration Validation &gt; should validate external output configuration" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; Logger Configuration Validation &gt; should generate warnings for disabled outputs" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; Logger Configuration Validation &gt; should handle null or undefined configuration" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; File Size Parsing &gt; should parse valid file sizes" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/configuration-manager.test.ts" name="ConfigValidator &gt; File Size Parsing &gt; should reject invalid file size formats" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/__tests__/error-classification.test.ts" timestamp="2025-09-21T23:33:30.828Z" hostname="AlexJ-N501VW" tests="34" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should classify path not found errors correctly" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should classify permission denied errors correctly" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should classify network timeout errors correctly" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should classify LLM provider errors correctly" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should classify HTTP errors based on status code" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should handle string errors" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should generate unique IDs and correlation IDs" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should use provided correlation ID" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; classifyError &gt; should link parent and child errors" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; createErrorResponse &gt; should create API error response with minimal context" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; createErrorResponse &gt; should create API error response with full context" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; getErrorStatistics &gt; should return empty statistics for no errors" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; getErrorStatistics &gt; should calculate statistics correctly" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; getErrorStatistics &gt; should filter statistics by time range" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; getCorrelatedErrors &gt; should return null for non-existent correlation ID" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; getCorrelatedErrors &gt; should return correlated errors" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; getCorrelatedErrors &gt; should determine root cause correctly" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; resolveError &gt; should mark error as resolved" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorClassifier &gt; resolveError &gt; should return false for non-existent error" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; formatForAPI &gt; should format error for API response" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; formatForAPI &gt; should respect formatting options" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; formatForConsole &gt; should format error for console output" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; formatForConsole &gt; should include colors when requested" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; formatForConsole &gt; should limit suggestions based on options" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; formatForLogging &gt; should format error for structured logging" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; formatErrorSummary &gt; should format multiple errors as summary" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; formatErrorSummary &gt; should handle empty error list" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; createUserFriendlyMessage &gt; should create user-friendly messages for common errors" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; ErrorFormatter &gt; createUserFriendlyMessage &gt; should fall back to original message for unknown errors" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; Error Type Definitions &gt; should have all required error categories" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; Error Type Definitions &gt; should have all required error severities" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; Error Type Definitions &gt; should have comprehensive error codes" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; Integration Tests &gt; should handle complete error lifecycle" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/error-classification.test.ts" name="Error Classification System &gt; Integration Tests &gt; should handle error correlation across multiple operations" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/__tests__/path-utils.test.ts" timestamp="2025-09-21T23:33:30.863Z" hostname="AlexJ-N501VW" tests="21" failures="1" errors="0" skipped="0" time="0.1509031">
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Basic Input Validation &gt; should reject empty path" time="0.021606">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Basic Input Validation &gt; should reject null path" time="0.0125977">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Basic Input Validation &gt; should reject undefined path" time="0.0093752">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Path Normalization &gt; should normalize existing file path" time="0.0109162">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Path Normalization &gt; should normalize existing directory path" time="0.0092389">
            <system-out>
statMock called with: C:\Users\AlexJ\AppData\Local\Temp\path-validator-test-cJTsnI\testdir, resolved: C:\Users\AlexJ\AppData\Local\Temp\path-validator-test-cJTsnI\testdir
Matched testDir or tempDir: C:\Users\AlexJ\AppData\Local\Temp\path-validator-test-cJTsnI\testdir or C:\Users\AlexJ\AppData\Local\Temp\path-validator-test-cJTsnI

            </system-out>
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Path Normalization &gt; should handle relative paths" time="0.0071255">
            <system-out>
statMock called with: C:\Users\AlexJ\AppData\Local\Temp\path-validator-test-BLI57C\test.txt, resolved: C:\Users\AlexJ\AppData\Local\Temp\path-validator-test-BLI57C\test.txt
Matched testFile: C:\Users\AlexJ\AppData\Local\Temp\path-validator-test-BLI57C\test.txt

            </system-out>
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Security Validation &gt; should detect directory traversal attempts" time="0.0464425">
            <failure message="expected true to be false // Object.is equality" type="AssertionError">
AssertionError: expected true to be false // Object.is equality

- Expected
+ Received

- false
+ true

 ❯ __tests__/path-utils.test.ts:149:30
            </failure>
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Security Validation &gt; should reject paths with invalid characters" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Security Validation &gt; should reject overly long paths" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Permission Validation &gt; should validate read permissions for existing file" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Permission Validation &gt; should validate directory permissions" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Non-existent Paths &gt; should handle non-existent paths" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Non-existent Paths &gt; should allow non-existent paths when existence check is disabled" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Quick Validation &gt; should work with BASIC security level" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Quick Validation &gt; should work with STANDARD security level" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Quick Validation &gt; should work with STRICT security level" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Cross-platform Compatibility &gt; should handle different path separators" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Cross-platform Compatibility &gt; should handle UNC paths on Windows" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Error Messages &gt; should provide helpful error messages" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Error Messages &gt; should provide detailed error information" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/path-utils.test.ts" name="PathValidator &gt; Timeout Handling &gt; should handle timeout gracefully" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/__tests__/validation/schemas.test.ts" timestamp="2025-09-21T23:33:30.914Z" hostname="AlexJ-N501VW" tests="9" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; FileInfo Schema &gt; should validate a valid FileInfo object" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; FileInfo Schema &gt; should reject an invalid FileInfo object" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; AnalysisOptions Schema &gt; should validate a valid AnalysisOptions object" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; AnalysisOptions Schema &gt; should reject an invalid AnalysisOptions object" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; RepositoryAnalysis Schema &gt; should validate a valid RepositoryAnalysis object" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; RepositoryAnalysis Schema &gt; should reject an invalid RepositoryAnalysis object" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; SearchQuery Schema &gt; should validate a valid SearchQuery object" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; SearchQuery Schema &gt; should validate a partial SearchQuery object" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/schemas.test.ts" name="Validation Schemas &gt; RepositoryIndex Schema &gt; should validate a valid RepositoryIndex object" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/shared/__tests__/validation/validators.test.ts" timestamp="2025-09-21T23:33:30.938Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/shared/__tests__/validation/validators.test.ts" name="Validation Utilities &gt; validate function &gt; should validate data against a schema" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/validators.test.ts" name="Validation Utilities &gt; validate function &gt; should throw an error for invalid data" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/validators.test.ts" name="Validation Utilities &gt; validateSafe function &gt; should return success and data for valid input" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/validators.test.ts" name="Validation Utilities &gt; validateSafe function &gt; should return failure and errors for invalid input" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/validators.test.ts" name="Validation Utilities &gt; Specific validators &gt; should validate repository analysis data" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/validators.test.ts" name="Validation Utilities &gt; Specific validators &gt; should validate file info data" time="0">
        </testcase>
        <testcase classname="packages/shared/__tests__/validation/validators.test.ts" name="Validation Utilities &gt; Specific validators &gt; should validate analysis options data" time="0">
        </testcase>
    </testsuite>
    <testsuite name="tests/biome-rules-validation.test.ts" timestamp="2025-09-21T23:33:30.950Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/biome-rules-validation.test.ts" name="tests/biome-rules-validation.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/bun-compatibility.test.ts" timestamp="2025-09-21T23:33:30.954Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/bun-compatibility.test.ts" name="tests/bun-compatibility.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/ci-validation.test.ts" timestamp="2025-09-21T23:33:30.959Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/ci-validation.test.ts" name="tests/ci-validation.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/comprehensive-validation.test.ts" timestamp="2025-09-21T23:33:30.966Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/comprehensive-validation.test.ts" name="tests/comprehensive-validation.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/config-compilation.test.ts" timestamp="2025-09-21T23:33:30.971Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/config-compilation.test.ts" name="tests/config-compilation.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/migration-validation.test.ts" timestamp="2025-09-21T23:33:30.976Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/migration-validation.test.ts" name="tests/migration-validation.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/minimal-standalone.test.ts" timestamp="2025-09-21T23:33:30.983Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/minimal-standalone.test.ts" name="tests/minimal-standalone.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/MockManager.test.ts" timestamp="2025-09-21T23:33:30.987Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/MockManager.test.ts" name="tests/MockManager.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/regression-prevention.test.ts" timestamp="2025-09-21T23:33:30.992Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/regression-prevention.test.ts" name="tests/regression-prevention.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/regression-validation.test.ts" timestamp="2025-09-21T23:33:30.999Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/regression-validation.test.ts" name="tests/regression-validation.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/ResourceController.test.ts" timestamp="2025-09-21T23:33:31.003Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/ResourceController.test.ts" name="tests/ResourceController.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/simple-test.test.ts" timestamp="2025-09-21T23:33:31.005Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/simple-test.test.ts" name="tests/simple-test.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/standalone-test.test.ts" timestamp="2025-09-21T23:33:31.009Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/standalone-test.test.ts" name="tests/standalone-test.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/test-isolation.test.ts" timestamp="2025-09-21T23:33:31.014Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/test-isolation.test.ts" name="tests/test-isolation.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/TestExecutor-minimal.test.ts" timestamp="2025-09-21T23:33:31.018Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/TestExecutor-minimal.test.ts" name="tests/TestExecutor-minimal.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/TestExecutor.test.ts" timestamp="2025-09-21T23:33:31.020Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/TestExecutor.test.ts" name="tests/TestExecutor.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/type-checking.test.ts" timestamp="2025-09-21T23:33:31.023Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/type-checking.test.ts" name="tests/type-checking.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/e2e/analysis.test.ts" timestamp="2025-09-21T23:33:31.026Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/e2e/analysis.test.ts" name="tests/e2e/analysis.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/e2e/cli.test.ts" timestamp="2025-09-21T23:33:31.030Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/e2e/cli.test.ts" name="tests/e2e/cli.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/e2e/mock-integration.test.ts" timestamp="2025-09-21T23:33:31.033Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/e2e/mock-integration.test.ts" name="tests/e2e/mock-integration.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/e2e/performance.test.ts" timestamp="2025-09-21T23:33:31.036Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/e2e/performance.test.ts" name="tests/e2e/performance.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/core-functionality.test.ts" timestamp="2025-09-21T23:33:31.038Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/integration/core-functionality.test.ts" name="tests/integration/core-functionality.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/__tests__/ci-configuration.test.ts" timestamp="2025-09-21T23:33:31.041Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="tests/__tests__/ci-configuration.test.ts" name="tests/__tests__/ci-configuration.test.ts" time="0">
            <failure message="modulePath is not defined" type="ReferenceError">
ReferenceError: modulePath is not defined
 ❯ tests/mock-utils.ts:29:13
 ❯ tests/setup.ts:32:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="packages/cli/src/__tests__/cli-integration.test.ts" timestamp="2025-09-21T23:33:31.043Z" hostname="AlexJ-N501VW" tests="4" failures="0" errors="0" skipped="0" time="0.0047028">
        <testcase classname="packages/cli/src/__tests__/cli-integration.test.ts" name="CLI Integration Tests &gt; Mock Manager Integration &gt; should properly setup and cleanup mocks" time="0.0011109">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/cli-integration.test.ts" name="CLI Integration Tests &gt; API Client Mock Setup &gt; should create API client mock" time="0.0005177">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/cli-integration.test.ts" name="CLI Integration Tests &gt; Progress Tracker Mock Setup &gt; should create progress tracker mock" time="0.0007846">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/cli-integration.test.ts" name="CLI Integration Tests &gt; File System Mock Setup &gt; should create file system mocks" time="0.0014272">
        </testcase>
    </testsuite>
    <testsuite name="packages/cli/src/__tests__/utils.test.ts" timestamp="2025-09-21T23:33:31.050Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0.0452261">
        <testcase classname="packages/cli/src/__tests__/utils.test.ts" name="CLI Utilities Tests &gt; Error Handler &gt; should create CLIError with message" time="0.0036374">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/utils.test.ts" name="CLI Utilities Tests &gt; Error Handler &gt; should create CLIError with message and type" time="0.0007234">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/utils.test.ts" name="CLI Utilities Tests &gt; Error Handler &gt; should create CLIError with default type" time="0.0005966">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/utils.test.ts" name="CLI Utilities Tests &gt; Mock Integration &gt; should properly use mocked modules" time="0.0053641">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/utils.test.ts" name="CLI Utilities Tests &gt; Mock Function Behavior &gt; should create and use mock functions" time="0.0278195">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/utils.test.ts" name="CLI Utilities Tests &gt; Mock Function Behavior &gt; should track mock function calls" time="0.0012827">
        </testcase>
        <testcase classname="packages/cli/src/__tests__/utils.test.ts" name="CLI Utilities Tests &gt; Object Mocking &gt; should create mock objects with methods" time="0.0020828">
        </testcase>
    </testsuite>
    <testsuite name="packages/cli/src/utils/__tests__/config.test.ts" timestamp="2025-09-21T23:33:31.054Z" hostname="AlexJ-N501VW" tests="5" failures="0" errors="0" skipped="0" time="0.006154">
        <testcase classname="packages/cli/src/utils/__tests__/config.test.ts" name="CLI Configuration Tests &gt; Mock Configuration Setup &gt; should create configuration mocks" time="0.0019525">
        </testcase>
        <testcase classname="packages/cli/src/utils/__tests__/config.test.ts" name="CLI Configuration Tests &gt; Mock Configuration Setup &gt; should mock configuration methods" time="0.0017552">
        </testcase>
        <testcase classname="packages/cli/src/utils/__tests__/config.test.ts" name="CLI Configuration Tests &gt; User Preferences Mock &gt; should mock user preferences structure" time="0.0008007">
        </testcase>
        <testcase classname="packages/cli/src/utils/__tests__/config.test.ts" name="CLI Configuration Tests &gt; Analysis Options Mock &gt; should mock analysis options" time="0.0005431">
        </testcase>
        <testcase classname="packages/cli/src/utils/__tests__/config.test.ts" name="CLI Configuration Tests &gt; Mock Manager Integration &gt; should properly use MockManager" time="0.0008625">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/end-to-end-workflows.test.ts" timestamp="2025-09-21T23:33:31.057Z" hostname="AlexJ-N501VW" tests="6" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/end-to-end-workflows.test.ts" name="End-to-End User Workflow Tests &gt; Complete Repository Analysis Workflow &gt; should handle successful repository analysis from start to finish" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/end-to-end-workflows.test.ts" name="End-to-End User Workflow Tests &gt; Complete Repository Analysis Workflow &gt; should handle repository analysis with path validation errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/end-to-end-workflows.test.ts" name="End-to-End User Workflow Tests &gt; Complete Repository Analysis Workflow &gt; should handle timeout scenarios gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/end-to-end-workflows.test.ts" name="End-to-End User Workflow Tests &gt; Complete Repository Analysis Workflow &gt; should handle cancellation scenarios" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/end-to-end-workflows.test.ts" name="End-to-End User Workflow Tests &gt; Settings Tab Path Input Workflow &gt; should simulate settings tab path validation workflow" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/end-to-end-workflows.test.ts" name="End-to-End User Workflow Tests &gt; Analyze Tab Path Input Workflow &gt; should simulate analyze tab repository selection workflow" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/file-type-filtering.test.ts" timestamp="2025-09-21T23:33:31.061Z" hostname="AlexJ-N501VW" tests="6" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/file-type-filtering.test.ts" name="File Type Filtering &gt; should find repositories with .js files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/file-type-filtering.test.ts" name="File Type Filtering &gt; should find repositories with .ts files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/file-type-filtering.test.ts" name="File Type Filtering &gt; should find repositories with .py files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/file-type-filtering.test.ts" name="File Type Filtering &gt; should find repositories with .jsx files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/file-type-filtering.test.ts" name="File Type Filtering &gt; should find repositories with multiple file types" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/file-type-filtering.test.ts" name="File Type Filtering &gt; should assign correct scores for file type matches" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/logging-integration.test.ts" timestamp="2025-09-21T23:33:31.067Z" hostname="AlexJ-N501VW" tests="12" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; File System Operations Logging &gt; should log directory traversal operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; File System Operations Logging &gt; should log file read operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; File System Operations Logging &gt; should log file system errors with classification" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; File System Operations Logging &gt; should log permission errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; Repository Analysis Logging &gt; should log repository analysis lifecycle" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; Repository Analysis Logging &gt; should log analysis errors with classification" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; LLM Provider Logging &gt; should log LLM provider interactions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; LLM Provider Logging &gt; should log LLM provider errors with classification" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; Error Correlation and Tracking &gt; should maintain request correlation across operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; Error Correlation and Tracking &gt; should log performance metrics for operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; Log Content Validation &gt; should redact sensitive information from logs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-integration.test.ts" name="Logging Integration Tests &gt; Log Content Validation &gt; should include appropriate context in error logs" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/logging-system-integration.test.ts" timestamp="2025-09-21T23:33:31.073Z" hostname="AlexJ-N501VW" tests="14" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Log Correlation Across Components &gt; should maintain request ID correlation across path validation and logging" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Log Correlation Across Components &gt; should correlate logs across multiple service interactions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Log Correlation Across Components &gt; should handle error correlation across service boundaries" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; External Logging Service Integration &gt; should format logs correctly for external services" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; External Logging Service Integration &gt; should handle external service failures gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; External Logging Service Integration &gt; should redact sensitive data in external logs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Logging Performance Under Load &gt; should handle high-volume logging without blocking" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Logging Performance Under Load &gt; should handle concurrent logging from multiple components" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Logging Performance Under Load &gt; should maintain performance during log rotation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Log Format and Content Validation &gt; should produce valid JSON format logs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Log Format and Content Validation &gt; should include proper error details in error logs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Log Format and Content Validation &gt; should handle special characters and unicode in logs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; Log Format and Content Validation &gt; should validate log entry structure consistency" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/logging-system-integration.test.ts" name="Logging System Integration Tests &gt; HTTP Request/Response Logging Integration &gt; should log HTTP requests with proper correlation" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/performance-load.test.ts" timestamp="2025-09-21T23:33:31.084Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Path Validation Performance &gt; should validate single paths within acceptable time limits" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Path Validation Performance &gt; should handle concurrent path validations efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Path Validation Performance &gt; should handle large directory structures efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Path Validation Performance &gt; should maintain performance with path caching" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Logging Performance Under Load &gt; should handle high-volume logging without significant performance degradation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Logging Performance Under Load &gt; should handle concurrent logging from multiple components efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Logging Performance Under Load &gt; should maintain performance during log rotation under load" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Memory Usage and Resource Management &gt; should not leak memory during extended operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Memory Usage and Resource Management &gt; should maintain stable memory usage under repeated load" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Memory Usage and Resource Management &gt; should handle resource cleanup properly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance-load.test.ts" name="Performance and Load Testing &gt; Stress Testing &gt; should handle extreme load without crashing" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/performance.test.ts" timestamp="2025-09-21T23:33:31.090Z" hostname="AlexJ-N501VW" tests="12" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Cache Performance &gt; should significantly improve performance on cache hit" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Cache Performance &gt; should handle cache operations efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Cache Performance &gt; should handle cache invalidation patterns efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Cache Performance &gt; should handle cache invalidation correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Cache Performance &gt; should respect TTL settings" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Deduplication Performance &gt; should deduplicate concurrent identical requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Deduplication Performance &gt; should handle different requests separately" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Batch Processing Performance &gt; should process multiple repositories efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Memory Usage &gt; should not leak memory during repeated analyses" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Metrics Collection Performance &gt; should collect metrics without significant overhead" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Metrics Collection Performance &gt; should handle high-frequency metric recording" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/performance.test.ts" name="Performance Tests &gt; Large Repository Performance &gt; should handle large repositories efficiently" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/platform-integration.test.ts" timestamp="2025-09-21T23:33:31.099Z" hostname="AlexJ-N501VW" tests="24" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Windows Path Handling &gt; should handle Windows backslash paths correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Windows Path Handling &gt; should handle Windows forward slash paths correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Windows Path Handling &gt; should validate Windows drive letters correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Windows Path Handling &gt; should detect Windows reserved names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Windows Path Handling &gt; should handle Windows path length limits" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Windows Path Handling &gt; should validate UNC paths correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Windows Path Handling &gt; should handle Windows invalid characters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Windows Path Handling &gt; should handle paths with trailing spaces and dots" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Unix/Linux Path Handling &gt; should handle Unix absolute paths correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Unix/Linux Path Handling &gt; should handle Unix relative paths correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Unix/Linux Path Handling &gt; should normalize Unix paths with backslashes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Unix/Linux Path Handling &gt; should handle very long Unix paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Unix/Linux Path Handling &gt; should handle Unix hidden files and directories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Cross-Platform Compatibility &gt; should handle mixed path separators consistently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Cross-Platform Compatibility &gt; should resolve relative paths consistently across platforms" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Cross-Platform Compatibility &gt; should handle case sensitivity differences" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Performance and Timeout Testing &gt; should timeout path validation after specified time" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Performance and Timeout Testing &gt; should support cancellation via AbortSignal" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Performance and Timeout Testing &gt; should provide progress updates during validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; Performance and Timeout Testing &gt; should handle concurrent path validations efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; End-to-End User Workflow Tests &gt; should handle complete repository analysis workflow" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; End-to-End User Workflow Tests &gt; should handle user input validation with helpful error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; End-to-End User Workflow Tests &gt; should handle network path scenarios" time="0">
        </testcase>
        <testcase classname="packages/backend/src/__tests__/platform-integration.test.ts" name="Platform-Specific Integration Tests &gt; End-to-End User Workflow Tests &gt; should integrate with logging system for debugging" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/simple-test.test.ts" timestamp="2025-09-21T23:33:31.110Z" hostname="AlexJ-N501VW" tests="1" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/simple-test.test.ts" name="Simple test &gt; should pass" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/__tests__/test-simple.test.ts" timestamp="2025-09-21T23:33:31.111Z" hostname="AlexJ-N501VW" tests="1" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/__tests__/test-simple.test.ts" name="Simple test &gt; should pass" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/__tests__/utils/fileImportance.test.ts" timestamp="2025-09-21T23:33:31.114Z" hostname="AlexJ-N501VW" tests="15" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; IMPORTANT_FILE_PATTERNS constant &gt; should contain definitions for important file categories" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; IMPORTANT_FILE_PATTERNS constant &gt; should have patterns defined for each category" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; IMPORTANT_EXTENSIONS constant &gt; should contain definitions for important file extensions by language" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; IMPORTANT_EXTENSIONS constant &gt; should have extensions defined for each language category" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; calculateImportanceFactors &gt; should calculate importance factors for a file" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; calculateImportanceFactors &gt; should give higher name score to important configuration files" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; calculateImportanceFactors &gt; should give higher name score to entry point files" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; calculateImportanceFactors &gt; should give higher location score to files at the root" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; calculateImportanceFactors &gt; should give higher location score to files in core directories" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; calculateImportanceFactors &gt; should give optimal size score to medium-sized files" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; calculateFileImportance &gt; should calculate importance score between 0 and 1" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; calculateFileImportance &gt; should give higher scores to important files" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; sortFilesByImportance &gt; should sort files by importance score in descending order" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; sortFilesByImportance &gt; should handle empty file list" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileImportance.test.ts" name="File Importance Utilities &gt; sortFilesByImportance &gt; should handle missing file sizes" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/__tests__/utils/fileSystem.test.ts" timestamp="2025-09-21T23:33:31.122Z" hostname="AlexJ-N501VW" tests="14" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; traverseDirectory &gt; should traverse a directory and return files and directories" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; traverseDirectory &gt; should respect maxDepth option" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; traverseDirectory &gt; should respect maxFiles option" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; traverseDirectory &gt; should respect ignorePatterns option" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; traverseDirectory &gt; should respect fileFilter option" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; traverseDirectory &gt; should throw FileSystemError for non-existent directory" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; traverseDirectory &gt; should throw FileSystemError for invalid path" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; readFileWithErrorHandling &gt; should read a file successfully" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; readFileWithErrorHandling &gt; should throw FileSystemError for non-existent file" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; getCommonIgnorePatterns &gt; should return an array of common ignore patterns" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; readGitignore &gt; should read and parse .gitignore file" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; readGitignore &gt; should return empty array if .gitignore does not exist" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; getCombinedIgnorePatterns &gt; should combine gitignore patterns with common and custom patterns" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/fileSystem.test.ts" name="File System Utilities &gt; extractDirectoryInfo &gt; should extract directory information from traversal result" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/__tests__/utils/languageDetection.test.ts" timestamp="2025-09-21T23:33:31.130Z" hostname="AlexJ-N501VW" tests="13" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; LANGUAGES constant &gt; should contain definitions for common languages" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; LANGUAGES constant &gt; should have extensions defined for each language" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectLanguageFromPath &gt; should detect language based on file extension" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectLanguageFromPath &gt; should detect language based on filename" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectLanguageFromPath &gt; should return &quot;Unknown&quot; for unrecognized files" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectLanguageFromShebang &gt; should detect language based on shebang" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectLanguageFromShebang &gt; should return null for content without shebang" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectLanguage &gt; should detect language from file path and content" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectLanguage &gt; should use provided content if available" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectLanguage &gt; should return &quot;Unknown&quot; for unrecognized files" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectFrameworks &gt; should detect frameworks based on file patterns" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectFrameworks &gt; should detect frameworks based on dependencies" time="0">
        </testcase>
        <testcase classname="packages/backend/__tests__/utils/languageDetection.test.ts" name="Language Detection Utilities &gt; detectFrameworks &gt; should return empty array for unrecognized projects" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" timestamp="2025-09-21T23:33:31.136Z" hostname="AlexJ-N501VW" tests="15" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Windows Path Format Analysis &gt; should analyze repository with Windows backslash path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Windows Path Format Analysis &gt; should analyze repository with Windows forward slash path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Windows Path Format Analysis &gt; should handle relative paths correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Error Handling in Analysis Workflow &gt; should provide detailed error for non-existent path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Error Handling in Analysis Workflow &gt; should handle file instead of directory" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Error Handling in Analysis Workflow &gt; should handle invalid path characters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Error Handling in Analysis Workflow &gt; should handle reserved names in path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Error Handling in Analysis Workflow &gt; should handle very long paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Batch Analysis with Mixed Path Formats &gt; should handle batch analysis with mixed valid and invalid paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Batch Analysis with Mixed Path Formats &gt; should normalize paths consistently in batch analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Performance and Reliability &gt; should complete analysis within reasonable time" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Performance and Reliability &gt; should handle concurrent analysis requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Performance and Reliability &gt; should provide consistent results for same repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Path Validation Integration &gt; should validate path before starting analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/analyze-workflow.integration.test.ts" name="Complete Analysis Workflow Integration Tests &gt; Path Validation Integration &gt; should provide consistent error messages between validation and analysis" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/__tests__/api-fixed.test.ts" timestamp="2025-09-21T23:33:31.142Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/__tests__/api-fixed.test.ts" name="src/api/__tests__/api-fixed.test.ts" time="0">
            <failure message="Transform failed with 1 error:
C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/api-fixed.test.ts:61:2: ERROR: Expected &quot;}&quot; but found &quot;.&quot;" type="Error">
Error: Transform failed with 1 error:
C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/api-fixed.test.ts:61:2: ERROR: Expected &quot;}&quot; but found &quot;.&quot;
  Plugin: vite:esbuild
  File: C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/__tests__/api-fixed.test.ts:61:2
  
  Expected &quot;}&quot; but found &quot;.&quot;
  59 |      },
  60 |  // Mock HealthService before importing app
  61 |  vi.mock(&apos;../../services/health.service&apos;, () =&gt; ({
     |    ^
  62 |    HealthService: class MockHealthService {
  63 |      healthCheckHandler = vi.fn();
  
 ❯ failureErrorWithLog ../../node_modules/esbuild/lib/main.js:1467:15
 ❯ ../../node_modules/esbuild/lib/main.js:736:50
 ❯ responseCallbacks.&lt;computed&gt; ../../node_modules/esbuild/lib/main.js:603:9
 ❯ handleIncomingPacket ../../node_modules/esbuild/lib/main.js:658:12
 ❯ Socket.readFromStdout ../../node_modules/esbuild/lib/main.js:581:7
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/__tests__/api.simple.test.ts" timestamp="2025-09-21T23:33:31.145Z" hostname="AlexJ-N501VW" tests="2" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/__tests__/api.simple.test.ts" name="API Simple Integration Tests &gt; Health Check &gt; should return health status" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.simple.test.ts" name="API Simple Integration Tests &gt; API Routes &gt; should handle 404 for unknown routes" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/__tests__/api.test.ts" timestamp="2025-09-21T23:33:31.147Z" hostname="AlexJ-N501VW" tests="10" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Health Check &gt; should return status ok" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Analysis &gt; should analyze a repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Analysis &gt; should return validation error for missing path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Analysis &gt; should analyze multiple repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Management &gt; should get all repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Management &gt; should get a repository by ID" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Management &gt; should return 404 for non-existent repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Management &gt; should search repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Management &gt; should find similar repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/api.test.ts" name="API Integration Tests &gt; Repository Management &gt; should suggest combinations" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/__tests__/batch-analyze.test.ts" timestamp="2025-09-21T23:33:31.152Z" hostname="AlexJ-N501VW" tests="3" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/__tests__/batch-analyze.test.ts" name="Batch Analysis API &gt; should return 400 for invalid request" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/batch-analyze.test.ts" name="Batch Analysis API &gt; should analyze multiple repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/batch-analyze.test.ts" name="Batch Analysis API &gt; should handle errors during batch analysis" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/__tests__/path-integration.test.ts" timestamp="2025-09-21T23:33:31.154Z" hostname="AlexJ-N501VW" tests="26" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should validate Windows absolute path with backslashes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should validate Windows absolute path with forward slashes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should validate UNC path format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should reject invalid path with reserved names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should reject path that is too long" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should reject path with invalid characters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should handle timeout for slow path validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should return error for empty path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Path Validation API &gt; should return validation errors for malformed request" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Repository Analysis with Path Validation &gt; should analyze repository with valid Windows path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Repository Analysis with Path Validation &gt; should reject repository analysis with invalid path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Repository Analysis with Path Validation &gt; should reject repository analysis with permission denied path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Repository Analysis with Path Validation &gt; should handle batch analysis with mixed valid/invalid paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Repository Analysis with Path Validation &gt; should normalize paths consistently across requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Error Message Quality &gt; should provide helpful error messages for common path issues" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Error Message Quality &gt; should provide platform-specific suggestions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Performance and Reliability &gt; should handle concurrent path validation requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Performance and Reliability &gt; should handle very long paths gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="Path Integration Tests &gt; Performance and Reliability &gt; should validate paths with special characters correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="PathHandler Service Unit Tests &gt; Path Normalization &gt; should normalize Windows paths correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="PathHandler Service Unit Tests &gt; Path Normalization &gt; should handle UNC paths correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="PathHandler Service Unit Tests &gt; Path Normalization &gt; should throw error for invalid input" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="PathHandler Service Unit Tests &gt; Path Format Validation &gt; should validate Windows drive letters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="PathHandler Service Unit Tests &gt; Path Format Validation &gt; should detect reserved names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="PathHandler Service Unit Tests &gt; Path Format Validation &gt; should validate path length limits" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/path-integration.test.ts" name="PathHandler Service Unit Tests &gt; Timeout Handling &gt; should respect timeout settings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/__tests__/websocket.test.ts" timestamp="2025-09-21T23:33:31.164Z" hostname="AlexJ-N501VW" tests="4" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/__tests__/websocket.test.ts" name="WebSocket Tests &gt; should connect and join client-specific room" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/websocket.test.ts" name="WebSocket Tests &gt; should register for analysis updates" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/websocket.test.ts" name="WebSocket Tests &gt; should receive analysis progress updates" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/__tests__/websocket.test.ts" name="WebSocket Tests &gt; should receive analysis completion notification" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" timestamp="2025-09-21T23:33:31.166Z" hostname="AlexJ-N501VW" tests="14" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Mock Infrastructure Validation &gt; should have working mock functions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Mock Infrastructure Validation &gt; should be able to call mock functions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Analyzer Instantiation &gt; should create AdvancedAnalyzer instance" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Analyzer Instantiation &gt; should have required methods" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Basic Functionality Tests &gt; should handle repository analysis data" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Basic Functionality Tests &gt; should handle complexity analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Basic Functionality Tests &gt; should handle framework detection" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Mock Integration Tests &gt; should work with mock file operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Mock Integration Tests &gt; should work with mock file stats" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Mock Integration Tests &gt; should handle different file types" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Mock Integration Tests &gt; should handle error scenarios" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Analysis Workflow Tests &gt; should handle complexity calculation workflow" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Analysis Workflow Tests &gt; should handle pattern detection workflow" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.fixed.test.ts" name="AdvancedAnalyzer (Fixed) &gt; Analysis Workflow Tests &gt; should handle insights generation workflow" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" timestamp="2025-09-21T23:33:31.172Z" hostname="AlexJ-N501VW" tests="20" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; analyzeRepository &gt; should perform comprehensive advanced analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; analyzeRepository &gt; should handle files with no content gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; analyzeRepository &gt; should handle file read errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Security Analysis &gt; should detect hardcoded secrets" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Security Analysis &gt; should detect SQL injection vulnerabilities" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Security Analysis &gt; should detect XSS vulnerabilities" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Security Analysis &gt; should calculate security score correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Code Quality Analysis &gt; should calculate cyclomatic complexity correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Code Quality Analysis &gt; should detect code smells" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Code Quality Analysis &gt; should detect technical debt" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Code Quality Analysis &gt; should calculate maintainability index" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Architectural Pattern Detection &gt; should detect MVC pattern from directory structure" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Architectural Pattern Detection &gt; should detect layered architecture" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Architectural Pattern Detection &gt; should detect component-based architecture" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Architectural Pattern Detection &gt; should detect design patterns in code" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Architectural Pattern Detection &gt; should calculate maintainability score" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Architectural Pattern Detection &gt; should generate architectural recommendations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Integration with AnalysisEngine &gt; should integrate with main analysis engine" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Error Handling &gt; should handle malformed code gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/advancedAnalyzer.test.ts" name="AdvancedAnalyzer &gt; Error Handling &gt; should handle empty repository gracefully" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" timestamp="2025-09-21T23:33:31.180Z" hostname="AlexJ-N501VW" tests="22" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Mock Infrastructure Validation &gt; should have working advanced mock functions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Mock Infrastructure Validation &gt; should be able to call advanced mock functions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Analysis Engine Features &gt; should create AnalysisEngine instance for advanced analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Analysis Engine Features &gt; should handle advanced analysis options" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Analysis Engine Features &gt; should have advanced analysis methods" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Repository Analysis &gt; should handle complex repository structure" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Repository Analysis &gt; should analyze code complexity metrics" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Repository Analysis &gt; should detect architectural patterns" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Repository Analysis &gt; should analyze dependencies and frameworks" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; LLM Integration Features &gt; should handle LLM analysis metadata" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; LLM Integration Features &gt; should provide AI-generated insights" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; LLM Integration Features &gt; should handle different LLM providers" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Code Analysis &gt; should analyze function and class structures" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Code Analysis &gt; should handle token counting for large files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Advanced Code Analysis &gt; should sample text for analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Error Handling and Edge Cases &gt; should handle file reading errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Error Handling and Edge Cases &gt; should handle repository discovery failures" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Error Handling and Edge Cases &gt; should handle malformed code analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Error Handling and Edge Cases &gt; should handle empty or minimal repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Performance and Optimization &gt; should handle large repository analysis efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Performance and Optimization &gt; should optimize analysis for different modes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.fixed.test.ts" name="AnalysisEngine Advanced Features (Fixed) &gt; Performance and Optimization &gt; should handle concurrent analysis requests" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" timestamp="2025-09-21T23:33:31.190Z" hostname="AlexJ-N501VW" tests="13" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Comprehensive Mode Analysis &gt; should perform advanced analysis in comprehensive mode" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Comprehensive Mode Analysis &gt; should not perform advanced analysis in quick mode" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Comprehensive Mode Analysis &gt; should not perform advanced analysis in standard mode" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Security Integration &gt; should add high-severity security issues to potential issues" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Security Integration &gt; should add security recommendations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Code Quality Integration &gt; should add high-severity quality issues to potential issues" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Code Quality Integration &gt; should update complexity metrics" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Architectural Pattern Integration &gt; should detect and add architectural patterns" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Architectural Pattern Integration &gt; should add architectural recommendations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Performance and Error Handling &gt; should handle file read errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Performance and Error Handling &gt; should handle malformed JSON in package.json" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Performance and Error Handling &gt; should maintain performance with large repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/analysisEngine.advanced.test.ts" name="AnalysisEngine Advanced Features Integration &gt; Batch Analysis with Advanced Features &gt; should perform advanced analysis on multiple repositories" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" timestamp="2025-09-21T23:33:31.197Z" hostname="AlexJ-N501VW" tests="17" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Mock Infrastructure Validation &gt; should have working mock functions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Mock Infrastructure Validation &gt; should be able to call mock functions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Batch Processing Infrastructure &gt; should create AnalysisEngine instance" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Batch Processing Infrastructure &gt; should have batch processing methods" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Batch Processing Infrastructure &gt; should handle analysis options for batch processing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Repository Discovery Mock Tests &gt; should work with mock repository discovery" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Repository Discovery Mock Tests &gt; should handle multiple repository paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Repository Discovery Mock Tests &gt; should handle batch analysis options conversion" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Error Handling Tests &gt; should handle repository discovery errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Error Handling Tests &gt; should handle file system errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Error Handling Tests &gt; should handle code analysis errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Batch Processing Workflow Tests &gt; should handle sequential repository processing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Batch Processing Workflow Tests &gt; should handle parallel repository processing simulation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Batch Processing Workflow Tests &gt; should handle mixed success and failure scenarios" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Performance and Resource Management &gt; should handle large batch sizes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Performance and Resource Management &gt; should handle resource-constrained scenarios" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.fixed.test.ts" name="AnalysisEngine Batch Processing (Fixed) &gt; Performance and Resource Management &gt; should handle timeout scenarios" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/AnalysisEngine.batch.test.ts" timestamp="2025-09-21T23:33:31.205Z" hostname="AlexJ-N501VW" tests="4" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.test.ts" name="AnalysisEngine - Batch Processing &gt; should analyze multiple repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.test.ts" name="AnalysisEngine - Batch Processing &gt; should handle errors in repository analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.test.ts" name="AnalysisEngine - Batch Processing &gt; should generate combined insights for multiple repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.batch.test.ts" name="AnalysisEngine - Batch Processing &gt; should analyze multiple repositories with queue" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" timestamp="2025-09-21T23:33:31.208Z" hostname="AlexJ-N501VW" tests="13" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Mock Infrastructure Validation &gt; should have working mock functions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Mock Infrastructure Validation &gt; should be able to call mock functions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Mock Infrastructure Validation &gt; should be able to reset mocks" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Engine Instantiation &gt; should create AnalysisEngine instance" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Engine Instantiation &gt; should have required methods" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Basic Functionality Tests &gt; should handle basic analysis options" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Basic Functionality Tests &gt; should handle multiple repository paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Basic Functionality Tests &gt; should handle output format validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Mock Integration Tests &gt; should work with mock discovery options" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Mock Integration Tests &gt; should work with mock repository discovery" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Mock Integration Tests &gt; should work with mock code structure analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Mock Integration Tests &gt; should work with mock token analysis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.fixed.test.ts" name="Analysis Engine (Fixed) &gt; Mock Integration Tests &gt; should work with mock file system operations" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/AnalysisEngine.test.ts" timestamp="2025-09-21T23:33:31.217Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.test.ts" name="Analysis Engine &gt; analyzeRepository &gt; should analyze a repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.test.ts" name="Analysis Engine &gt; analyzeMultipleRepositories &gt; should analyze multiple repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.test.ts" name="Analysis Engine &gt; analyzeMultipleRepositories &gt; should handle errors in individual repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.test.ts" name="Analysis Engine &gt; generateSynopsis &gt; should generate JSON synopsis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.test.ts" name="Analysis Engine &gt; generateSynopsis &gt; should generate Markdown synopsis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.test.ts" name="Analysis Engine &gt; generateSynopsis &gt; should generate HTML synopsis" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/AnalysisEngine.test.ts" name="Analysis Engine &gt; generateSynopsis &gt; should throw error for unsupported format" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" timestamp="2025-09-21T23:33:31.220Z" hostname="AlexJ-N501VW" tests="10" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; JavaScript/TypeScript detection &gt; should detect function declarations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; JavaScript/TypeScript detection &gt; should detect class declarations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; JavaScript/TypeScript detection &gt; should count import statements" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; Python detection &gt; should detect function declarations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; Python detection &gt; should detect class declarations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; Python detection &gt; should count import statements" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; Java detection &gt; should detect method declarations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; Java detection &gt; should detect class declarations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; Java detection &gt; should count import statements" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/codeStructureAnalyzer.test.ts" name="Code Structure Analyzer &gt; Generic detection &gt; should detect functions and classes in unknown languages" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" timestamp="2025-09-21T23:33:31.225Z" hostname="AlexJ-N501VW" tests="44" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Constructor and Initialization &gt; should initialize empty index when no path provided" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Constructor and Initialization &gt; should initialize empty index when file does not exist" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Constructor and Initialization &gt; should handle corrupted index file gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Constructor and Initialization &gt; should load valid index from disk" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Repository Management Edge Cases &gt; should handle duplicate repository additions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Repository Management Edge Cases &gt; should handle repository with empty languages/frameworks" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Repository Management Edge Cases &gt; should handle repository with special characters in name" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Repository Management Edge Cases &gt; should handle very long repository names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Repository Management Edge Cases &gt; should handle repository removal" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Repository Management Edge Cases &gt; should throw error when removing non-existent repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Search Functionality Edge Cases &gt; should handle empty search query" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Search Functionality Edge Cases &gt; should handle search with no matches" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Search Functionality Edge Cases &gt; should handle case-insensitive search" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Search Functionality Edge Cases &gt; should handle special characters in search" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Search Functionality Edge Cases &gt; should handle unicode in search" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Search Functionality Edge Cases &gt; should handle multiple languages in search" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Search Functionality Edge Cases &gt; should handle partial keyword matches" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Tag Management Edge Cases &gt; should handle duplicate tag additions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Tag Management Edge Cases &gt; should handle empty tag names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Tag Management Edge Cases &gt; should handle very long tag names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Tag Management Edge Cases &gt; should handle special characters in tag names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Tag Management Edge Cases &gt; should handle removing non-existent tag from repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Tag Management Edge Cases &gt; should handle removing tag from non-existent repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Tag Management Edge Cases &gt; should handle global tag with duplicate name" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Tag Management Edge Cases &gt; should handle removing non-existent global tag" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Similarity and Relationship Detection &gt; should handle finding similar repositories for non-existent ID" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Similarity and Relationship Detection &gt; should handle finding similar repositories with empty index" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Similarity and Relationship Detection &gt; should handle similarity with repositories having no common attributes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Similarity and Relationship Detection &gt; should handle combination suggestions with non-existent IDs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Similarity and Relationship Detection &gt; should handle combination suggestions with single repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Similarity and Relationship Detection &gt; should handle combination suggestions with duplicate IDs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Persistence and File Operations &gt; should handle file system errors during save" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Persistence and File Operations &gt; should handle invalid JSON in loaded index" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Persistence and File Operations &gt; should handle missing fields in loaded index" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Persistence and File Operations &gt; should handle concurrent save operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Performance and Large Datasets &gt; should handle large number of repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Performance and Large Datasets &gt; should handle large number of tags" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Performance and Large Datasets &gt; should handle search with large result sets" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Data Validation and Sanitization &gt; should handle null/undefined values in repository data" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Data Validation and Sanitization &gt; should handle malformed repository data" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Data Validation and Sanitization &gt; should handle XSS attempts in repository data" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Index Statistics and Metadata &gt; should provide accurate repository count" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Index Statistics and Metadata &gt; should provide accurate tag count" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.comprehensive.test.ts" name="IndexSystem Comprehensive Tests &gt; Index Statistics and Metadata &gt; should update lastUpdated on modifications" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" timestamp="2025-09-21T23:33:31.252Z" hostname="AlexJ-N501VW" tests="13" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; calculateSimilarity &gt; should calculate high similarity for repositories with shared languages and frameworks" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; calculateSimilarity &gt; should identify fork relationships for similar names and high similarity" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; calculateSimilarity &gt; should identify dependency relationships for library-application pairs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; calculateSimilarity &gt; should calculate low similarity for unrelated repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; suggestCombinations &gt; should suggest full-stack combinations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; suggestCombinations &gt; should suggest microservices combinations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; suggestCombinations &gt; should suggest library ecosystem combinations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; suggestCombinations &gt; should sort suggestions by compatibility score" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; suggestCombinations &gt; should limit suggestions to top 10" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; repository type detection &gt; should correctly identify frontend repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; repository type detection &gt; should correctly identify backend repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; repository type detection &gt; should correctly identify mobile repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.relationship.test.ts" name="IndexSystem Relationship Functionality &gt; repository type detection &gt; should correctly identify library repositories" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/IndexSystem.test.ts" timestamp="2025-09-21T23:33:31.258Z" hostname="AlexJ-N501VW" tests="17" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; addRepository &gt; should add a repository to the index" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; addRepository &gt; should update existing repository if path matches" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; updateRepository &gt; should update an existing repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; updateRepository &gt; should throw error if repository not found" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; searchRepositories &gt; should search repositories by language" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; searchRepositories &gt; should search repositories by framework" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; searchRepositories &gt; should search repositories by keyword" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; searchRepositories &gt; should combine multiple search criteria" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; findSimilarRepositories &gt; should find similar repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; findSimilarRepositories &gt; should throw error if repository not found" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; suggestCombinations &gt; should suggest combinations of repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; suggestCombinations &gt; should throw error if repository not found" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; tag management &gt; should add a tag to a repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; tag management &gt; should remove a tag from a repository" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; tag management &gt; should add a global tag" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; tag management &gt; should remove a global tag and from all repositories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/IndexSystem.test.ts" name="IndexSystem &gt; persistence &gt; should save and load index from disk" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" timestamp="2025-09-21T23:33:31.267Z" hostname="AlexJ-N501VW" tests="10" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; countTokens &gt; should count tokens in simple text" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; countTokens &gt; should handle empty text" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; countTokens &gt; should handle text with punctuation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; countTokens &gt; should handle text with multiple spaces" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; sampleText &gt; should return original text if within token limit" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; sampleText &gt; should handle empty text" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; sampleText &gt; should sample from start" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; sampleText &gt; should sample from end" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; sampleText &gt; should sample from middle" time="0">
        </testcase>
        <testcase classname="packages/backend/src/core/__tests__/tokenAnalyzer.test.ts" name="Token Analyzer &gt; sampleText &gt; should perform smart sampling" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" timestamp="2025-09-21T23:33:31.273Z" hostname="AlexJ-N501VW" tests="9" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; constructor &gt; should throw error if API key is not provided" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; constructor &gt; should initialize with default model if not provided" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; constructor &gt; should use provided model if specified" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; name &gt; should return correct provider name" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; formatPrompt &gt; should format prompt with project information" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; formatPrompt &gt; should handle optional fields" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; analyze &gt; should call Claude API and return formatted response" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; analyze &gt; should handle API errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ClaudeProvider.test.ts" name="ClaudeProvider &gt; analyze &gt; should handle non-Axios errors" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" timestamp="2025-09-21T23:33:31.278Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; constructor &gt; should throw error if API key is not provided" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; constructor &gt; should initialize with default model if not provided" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; constructor &gt; should use provided model if specified" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; name &gt; should return correct provider name" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; formatPrompt &gt; should format prompt with project information" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; formatPrompt &gt; should handle optional fields" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; analyze &gt; should call Gemini API and return formatted response" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; analyze &gt; should handle content filtering" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; analyze &gt; should handle empty candidates" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; analyze &gt; should handle API errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/GeminiProvider.test.ts" name="GeminiProvider &gt; analyze &gt; should handle non-Axios errors" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/providers/__tests__/LLMProvider.test.ts" timestamp="2025-09-21T23:33:31.286Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/providers/__tests__/LLMProvider.test.ts" name="LLMProvider &gt; constructor &gt; should initialize with provided config" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/LLMProvider.test.ts" name="LLMProvider &gt; constructor &gt; should throw error if config is not provided" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/LLMProvider.test.ts" name="LLMProvider &gt; validateAndNormalizeConfig &gt; should apply default values for missing config properties" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/LLMProvider.test.ts" name="LLMProvider &gt; validateAndNormalizeConfig &gt; should preserve provided values" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/LLMProvider.test.ts" name="LLMProvider &gt; abstract methods &gt; concrete implementation should provide name property" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/LLMProvider.test.ts" name="LLMProvider &gt; abstract methods &gt; concrete implementation should implement formatPrompt" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/LLMProvider.test.ts" name="LLMProvider &gt; abstract methods &gt; concrete implementation should implement analyze" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/providers/__tests__/MockProvider.test.ts" timestamp="2025-09-21T23:33:31.290Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; constructor &gt; should initialize with default values" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; constructor &gt; should initialize with custom options" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; name &gt; should return correct provider name" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; formatPrompt &gt; should format prompt with project name" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; analyze &gt; should return mock response" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; analyze &gt; should respect configured delay" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; analyze &gt; should throw error when configured to fail" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; configuration methods &gt; setMockResponse should update the response" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; configuration methods &gt; setMockTokenUsage should update the token usage" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; configuration methods &gt; setShouldFail should control failure behavior" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/MockProvider.test.ts" name="MockProvider &gt; configuration methods &gt; setDelay should update the delay" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" timestamp="2025-09-21T23:33:31.299Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; fetchModels &gt; should fetch and sort models from OpenRouter API" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; fetchModels &gt; should handle API errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; fetchModels &gt; should filter out models without id or name" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; validateModel &gt; should validate existing model successfully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; validateModel &gt; should return invalid for non-existent model" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; validateModel &gt; should handle API errors during validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; getModelRecommendations &gt; should return specific recommendations for Claude models" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; getModelRecommendations &gt; should return specific recommendations for GPT models" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; getModelRecommendations &gt; should return default recommendations for unknown models" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; getModelRecommendations &gt; should return partial match recommendations for model families" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/OpenRouterProvider.test.ts" name="OpenRouterProvider Model Selection &gt; analyze with model-specific configuration &gt; should use configured model in API request" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" timestamp="2025-09-21T23:33:31.304Z" hostname="AlexJ-N501VW" tests="21" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Status Management &gt; should initialize providers with correct default status" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Status Management &gt; should update status when provider is configured" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Status Management &gt; should clear errors when configuration changes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Health Checking &gt; should perform health check for mock provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Health Checking &gt; should fail health check for unconfigured provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Health Checking &gt; should fail health check for unregistered provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Health Checking &gt; should measure response time during health check" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Testing &gt; should test mock provider successfully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Testing &gt; should fail test for unconfigured provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Error Categorization &gt; should categorize authentication errors correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Error Categorization &gt; should categorize rate limit errors correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Error Categorization &gt; should categorize network errors correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Recovery Mechanisms &gt; should not attempt recovery for non-recoverable errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Recovery Mechanisms &gt; should attempt recovery for rate limit errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Bulk Operations &gt; should test all providers" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Bulk Operations &gt; should get health status for all providers" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Bulk Operations &gt; should identify providers needing attention" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Statistics &gt; should provide accurate statistics" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Error State Management &gt; should clear provider errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Information &gt; should include enhanced information in getAllProviderInfo" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.enhanced.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Information &gt; should show configured status correctly" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/providers/__tests__/ProviderRegistry.models.test.ts" timestamp="2025-09-21T23:33:31.316Z" hostname="AlexJ-N501VW" tests="5" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.models.test.ts" name="ProviderRegistry Model Selection &gt; fetchProviderModels &gt; should throw error when provider not found" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.models.test.ts" name="ProviderRegistry Model Selection &gt; fetchProviderModels &gt; should handle OpenRouter provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.models.test.ts" name="ProviderRegistry Model Selection &gt; validateProviderModel &gt; should throw error for invalid provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.models.test.ts" name="ProviderRegistry Model Selection &gt; validateProviderModel &gt; should handle OpenRouter provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.models.test.ts" name="ProviderRegistry Model Selection &gt; provider configuration &gt; should set and get provider config" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" timestamp="2025-09-21T23:33:31.319Z" hostname="AlexJ-N501VW" tests="23" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Status Management &gt; should initialize providers with correct default status" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Status Management &gt; should update status when provider is configured" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Status Management &gt; should clear errors when configuration changes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Health Checking &gt; should perform health check for mock provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Health Checking &gt; should fail health check for unconfigured provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Health Checking &gt; should fail health check for unregistered provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Health Checking &gt; should measure response time during health check" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Testing &gt; should test mock provider successfully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Testing &gt; should fail test for unconfigured provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Testing &gt; should update status to testing during test" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Error Categorization &gt; should categorize authentication errors correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Error Categorization &gt; should categorize rate limit errors correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Error Categorization &gt; should categorize network errors correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Recovery Mechanisms &gt; should not attempt recovery for non-recoverable errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Recovery Mechanisms &gt; should attempt recovery for rate limit errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Recovery Mechanisms &gt; should attempt recovery for network errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Bulk Operations &gt; should test all providers" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Bulk Operations &gt; should get health status for all providers" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Bulk Operations &gt; should identify providers needing attention" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Statistics &gt; should provide accurate statistics" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Error State Management &gt; should clear provider errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Information &gt; should include enhanced information in getAllProviderInfo" time="0">
        </testcase>
        <testcase classname="packages/backend/src/providers/__tests__/ProviderRegistry.test.ts" name="ProviderRegistry - Enhanced Status Tracking &gt; Provider Information &gt; should show configured status correctly" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/config.service.basic.test.ts" timestamp="2025-09-21T23:33:31.333Z" hostname="AlexJ-N501VW" tests="5" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/config.service.basic.test.ts" name="ConfigurationService - Basic Tests &gt; initialization &gt; should initialize successfully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.basic.test.ts" name="ConfigurationService - Basic Tests &gt; user preferences &gt; should get user preferences" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.basic.test.ts" name="ConfigurationService - Basic Tests &gt; user preferences &gt; should validate valid preferences" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.basic.test.ts" name="ConfigurationService - Basic Tests &gt; workspace management &gt; should create workspace configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.basic.test.ts" name="ConfigurationService - Basic Tests &gt; export functionality &gt; should export configuration as JSON string" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/config.service.simple.test.ts" timestamp="2025-09-21T23:33:31.335Z" hostname="AlexJ-N501VW" tests="5" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/config.service.simple.test.ts" name="ConfigurationService &gt; basic functionality &gt; should initialize without errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.simple.test.ts" name="ConfigurationService &gt; basic functionality &gt; should get user preferences" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.simple.test.ts" name="ConfigurationService &gt; basic functionality &gt; should validate preferences structure" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.simple.test.ts" name="ConfigurationService &gt; basic functionality &gt; should create workspace configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.simple.test.ts" name="ConfigurationService &gt; basic functionality &gt; should export configuration" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/config.service.test.ts" timestamp="2025-09-21T23:33:31.338Z" hostname="AlexJ-N501VW" tests="18" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; initialize &gt; should create configuration directory and default files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; initialize &gt; should not overwrite existing files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; getUserPreferences &gt; should return user preferences from file" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; getUserPreferences &gt; should return defaults if file read fails" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; getUserPreferences &gt; should merge with defaults for missing fields" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; saveUserPreferences &gt; should save valid preferences" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; saveUserPreferences &gt; should create backup before saving" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; saveUserPreferences &gt; should throw error for invalid preferences" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; updatePreferences &gt; should update specific preference section" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; validateUserPreferences &gt; should validate correct preferences" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; validateUserPreferences &gt; should return errors for invalid preferences" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; workspace management &gt; should save workspace configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; workspace management &gt; should update workspace configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; workspace management &gt; should delete workspace configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; backup and restore &gt; should create configuration backup" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; backup and restore &gt; should restore from backup" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; import and export &gt; should export configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/config.service.test.ts" name="ConfigurationService &gt; import and export &gt; should import configuration" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" timestamp="2025-09-21T23:33:31.345Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Basic Functionality &gt; should create error service instance" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Basic Functionality &gt; should create path error messages without throwing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Basic Functionality &gt; should create network error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Timeout and Cancellation Messages &gt; should create timeout error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Timeout and Cancellation Messages &gt; should create operation cancelled messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Security Error Messages &gt; should create null byte error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Security Error Messages &gt; should create control characters error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Permission Error Messages &gt; should create permission check error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Permission Error Messages &gt; should create read-only file error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Input Validation Messages &gt; should create invalid input error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.fixed.test.ts" name="ErrorMessageService - Fixed &gt; Input Validation Messages &gt; should create not directory error messages" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/error-message.service.test.ts" timestamp="2025-09-21T23:33:31.351Z" hostname="AlexJ-N501VW" tests="33" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for path not found error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for invalid format error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for path too long error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for reserved name error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for invalid characters error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for permission denied error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for system path access error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for timeout error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for cancelled operation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should handle multiple errors by prioritizing the most important" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create generic error message for unknown error codes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should handle empty errors array" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for null byte error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for control characters error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for invalid component ending error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for permission check error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for Windows permission check error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for read-only file error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for ownership info error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for invalid input error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create user-friendly message for not directory error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createNetworkErrorMessage &gt; should create user-friendly message for UNC path network error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createNetworkErrorMessage &gt; should create user-friendly message for general network error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; createNetworkErrorMessage &gt; should handle network error without details" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Platform-specific suggestions &gt; should include platform-appropriate suggestions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Error message quality &gt; should provide actionable suggestions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Error message quality &gt; should provide clear and concise messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Error message quality &gt; should include helpful learn more URLs when appropriate" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Error message quality &gt; should provide detailed explanations in details field" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Error message quality &gt; should provide Windows-specific guidance for Windows paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Error message quality &gt; should include specific examples in suggestions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Error message quality &gt; should provide step-by-step instructions for complex issues" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/error-message.service.test.ts" name="ErrorMessageService &gt; Error message quality &gt; should handle network path errors with specific network guidance" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/export.service.test.ts" timestamp="2025-09-21T23:33:31.376Z" hostname="AlexJ-N501VW" tests="12" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportAnalysis &gt; exports analysis to JSON format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportAnalysis &gt; exports analysis to Markdown format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportAnalysis &gt; exports analysis to HTML format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportAnalysis &gt; throws error for unsupported format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportBatchAnalysis &gt; exports batch analysis to JSON format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportBatchAnalysis &gt; exports batch analysis to Markdown format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportBatchAnalysis &gt; exports batch analysis to HTML format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportBatchAnalysis &gt; handles batch analysis without combined insights" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; exportBatchAnalysis &gt; throws error for unsupported format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; format-specific content validation &gt; JSON export contains all required fields" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; format-specific content validation &gt; Markdown export contains proper formatting" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/export.service.test.ts" name="ExportService &gt; format-specific content validation &gt; HTML export contains proper structure and styling" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/log-management.service.test.ts" timestamp="2025-09-21T23:33:31.383Z" hostname="AlexJ-N501VW" tests="18" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log Rotation and Cleanup &gt; should remove files older than maxAge" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log Rotation and Cleanup &gt; should remove excess files beyond maxFiles limit" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log Rotation and Cleanup &gt; should remove files when total size exceeds maxSize" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log Rotation and Cleanup &gt; should handle cleanup errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log Retention Policy Enforcement &gt; should update retention policy and apply changes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log Retention Policy Enforcement &gt; should enforce retention policy during cleanup" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log File Monitoring and Alerts &gt; should emit alert when file size exceeds threshold" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log File Monitoring and Alerts &gt; should emit alert when disk usage exceeds threshold" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log File Monitoring and Alerts &gt; should emit cleanup failed alert on error" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log Directory Statistics &gt; should calculate correct directory statistics" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log Directory Statistics &gt; should handle empty directory" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Service Lifecycle &gt; should start and stop service correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Service Lifecycle &gt; should not start service twice" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Service Lifecycle &gt; should handle stop when not running" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log File Identification &gt; should identify log files correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Log File Identification &gt; should sort log files by modification time" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Size Parsing and Formatting &gt; should parse size strings correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/log-management.service.test.ts" name="LogManagementService &gt; Size Parsing and Formatting &gt; should format bytes correctly" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" timestamp="2025-09-21T23:33:31.398Z" hostname="AlexJ-N501VW" tests="15" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Middleware Functionality &gt; should add request ID to request object" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Middleware Functionality &gt; should call next middleware" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Middleware Functionality &gt; should register finish and error event listeners" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Middleware Functionality &gt; should handle finish event without throwing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Middleware Functionality &gt; should handle error event without throwing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Request ID Generation &gt; should generate unique request IDs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Request ID Generation &gt; should generate UUID format request IDs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Response Handling &gt; should handle different status codes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Response Handling &gt; should override res.send method" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; Response Handling &gt; should override res.json method" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; HTTP Methods &gt; should handle GET requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; HTTP Methods &gt; should handle POST requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; HTTP Methods &gt; should handle PUT requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; HTTP Methods &gt; should handle DELETE requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http-simple.service.test.ts" name="HTTP Request/Response Logging - Simplified &gt; HTTP Methods &gt; should handle PATCH requests" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/logger-http.service.test.ts" timestamp="2025-09-21T23:33:31.404Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Request Logging &gt; should log incoming HTTP requests with correlation ID" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Request Logging &gt; should sanitize sensitive data in request headers" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Request Logging &gt; should sanitize sensitive data in query parameters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Request Logging &gt; should sanitize sensitive data in request body" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Response Logging &gt; should log successful responses as info" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Response Logging &gt; should log client error responses as warnings" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Response Logging &gt; should log server error responses as errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Error Handling &gt; should log response errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Different HTTP Methods &gt; should handle POST requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Different HTTP Methods &gt; should handle PUT requests" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-http.service.test.ts" name="HTTP Request/Response Logging &gt; Different HTTP Methods &gt; should handle DELETE requests" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" timestamp="2025-09-21T23:33:31.409Z" hostname="AlexJ-N501VW" tests="14" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Console Output &gt; should create logger with console output" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Console Output &gt; should create logger with non-colorized console output" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; File Output &gt; should create logger with file output configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; File Output &gt; should handle file rotation configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; External Output &gt; should create logger with external output configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Multiple Outputs &gt; should create logger with multiple output destinations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Multiple Outputs &gt; should log to multiple destinations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Configuration Validation &gt; should handle empty outputs array" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Configuration Validation &gt; should handle mixed output types" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Format Configuration &gt; should support JSON format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Format Configuration &gt; should support TEXT format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Format Configuration &gt; should log in different formats" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Log Level Configuration &gt; should respect log level configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger-outputs.service.test.ts" name="Logger Output Destinations &gt; Log Level Configuration &gt; should log at appropriate levels" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/logger.service.test.ts" timestamp="2025-09-21T23:33:31.416Z" hostname="AlexJ-N501VW" tests="13" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logger Class &gt; should create logger with default configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logger Class &gt; should create logger with custom configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logger Class &gt; should generate unique request IDs" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logger Class &gt; should set and get request ID" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logger Class &gt; should update configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logging Methods &gt; should log debug messages with structured format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logging Methods &gt; should log info messages with metadata" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logging Methods &gt; should log warning messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Logging Methods &gt; should log error messages with error objects" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Data Sanitization &gt; should redact sensitive data when enabled" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; Data Sanitization &gt; should not redact data when disabled" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Logger Service &gt; File Configuration &gt; should handle file configuration without creating files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/logger.service.test.ts" name="Helper Functions &gt; should export helper functions" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/path-handler-cache.test.ts" timestamp="2025-09-21T23:33:31.422Z" hostname="AlexJ-N501VW" tests="18" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Configuration &gt; should initialize with default cache configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Configuration &gt; should allow custom cache configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Configuration &gt; should disable caching when configured" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Operations &gt; should cache path validations for existing paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Operations &gt; should not cache failed validations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Operations &gt; should generate different cache keys for different paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Operations &gt; should generate same cache key for same path with same options" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Invalidation &gt; should clear all cache entries" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Invalidation &gt; should invalidate specific path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Invalidation &gt; should invalidate paths by pattern" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Performance Monitoring &gt; should track hit rate correctly" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Performance Monitoring &gt; should track average validation time" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Performance Monitoring &gt; should perform cache maintenance" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Warm-up &gt; should warm up cache with provided paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Warm-up &gt; should handle warm-up failures gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Warm-up &gt; should skip warm-up when caching is disabled" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Memory Management &gt; should estimate memory usage" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-cache.test.ts" name="PathHandler Caching &gt; Cache Memory Management &gt; should respect maximum cache size" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/path-handler-performance.test.ts" timestamp="2025-09-21T23:33:31.432Z" hostname="AlexJ-N501VW" tests="12" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Single Path Validation Performance &gt; should validate paths within acceptable time limits" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Single Path Validation Performance &gt; should show performance improvement with caching" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Single Path Validation Performance &gt; should handle timeout scenarios gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Concurrent Path Validation Performance &gt; should handle concurrent validations efficiently" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Concurrent Path Validation Performance &gt; should maintain performance under load" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Cache Performance &gt; should demonstrate cache performance benefits" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Cache Performance &gt; should handle cache invalidation performance" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Memory Usage Performance &gt; should not leak memory during repeated validations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Memory Usage Performance &gt; should maintain reasonable cache memory usage" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Performance Regression Detection &gt; should detect performance regressions in path validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Performance Benchmarks &gt; should meet performance benchmarks for different path types" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler-performance.test.ts" name="PathHandler Performance &gt; Performance Benchmarks &gt; should generate performance report" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/path-handler.service.test.ts" timestamp="2025-09-21T23:33:31.439Z" hostname="AlexJ-N501VW" tests="55" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Singleton Pattern &gt; should return the same instance" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Normalization - Cross Platform &gt; should normalize forward slashes on Windows" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Normalization - Cross Platform &gt; should normalize backslashes on Unix-like systems" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Normalization - Cross Platform &gt; should handle empty or invalid paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Normalization - Cross Platform &gt; should normalize relative paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Windows-Specific Path Handling &gt; should handle UNC paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Windows-Specific Path Handling &gt; should normalize drive letters to uppercase" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Windows-Specific Path Handling &gt; should handle mixed path separators" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect Windows reserved names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect all Windows reserved names" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect invalid Windows characters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect all invalid Windows characters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect control characters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect null bytes in path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect trailing spaces and dots" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect paths that are too long" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should validate drive letter format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should detect invalid drive letter format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should validate UNC path format" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should warn about very long paths on Unix systems" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should warn about long path components" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Format Validation &gt; should handle mixed path separators in validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Existence and Metadata &gt; should detect existing files" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Existence and Metadata &gt; should detect existing directories" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Path Existence and Metadata &gt; should handle non-existing paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should check read permissions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should check write permissions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should check execute permissions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should check all permissions when available" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should handle non-existent paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should get file ownership on Unix-like systems" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should handle Windows permission checks" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should detect Windows system paths" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should detect read-only files on Windows" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should provide detailed error messages for Windows permission issues" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should handle permission check errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should handle ownership information errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Permission Checking &gt; should detect hidden files on Windows" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Relative Path Resolution &gt; should resolve relative paths with base path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Relative Path Resolution &gt; should resolve relative paths without base path" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Relative Path Resolution &gt; should handle path resolution errors" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Error Handling &gt; should handle validation errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Error Handling &gt; should provide helpful error messages" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should complete validation within timeout" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should report progress during validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should handle operation cancellation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should timeout long-running operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should support timeout in permission checking" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should handle permission check cancellation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should create abort controller" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should handle pre-aborted signals" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Timeout and Progress Handling &gt; should provide detailed progress information" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Cross-Platform Compatibility &gt; should work on Linux" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Cross-Platform Compatibility &gt; should work on macOS" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/path-handler.service.test.ts" name="PathHandler Service &gt; Cross-Platform Compatibility &gt; should work on Windows" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/performance-monitor.test.ts" timestamp="2025-09-21T23:33:31.461Z" hostname="AlexJ-N501VW" tests="17" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Operation Timing &gt; should track operation timing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Operation Timing &gt; should handle failed operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Operation Timing &gt; should return null for unknown operations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Metrics Recording &gt; should record custom metrics" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Metrics Recording &gt; should filter metrics by time window" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Resource Usage &gt; should capture current resource usage" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Resource Usage &gt; should track resource usage history" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Performance Statistics &gt; should calculate operation statistics" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Performance Statistics &gt; should handle empty statistics" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Performance Baselines &gt; should create and update baselines" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Performance Regression Detection &gt; should detect performance regressions" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Configuration &gt; should respect sample rate" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Configuration &gt; should disable monitoring when configured" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Configuration &gt; should update configuration" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Performance Report &gt; should generate comprehensive performance report" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Memory Management &gt; should limit metrics history" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/performance-monitor.test.ts" name="PerformanceMonitor &gt; Memory Management &gt; should clear all data" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/services/__tests__/relationship.service.test.ts" timestamp="2025-09-21T23:33:31.469Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; generateRelationshipGraph &gt; should generate a relationship graph with nodes, edges, and clusters" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; generateRelationshipGraph &gt; should filter repositories when IDs are provided" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; generateRelationshipGraph &gt; should apply force-directed layout positions to nodes" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; analyzeIntegrationOpportunities &gt; should identify full-stack opportunities" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; analyzeIntegrationOpportunities &gt; should identify microservices opportunities" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; analyzeIntegrationOpportunities &gt; should identify library ecosystem opportunities" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; analyzeIntegrationOpportunities &gt; should identify mobile-backend opportunities" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; analyzeIntegrationOpportunities &gt; should sort opportunities by priority" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; generateRelationshipInsights &gt; should generate comprehensive relationship insights" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; generateRelationshipInsights &gt; should filter insights by repository IDs when provided" time="0">
        </testcase>
        <testcase classname="packages/backend/src/services/__tests__/relationship.service.test.ts" name="RelationshipService &gt; generateRelationshipInsights &gt; should calculate architectural patterns correctly" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/utils/__tests__/queue.test.ts" timestamp="2025-09-21T23:33:31.473Z" hostname="AlexJ-N501VW" tests="5" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/utils/__tests__/queue.test.ts" name="TaskQueue &gt; should process tasks sequentially with concurrency 1" time="0">
        </testcase>
        <testcase classname="packages/backend/src/utils/__tests__/queue.test.ts" name="TaskQueue &gt; should process tasks concurrently with concurrency &gt; 1" time="0">
        </testcase>
        <testcase classname="packages/backend/src/utils/__tests__/queue.test.ts" name="TaskQueue &gt; should handle task failures" time="0">
        </testcase>
        <testcase classname="packages/backend/src/utils/__tests__/queue.test.ts" name="TaskQueue &gt; should emit progress events" time="0">
        </testcase>
        <testcase classname="packages/backend/src/utils/__tests__/queue.test.ts" name="TaskQueue &gt; should handle task timeout" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/controllers/__tests__/export.controller.test.ts" timestamp="2025-09-21T23:33:31.475Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/controllers/__tests__/export.controller.test.ts" name="src/api/controllers/__tests__/export.controller.test.ts" time="0">
            <failure message="Transform failed with 1 error:
C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/controllers/__tests__/export.controller.test.ts:17:3: ERROR: Expected &quot;}&quot; but found &quot;;&quot;" type="Error">
Error: Transform failed with 1 error:
C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/controllers/__tests__/export.controller.test.ts:17:3: ERROR: Expected &quot;}&quot; but found &quot;;&quot;
  Plugin: vite:esbuild
  File: C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/backend/src/api/controllers/__tests__/export.controller.test.ts:17:3
  
  Expected &quot;}&quot; but found &quot;;&quot;
  15 |      readdir: vi.fn(),
  16 |      unlink: vi.fn(),
  17 |    };
     |     ^
  18 |  });
  19 |  
  
 ❯ failureErrorWithLog ../../node_modules/esbuild/lib/main.js:1467:15
 ❯ ../../node_modules/esbuild/lib/main.js:736:50
 ❯ responseCallbacks.&lt;computed&gt; ../../node_modules/esbuild/lib/main.js:603:9
 ❯ handleIncomingPacket ../../node_modules/esbuild/lib/main.js:658:12
 ❯ Socket.readFromStdout ../../node_modules/esbuild/lib/main.js:581:7
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/routes/__tests__/analysis-requests.test.ts" timestamp="2025-09-21T23:33:31.477Z" hostname="AlexJ-N501VW" tests="1" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/routes/__tests__/analysis-requests.test.ts" name="analysis requests routes &gt; should define GET routes" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts" timestamp="2025-09-21T23:33:31.478Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts" name="OpenRouter Model Selection Integration &gt; Model Fetching &gt; should return available models for OpenRouter" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts" name="OpenRouter Model Selection Integration &gt; Model Fetching &gt; should return 400 when API key is missing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts" name="OpenRouter Model Selection Integration &gt; Model Fetching &gt; should return 404 for non-existent provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts" name="OpenRouter Model Selection Integration &gt; Model Validation &gt; should validate existing model successfully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts" name="OpenRouter Model Selection Integration &gt; Model Validation &gt; should return validation failure for invalid model" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts" name="OpenRouter Model Selection Integration &gt; Model Recommendations &gt; should return model recommendations" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/openrouter-integration.test.ts" name="OpenRouter Model Selection Integration &gt; Provider Discovery &gt; should include OpenRouter in provider list with model-selection capability" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/routes/__tests__/providers-integration.test.ts" timestamp="2025-09-21T23:33:31.483Z" hostname="AlexJ-N501VW" tests="6" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/routes/__tests__/providers-integration.test.ts" name="Providers API Integration - Task 1 Requirements &gt; Requirement 1.1: OpenRouter should be listed as available provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers-integration.test.ts" name="Providers API Integration - Task 1 Requirements &gt; Requirement 1.2: System should display available models from OpenRouter" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers-integration.test.ts" name="Providers API Integration - Task 1 Requirements &gt; Requirement 7.1: Show status of all configured providers" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers-integration.test.ts" name="Providers API Integration - Task 1 Requirements &gt; Requirement 7.3: Clearly indicate provider capabilities" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers-integration.test.ts" name="Providers API Integration - Task 1 Requirements &gt; Provider status checking and availability validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers-integration.test.ts" name="Providers API Integration - Task 1 Requirements &gt; Provider configuration status in response" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/routes/__tests__/providers.models.test.ts" timestamp="2025-09-21T23:33:31.485Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; GET /api/providers/:name/models &gt; should fetch models for valid provider with API key" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; GET /api/providers/:name/models &gt; should return 404 for non-existent provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; GET /api/providers/:name/models &gt; should return 400 when API key is missing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; GET /api/providers/:name/models &gt; should handle provider errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; POST /api/providers/:name/models/:modelId/validate &gt; should validate model successfully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; POST /api/providers/:name/models/:modelId/validate &gt; should handle invalid model validation" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; POST /api/providers/:name/models/:modelId/validate &gt; should return 404 for non-existent provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; POST /api/providers/:name/models/:modelId/validate &gt; should return 400 when API key is missing" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; GET /api/providers/:name/models/:modelId/recommendations &gt; should get model recommendations successfully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; GET /api/providers/:name/models/:modelId/recommendations &gt; should return 404 for non-existent provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.models.test.ts" name="Provider Models API Routes &gt; GET /api/providers/:name/models/:modelId/recommendations &gt; should handle URL-encoded model IDs" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/backend/src/api/routes/__tests__/providers.test.ts" timestamp="2025-09-21T23:33:31.490Z" hostname="AlexJ-N501VW" tests="6" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.test.ts" name="providers routes &gt; simple test to verify structure" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.test.ts" name="providers routes &gt; GET /api/providers &gt; should return all registered providers with their status" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.test.ts" name="providers routes &gt; GET /api/providers &gt; should handle errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.test.ts" name="providers routes &gt; Requirements Validation &gt; should meet requirement 1.1 - OpenRouter listed as available provider" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.test.ts" name="providers routes &gt; Requirements Validation &gt; should meet requirement 7.1 - show status of all configured providers" time="0">
        </testcase>
        <testcase classname="packages/backend/src/api/routes/__tests__/providers.test.ts" name="providers routes &gt; Requirements Validation &gt; should meet requirement 7.3 - clearly indicate provider capabilities" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/test/performance.test.ts" timestamp="2025-09-21T23:33:31.492Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Performance Service &gt; should record metrics without significant overhead" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Performance Service &gt; should collect navigation timing correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Performance Service &gt; should track component render performance" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Lazy Loading Performance &gt; should handle large datasets efficiently" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Lazy Loading Performance &gt; should handle virtual scrolling efficiently" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Performance Optimization Hooks &gt; should debounce function calls effectively" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Performance Optimization Hooks &gt; should throttle function calls effectively" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Performance Optimization Hooks &gt; should measure render performance accurately" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Bundle Size and Code Splitting &gt; should load chunks efficiently" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Bundle Size and Code Splitting &gt; should handle multiple concurrent chunk loads" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance.test.ts" name="Frontend Performance Tests &gt; Memory Usage &gt; should not leak memory during repeated operations" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/__tests__/PathInput.basic.test.tsx" timestamp="2025-09-21T23:33:31.498Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.basic.test.tsx" name="PathInput Basic Tests &gt; should render with basic props" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.basic.test.tsx" name="PathInput Basic Tests &gt; should show required indicator when required" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.basic.test.tsx" name="PathInput Basic Tests &gt; should display the current value" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.basic.test.tsx" name="PathInput Basic Tests &gt; should show format help button when showFormatHints is true" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.basic.test.tsx" name="PathInput Basic Tests &gt; should show validate button when validateOnChange is false" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.basic.test.tsx" name="PathInput Basic Tests &gt; should show browse button" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.basic.test.tsx" name="PathInput Basic Tests &gt; should have proper accessibility attributes" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" timestamp="2025-09-21T23:33:31.507Z" hostname="AlexJ-N501VW" tests="16" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Real-time Validation &gt; should validate path on input change with debouncing" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Real-time Validation &gt; should show validation errors for invalid paths" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Real-time Validation &gt; should show loading state during validation" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Real-time Validation &gt; should handle validation timeout" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Format Hints &gt; should show format hints when requested" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Format Hints &gt; should hide format hints when toggled" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Windows-specific Path Handling &gt; should handle Windows backslash paths" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Windows-specific Path Handling &gt; should handle Windows forward slash paths" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Windows-specific Path Handling &gt; should handle UNC paths" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Windows-specific Path Handling &gt; should detect reserved names" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; User Experience &gt; should provide visual feedback for validation states" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; User Experience &gt; should show error state for invalid paths" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; User Experience &gt; should disable validation when validateOnChange is false" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; User Experience &gt; should trigger manual validation when button is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Accessibility &gt; should have proper ARIA labels and descriptions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/__tests__/PathInput.integration.test.tsx" name="PathInput Integration Tests &gt; Accessibility &gt; should be keyboard navigable" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/hooks/__tests__/useAnalysisRequests.test.ts" timestamp="2025-09-21T23:33:31.514Z" hostname="AlexJ-N501VW" tests="4" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/hooks/__tests__/useAnalysisRequests.test.ts" name="useAnalysisRequests &gt; should fetch requests and stats on mount" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useAnalysisRequests.test.ts" name="useAnalysisRequests &gt; should handle fetch errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useAnalysisRequests.test.ts" name="useAnalysisRequests &gt; should refresh requests" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useAnalysisRequests.test.ts" name="useAnalysisRequests &gt; should fetch a specific request" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" timestamp="2025-09-21T23:33:31.517Z" hostname="AlexJ-N501VW" tests="12" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; fetchProviderModels &gt; should fetch models for OpenRouter provider" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; fetchProviderModels &gt; should return empty array when API call fails" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; fetchProviderModels &gt; should return empty array when response is null" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; validateProviderModel &gt; should validate model successfully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; validateProviderModel &gt; should handle validation failure" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; validateProviderModel &gt; should handle API errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; validateProviderModel &gt; should handle null response" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; getModelRecommendations &gt; should get model recommendations successfully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; getModelRecommendations &gt; should return empty object when API call fails" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; getModelRecommendations &gt; should return empty object when response is null" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; loading states &gt; should include model validation loading in overall loading state" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.models.test.ts" name="useProviders Model Selection &gt; error handling &gt; should aggregate errors from all API calls" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/hooks/__tests__/useProviders.test.tsx" timestamp="2025-09-21T23:33:31.522Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.test.tsx" name="useProviders &gt; should initialize with empty providers and no loading/error state" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.test.tsx" name="useProviders &gt; should fetch providers successfully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.test.tsx" name="useProviders &gt; should handle fetch providers error" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.test.tsx" name="useProviders &gt; should test provider successfully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.test.tsx" name="useProviders &gt; should handle test provider error" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.test.tsx" name="useProviders &gt; should fetch provider models successfully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useProviders.test.tsx" name="useProviders &gt; should handle fetch provider models error" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/hooks/__tests__/useRetry.test.tsx" timestamp="2025-09-21T23:33:31.525Z" hostname="AlexJ-N501VW" tests="6" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/hooks/__tests__/useRetry.test.tsx" name="useRetry &gt; should be defined" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useRetry.test.tsx" name="useRetry &gt; should return an object with expected properties" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useRetry.test.tsx" name="useRetry &gt; should handle retry options" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useRetry.test.tsx" name="useRetry &gt; should handle retry state structure" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useRetry.test.tsx" name="useRetry &gt; should handle sleep function" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useRetry.test.tsx" name="useRetry &gt; should handle error scenarios" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/hooks/__tests__/useToast.test.tsx" timestamp="2025-09-21T23:33:31.527Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; throws error when used outside provider" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; shows success toast" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; shows error toast" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; shows warning toast" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; shows info toast" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; shows multiple toasts" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; auto-removes success toasts after duration" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; does not auto-remove error toasts" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; removes toast when close button is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; clears all toasts" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/hooks/__tests__/useToast.test.tsx" name="useToast &gt; handles toast with action" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/services/__tests__/errorMessages.test.ts" timestamp="2025-09-21T23:33:31.533Z" hostname="AlexJ-N501VW" tests="33" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create error message for PATH_NOT_FOUND" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create error message for PATH_INVALID_FORMAT" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create error message for READ_PERMISSION_DENIED" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should create error message for TIMEOUT_ERROR" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should handle unknown error codes" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should handle empty errors array" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should combine suggestions from multiple sources" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should limit suggestions to avoid overwhelming user" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createPathErrorMessage &gt; should include error details when multiple errors exist" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createWarningMessage &gt; should create warning message for PATH_LENGTH_WARNING" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createWarningMessage &gt; should return null for empty warnings array" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createWarningMessage &gt; should handle unknown warning codes" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createNetworkErrorMessage &gt; should create UNC path error message" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createNetworkErrorMessage &gt; should create generic network error message" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; createTimeoutErrorMessage &gt; should create timeout error message" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; getPlatformSpecificSuggestions &gt; should return Windows-specific suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; getPlatformSpecificSuggestions &gt; should return macOS-specific suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; getPlatformSpecificSuggestions &gt; should return Linux-specific suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; getPlatformSpecificErrorGuidance &gt; should return Windows-specific guidance for PATH_NOT_FOUND" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; getPlatformSpecificErrorGuidance &gt; should return macOS-specific guidance for READ_PERMISSION_DENIED" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; getPlatformSpecificErrorGuidance &gt; should return generic guidance for unknown error codes" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; getCategoryColor &gt; should return correct colors for different categories" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; getSeverityColor &gt; should return correct colors for different severities" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should provide clear and actionable error messages" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should provide platform-appropriate suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should provide contextual error messages based on path type" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should provide helpful learn more URLs for relevant errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should handle new permission-related error codes" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should handle file system and access errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should handle VERY_LONG_PATH warning" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should provide platform-specific guidance for new error codes" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should provide actionable suggestions for all error types" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/errorMessages.test.ts" name="ErrorMessageService &gt; Error message accuracy and clarity &gt; should provide clear error categorization" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/services/__tests__/websocket.test.ts" timestamp="2025-09-21T23:33:31.544Z" hostname="AlexJ-N501VW" tests="9" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should connect to WebSocket server" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should disconnect from WebSocket server" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should subscribe to analysis progress" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should handle connect event" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should handle disconnect event" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should handle analysis progress event" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should handle analysis complete event" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should handle batch analysis progress event" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/services/__tests__/websocket.test.ts" name="WebSocketService &gt; should handle batch analysis complete event" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/test/accessibility/a11y.test.tsx" timestamp="2025-09-21T23:33:31.550Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/test/accessibility/a11y.test.tsx" name="src/test/accessibility/a11y.test.tsx" time="0">
            <failure message="Failed to resolve import &quot;../../contexts/ToastContext&quot; from &quot;packages/frontend/src/test/accessibility/a11y.test.tsx&quot;. Does the file exist?" type="Error">
Error: Failed to resolve import &quot;../../contexts/ToastContext&quot; from &quot;packages/frontend/src/test/accessibility/a11y.test.tsx&quot;. Does the file exist?
  Plugin: vite:import-analysis
  File: C:/Users/AlexJ/Documents/Coding/Repos/my-repos/myRepoAnalyzer/unified-repo-analyzer/packages/frontend/src/test/accessibility/a11y.test.tsx:7:30
  6  |  import { beforeEach, describe, expect, it } from &quot;vitest&quot;;
  7  |  import App from &quot;../../App&quot;;
  8  |  import { ToastProvider } from &quot;../../contexts/ToastContext&quot;;
     |                                 ^
  9  |  expect.extend(toHaveNoViolations);
  10 |  const TestWrapper = ({ children }) =&gt; /* @__PURE__ */ jsxDEV(BrowserRouter, { children: /* @__PURE__ */ jsxDEV(ToastP...
 ❯ TransformPluginContext._formatLog ../../node_modules/vite/dist/node/chunks/dep-M_KD0XSK.js:31527:43
 ❯ TransformPluginContext.error ../../node_modules/vite/dist/node/chunks/dep-M_KD0XSK.js:31524:14
 ❯ normalizeUrl ../../node_modules/vite/dist/node/chunks/dep-M_KD0XSK.js:29996:18
 ❯ ../../node_modules/vite/dist/node/chunks/dep-M_KD0XSK.js:30054:32
 ❯ TransformPluginContext.transform ../../node_modules/vite/dist/node/chunks/dep-M_KD0XSK.js:30022:4
 ❯ EnvironmentPluginContainer.transform ../../node_modules/vite/dist/node/chunks/dep-M_KD0XSK.js:31325:14
 ❯ loadAndTransform ../../node_modules/vite/dist/node/chunks/dep-M_KD0XSK.js:26407:26
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/test/e2e/integration.test.tsx" timestamp="2025-09-21T23:33:31.552Z" hostname="AlexJ-N501VW" tests="12" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Complete Analysis Workflow &gt; should complete full repository analysis workflow" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Complete Analysis Workflow &gt; should handle batch analysis workflow" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Search and Discovery Workflow &gt; should complete repository search workflow" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Export and Sharing Workflow &gt; should complete export workflow" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Error Handling and Recovery &gt; should handle API errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Error Handling and Recovery &gt; should handle partial batch failures" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Performance and Optimization &gt; should handle large datasets efficiently" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Performance and Optimization &gt; should implement lazy loading for results" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Accessibility and User Experience &gt; should be keyboard navigable" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Accessibility and User Experience &gt; should provide proper ARIA labels and roles" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Accessibility and User Experience &gt; should handle screen reader announcements" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/e2e/integration.test.tsx" name="End-to-End Integration Tests &gt; Configuration and Settings &gt; should persist user preferences" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/test/performance/benchmarks.test.ts" timestamp="2025-09-21T23:33:31.556Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; Component Rendering Performance &gt; should render large repository lists within performance budget" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; Component Rendering Performance &gt; should handle rapid state updates efficiently" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; Component Rendering Performance &gt; should optimize bundle size and loading" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; API Performance &gt; should handle concurrent API requests efficiently" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; API Performance &gt; should implement effective caching strategy" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; Memory Management &gt; should not leak memory during repeated operations" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; Memory Management &gt; should handle large file processing efficiently" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; User Interaction Performance &gt; should respond to user interactions within 16ms (60fps)" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; User Interaction Performance &gt; should implement smooth scrolling and virtualization" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; Network Performance &gt; should implement request deduplication" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/performance/benchmarks.test.ts" name="Performance Benchmarks &gt; Network Performance &gt; should handle request timeouts gracefully" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/test/user-acceptance/real-world.test.tsx" timestamp="2025-09-21T23:33:31.561Z" hostname="AlexJ-N501VW" tests="9" failures="1" errors="0" skipped="0" time="0.2112246">
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; Developer Workflow - Frontend Developer &gt; should help frontend developer analyze React project" time="0.2030561">
            <system-err>
⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition.
⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath.

            </system-err>
            <failure message="Unable to find an accessible element with the role &quot;button&quot; and name `/analyze/i`

There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole

Ignored nodes: comments, script, style
[36m&lt;body /&gt;[39m" type="TestingLibraryElementError">
TestingLibraryElementError: Unable to find an accessible element with the role &quot;button&quot; and name `/analyze/i`

There are no accessible roles. But there might be some inaccessible roles. If you wish to access them, then set the `hidden` option to `true`. Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole

Ignored nodes: comments, script, style
&lt;body /&gt;
 ❯ Object.getElementError ../../node_modules/@testing-library/dom/dist/config.js:37:19
 ❯ ../../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
 ❯ ../../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
 ❯ ../../node_modules/@testing-library/dom/dist/query-helpers.js:95:19
 ❯ src/test/user-acceptance/real-world.test.tsx:194:36
            </failure>
        </testcase>
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; Team Lead Workflow - Batch Analysis &gt; should help team lead analyze multiple projects" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; Architect Workflow - Technology Discovery &gt; should help architect discover technology patterns" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; New Developer Workflow - Learning from Codebase &gt; should help new developer understand project structure" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; DevOps Engineer Workflow - Deployment Analysis &gt; should help DevOps engineer assess deployment readiness" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; Project Manager Workflow - Progress Tracking &gt; should help project manager track project health" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; Error Recovery and Edge Cases &gt; should handle network failures gracefully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; Error Recovery and Edge Cases &gt; should handle large repository analysis" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/test/user-acceptance/real-world.test.tsx" name="User Acceptance Tests - Real World Scenarios &gt; Error Recovery and Edge Cases &gt; should handle corrupted or inaccessible repositories" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/utils/__tests__/errorHandling.test.ts" timestamp="2025-09-21T23:33:31.568Z" hostname="AlexJ-N501VW" tests="27" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; parseError &gt; parses Axios errors correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; parseError &gt; parses network errors correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; parseError &gt; parses standard errors correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; parseError &gt; handles permission errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; parseError &gt; handles memory errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; parseError &gt; handles timeout errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; parseError &gt; handles string errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; parseError &gt; handles unknown errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; HTTP status code handling &gt; handles 400 Bad Request" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; HTTP status code handling &gt; handles 401 Unauthorized" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; HTTP status code handling &gt; handles 403 Forbidden" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; HTTP status code handling &gt; handles 408 Request Timeout" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; HTTP status code handling &gt; handles 413 Payload Too Large" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; HTTP status code handling &gt; handles 429 Too Many Requests" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; HTTP status code handling &gt; handles 500 Internal Server Error" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; HTTP status code handling &gt; handles 503 Service Unavailable" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; getRecoverySuggestions &gt; includes base suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; getRecoverySuggestions &gt; adds network-specific suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; getRecoverySuggestions &gt; adds timeout-specific suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; getRecoverySuggestions &gt; adds server error suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; getRecoverySuggestions &gt; removes duplicate suggestions" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; shouldShowRetryButton &gt; shows retry for recoverable errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; shouldShowRetryButton &gt; hides retry for non-recoverable errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; shouldShowRetryButton &gt; hides retry for 401 errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; shouldShowRetryButton &gt; hides retry for 403 errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; getErrorTitle &gt; returns specific titles for known error codes" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/utils/__tests__/errorHandling.test.ts" name="errorHandling utils &gt; getErrorTitle &gt; returns generic title for unknown error codes" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" timestamp="2025-09-21T23:33:31.578Z" hostname="AlexJ-N501VW" tests="9" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; handles initialization errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; shows validation errors with recovery option" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; handles provider change errors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; disables controls during loading" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; shows graceful degradation for unavailable providers" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; resets to defaults when reset button is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; shows success toast on successful configuration changes" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; handles component errors with error boundary" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.error.test.tsx" name="AnalysisConfiguration Error Handling &gt; shows warning toast for configuration issues" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.test.tsx" timestamp="2025-09-21T23:33:31.584Z" hostname="AlexJ-N501VW" tests="2" failures="0" errors="0" skipped="1" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.test.tsx" name="AnalysisConfiguration &gt; should have access to DOM globals" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisConfiguration.test.tsx" name="AnalysisConfiguration &gt; renders correctly with default options" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/AnalysisRequests.test.tsx" timestamp="2025-09-21T23:33:31.586Z" hostname="AlexJ-N501VW" tests="4" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisRequests.test.tsx" name="AnalysisRequests &gt; should render loading state" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisRequests.test.tsx" name="AnalysisRequests &gt; should render error state" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisRequests.test.tsx" name="AnalysisRequests &gt; should render requests and stats" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/AnalysisRequests.test.tsx" name="AnalysisRequests &gt; should render empty state" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/environment.test.ts" timestamp="2025-09-21T23:33:31.589Z" hostname="AlexJ-N501VW" tests="1" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/environment.test.ts" name="Environment Test &gt; should show current environment" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/ExecutiveSummary.test.tsx" timestamp="2025-09-21T23:33:31.590Z" hostname="AlexJ-N501VW" tests="5" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ExecutiveSummary.test.tsx" name="ExecutiveSummary &gt; renders repository overview" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ExecutiveSummary.test.tsx" name="ExecutiveSummary &gt; renders executive summary content" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ExecutiveSummary.test.tsx" name="ExecutiveSummary &gt; renders recommendations" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ExecutiveSummary.test.tsx" name="ExecutiveSummary &gt; renders potential issues" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ExecutiveSummary.test.tsx" name="ExecutiveSummary &gt; renders frameworks" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" timestamp="2025-09-21T23:33:31.593Z" hostname="AlexJ-N501VW" tests="8" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" name="MobileProgressTracker Component &gt; renders idle state correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" name="MobileProgressTracker Component &gt; renders running state with progress bar" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" name="MobileProgressTracker Component &gt; renders completed state correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" name="MobileProgressTracker Component &gt; renders failed state with error message" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" name="MobileProgressTracker Component &gt; shows disconnected state when websocket is not connected" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" name="MobileProgressTracker Component &gt; subscribes to analysis updates when analysisId is provided" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" name="MobileProgressTracker Component &gt; calls cancelAnalysis when cancel button is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/MobileProgressTracker.test.tsx" name="MobileProgressTracker Component &gt; toggles log visibility when show/hide logs button is clicked" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" timestamp="2025-09-21T23:33:31.599Z" hostname="AlexJ-N501VW" tests="8" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" name="ProgressTracker Component &gt; renders idle state correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" name="ProgressTracker Component &gt; renders running state with progress bar" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" name="ProgressTracker Component &gt; renders completed state correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" name="ProgressTracker Component &gt; renders failed state with error message" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" name="ProgressTracker Component &gt; shows disconnected state when websocket is not connected" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" name="ProgressTracker Component &gt; subscribes to analysis updates when analysisId is provided" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" name="ProgressTracker Component &gt; calls cancelAnalysis when cancel button is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ProgressTracker.test.tsx" name="ProgressTracker Component &gt; displays logs when available" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/ResultsViewer.test.tsx" timestamp="2025-09-21T23:33:31.603Z" hostname="AlexJ-N501VW" tests="4" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ResultsViewer.test.tsx" name="ResultsViewer &gt; renders without crashing" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ResultsViewer.test.tsx" name="ResultsViewer &gt; shows executive summary by default" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ResultsViewer.test.tsx" name="ResultsViewer &gt; switches tabs when clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/ResultsViewer.test.tsx" name="ResultsViewer &gt; displays message when no analysis is provided" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/setup-test.test.ts" timestamp="2025-09-21T23:33:31.604Z" hostname="AlexJ-N501VW" tests="1" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/setup-test.test.ts" name="Setup Test &gt; should have JSDOM globals after setup" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/__tests__/simple.test.ts" timestamp="2025-09-21T23:33:31.605Z" hostname="AlexJ-N501VW" tests="2" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/__tests__/simple.test.ts" name="Simple JSDOM Test &gt; should have access to DOM globals" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/__tests__/simple.test.ts" name="Simple JSDOM Test &gt; should be able to create DOM elements" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/configuration/__tests__/ConfigurationManager.test.tsx" timestamp="2025-09-21T23:33:31.606Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/configuration/__tests__/ConfigurationManager.test.tsx" name="src/components/configuration/__tests__/ConfigurationManager.test.tsx" time="0">
            <failure message="[vitest] vi.mock(&quot;../AnalysisPreferences&quot;, factory?: () =&gt; unknown) is not returning an object. Did you mean to return an object with a &quot;default&quot; key?" type="TypeError">
TypeError: [vitest] vi.mock(&quot;../AnalysisPreferences&quot;, factory?: () =&gt; unknown) is not returning an object. Did you mean to return an object with a &quot;default&quot; key?
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/configuration/__tests__/LLMProviderPreferences.models.test.tsx" timestamp="2025-09-21T23:33:31.608Z" hostname="AlexJ-N501VW" tests="2" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/configuration/__tests__/LLMProviderPreferences.models.test.tsx" name="LLMProviderPreferences OpenRouter Model Selection &gt; should render without crashing" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/configuration/__tests__/LLMProviderPreferences.models.test.tsx" name="LLMProviderPreferences OpenRouter Model Selection &gt; should render some content" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" timestamp="2025-09-21T23:33:31.610Z" hostname="AlexJ-N501VW" tests="21" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should render user-friendly error message" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should render suggestions list" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should render learn more link when provided" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should render original path when provided" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should show platform-specific tips when expanded" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should render technical details when enabled" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should handle retry callback" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should handle dismiss callback" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should render in compact mode" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should not render when dismissed" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should render warning message when no errors but warnings exist" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should not render when no errors, warnings, or user-friendly error" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should render appropriate icon for different severities" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should hide suggestions when showSuggestions is false" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should hide technical details when showTechnicalDetails is false" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should apply custom className" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; should create error message from path errors when no user-friendly error provided" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; Accessibility &gt; should have proper ARIA attributes" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; Accessibility &gt; should have proper focus management" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; Error message quality &gt; should display clear and actionable error messages" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/EnhancedErrorDisplay.test.tsx" name="EnhancedErrorDisplay &gt; Error message quality &gt; should provide contextual help for different error categories" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx" timestamp="2025-09-21T23:33:31.619Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; renders children when there is no error" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; renders error UI when child component throws" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; calls onError callback when error occurs" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; renders custom fallback when provided" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; resets error state when retry button is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; shows error details in development mode" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/ErrorBoundary.test.tsx" name="ErrorBoundary &gt; hides error details in production mode" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/error/__tests__/Toast.test.tsx" timestamp="2025-09-21T23:33:31.622Z" hostname="AlexJ-N501VW" tests="8" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/error/__tests__/Toast.test.tsx" name="Toast &gt; renders toast with title and message" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/Toast.test.tsx" name="Toast &gt; renders different toast types with appropriate styling" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/Toast.test.tsx" name="Toast &gt; calls onClose when close button is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/Toast.test.tsx" name="Toast &gt; auto-closes after specified duration" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/Toast.test.tsx" name="Toast &gt; does not auto-close when duration is 0" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/Toast.test.tsx" name="Toast &gt; renders and handles action button" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/Toast.test.tsx" name="Toast &gt; renders without message when not provided" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/error/__tests__/Toast.test.tsx" name="Toast &gt; renders toast element correctly" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" timestamp="2025-09-21T23:33:31.626Z" hostname="AlexJ-N501VW" tests="11" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should render all opportunities" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should display opportunity details" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should filter opportunities by type" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should expand opportunity details when clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should call onSelectOpportunity when View Details is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should show correct type badges with appropriate colors" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should sort opportunities by priority" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should show empty state when no opportunities" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should show filter counts correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should show repository count for each opportunity" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/IntegrationOpportunities.test.tsx" name="IntegrationOpportunities &gt; should handle different effort levels with appropriate styling" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/repository/__tests__/Pagination.test.tsx" timestamp="2025-09-21T23:33:31.634Z" hostname="AlexJ-N501VW" tests="7" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/repository/__tests__/Pagination.test.tsx" name="Pagination &gt; renders pagination with correct page numbers" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/Pagination.test.tsx" name="Pagination &gt; handles page changes correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/Pagination.test.tsx" name="Pagination &gt; handles next and previous buttons correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/Pagination.test.tsx" name="Pagination &gt; disables previous button on first page" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/Pagination.test.tsx" name="Pagination &gt; disables next button on last page" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/Pagination.test.tsx" name="Pagination &gt; handles small number of pages correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/Pagination.test.tsx" name="Pagination &gt; shows mobile pagination indicator" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/repository/__tests__/RelationshipGraph.test.tsx" timestamp="2025-09-21T23:33:31.636Z" hostname="AlexJ-N501VW" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/repository/__tests__/RelationshipGraph.test.tsx" name="src/components/repository/__tests__/RelationshipGraph.test.tsx" time="0">
            <failure message="jest is not defined" type="ReferenceError">
ReferenceError: jest is not defined
 ❯ src/components/repository/__tests__/RelationshipGraph.test.tsx:11:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/repository/__tests__/RepositoryCard.test.tsx" timestamp="2025-09-21T23:33:31.638Z" hostname="AlexJ-N501VW" tests="6" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryCard.test.tsx" name="RepositoryCard &gt; renders repository information correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryCard.test.tsx" name="RepositoryCard &gt; handles selection correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryCard.test.tsx" name="RepositoryCard &gt; handles view button click correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryCard.test.tsx" name="RepositoryCard &gt; displays selected state correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryCard.test.tsx" name="RepositoryCard &gt; formats date correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryCard.test.tsx" name="RepositoryCard &gt; formats different sizes correctly" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/repository/__tests__/RepositoryComparison.test.tsx" timestamp="2025-09-21T23:33:31.641Z" hostname="AlexJ-N501VW" tests="4" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryComparison.test.tsx" name="RepositoryComparison &gt; renders loading state initially" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryComparison.test.tsx" name="RepositoryComparison &gt; renders comparison data correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryComparison.test.tsx" name="RepositoryComparison &gt; handles API errors correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositoryComparison.test.tsx" name="RepositoryComparison &gt; calls onClose when close button is clicked" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/repository/__tests__/RepositorySelector.test.tsx" timestamp="2025-09-21T23:33:31.643Z" hostname="AlexJ-N501VW" tests="5" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositorySelector.test.tsx" name="RepositorySelector &gt; renders correctly with initial state" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositorySelector.test.tsx" name="RepositorySelector &gt; displays directory contents when loaded" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositorySelector.test.tsx" name="RepositorySelector &gt; navigates to a directory when clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositorySelector.test.tsx" name="RepositorySelector &gt; selects a repository when Select Repository button is clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/RepositorySelector.test.tsx" name="RepositorySelector &gt; displays recent repositories when available" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" timestamp="2025-09-21T23:33:31.646Z" hostname="AlexJ-N501VW" tests="9" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; renders the search interface with repositories" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; handles search input correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; handles repository selection correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; handles view repository correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; handles saved search selection correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; handles pagination correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; displays loading state correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; displays error state correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/repository/__tests__/SearchInterface.test.tsx" name="SearchInterface &gt; displays empty state correctly" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" timestamp="2025-09-21T23:33:31.651Z" hostname="AlexJ-N501VW" tests="10" failures="0" errors="0" skipped="0" time="0">
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; renders export button correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; opens dropdown when clicked" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; handles direct download correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; handles export for sharing correctly" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; shows loading state during export" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; handles export errors gracefully" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; displays export history when available" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; works with batch analysis" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; handles sharing with native share API when available" time="0">
        </testcase>
        <testcase classname="packages/frontend/src/components/analysis/results/__tests__/ExportButton.test.tsx" name="ExportButton &gt; falls back to clipboard when native share is not available" time="0">
        </testcase>
    </testsuite>
</testsuites>
